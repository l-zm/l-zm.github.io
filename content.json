{"meta":{"title":"Lizm's Personal Blog","subtitle":"You really have two down son (你真有两下子)","description":"Personal Blog","author":"Lizm","url":"http://yoursite.com"},"pages":[{"title":"archive","date":"2016-09-25T16:47:07.000Z","updated":"2016-09-25T16:51:45.000Z","comments":false,"path":"archives/index.html","permalink":"http://yoursite.com/archives/index.html","excerpt":"","text":""},{"title":"标签","date":"2016-09-25T10:38:09.000Z","updated":"2016-09-25T14:24:16.000Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Linux 操作命令","slug":"019 Linux 操作命令","date":"2016-10-14T00:00:00.000Z","updated":"2016-10-13T16:20:18.000Z","comments":true,"path":"2016/10/14/019 Linux 操作命令/","link":"","permalink":"http://yoursite.com/2016/10/14/019 Linux 操作命令/","excerpt":"","text":"复制 剪切 粘贴 复制的命令是 y 即yank(提起) 常用的命令如下y 在使用v模式选定了某一块的时候，复制选定块到缓冲区用yy 复制整行 (nyy或者yny ，复制n行，n为数字）y^ 复制当前到行头的内容y$ 复制当前到行尾的内容yw 复制一个word (nyw或者ynw，复制n个word，n为数字）yG 复制至档尾(nyG或者ynG，复制到第n行，例如1yG或者y1G，复制到档尾）剪切的命令是 d 即delete d与y命令基本类似 所以两个命令用法一样 包括含有数字的用法d 剪切选定块到缓冲区；dd 剪切整行d^ 剪切至行首d$ 剪切至行尾dw 剪切一个worddG 剪切至档尾 粘贴的命令式 p 即put(放下）p 小写p代表贴至游标后（下）, 因为游标是在具体字符的位置上, 所以实际是在该字符的后面P 大写P代表贴至游标前（上）整行的复制粘贴在游标的上（下）一行，非整行的复制则是粘贴在游标的前（后） 注： 在正则表达式中，^表示匹配字符串的开始位置，$表示匹配字符串的结束位置。 命令前面加数字表示重复的次数，加字母表示使用的缓冲区名称。使用英文句号”.”可以重复上一个命令。 在复制粘贴时，另一组常用的命令是u（撤销操作），U（撤销某一行最近所有修改），Ctrl+R（重做）， 这些功能主要是vim中的，vi中略有差别 Linux","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}],"keywords":[]},{"title":"Linux 中 curl","slug":"018 Linux 中 curl","date":"2016-10-11T00:00:00.000Z","updated":"2016-10-13T11:55:38.000Z","comments":true,"path":"2016/10/11/018 Linux 中 curl/","link":"","permalink":"http://yoursite.com/2016/10/11/018 Linux 中 curl/","excerpt":"","text":"curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本Ubuntu 中默认没有安装：apt-get install curl 安装即可 常见参数 [option] [URL…] -A/–user-agent 设置用户代理发送给服务器 -b/–cookie cookie字符串或文件读取位置 -c/–cookie-jar 操作结束后把cookie写入到这个文件中 -C/–continue-at 断点续转 -D/–dump-header 把header信息写入到该文件中 -e/–referer 来源网址 -f/–fail 连接失败时不显示http错误 -o/–output 把输出写到该文件中 -O/–remote-name 把输出写到该文件中，保留远程文件的文件名 -r/–range 检索来自HTTP/1.1或FTP服务器字节范围 -s/–silent 静音模式。不输出任何东西 -T/–upload-file 上传文件 -u/–user 设置服务器的用户和密码 -w/–write-out [format] 什么输出完成后 -x/–proxy 在给定的端口上使用HTTP代理 -#/–progress-bar 进度条显示当前的传送状态 常用 curl 实例 发送 GET 请求 # curl http://www.baidu.com # curl http://www.baidu.com/login?param1=12345\\&amp;param2=6789 多个参数要加 \\ 转义 # curl -i http://www.baidu.com 显示全部信息 # curl -l http://www.baidu.com 只显示头部信息 # curl -v http://www.baidu.com 显示get请求全过程解析 发送 POST 请求 # curl -d &quot;param1=12345&amp;param2=6789&quot; http://www.baidu.com 抓取页面内容到一个文件中 选项 -o 将下载数据写入到指定名称的文件中，并使用 –progress 显示进度条 # curl -o l-zm.html http://www.l-zm.com --progress 使用选项 -O URL必须具体到文件 不然抓不下来 # curl -O http://www.baidu.com/lim.jpg --progress # curl -O http://www.baidu.com/lim01.jpg -O http://www.baidu.com/lim02.jpg 获取多个 Linux curl","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"curl","slug":"curl","permalink":"http://yoursite.com/tags/curl/"}],"keywords":[]},{"title":"CentOS 6 计划任务 CronTab","slug":"017 CentOS 6 计划任务 CronTab","date":"2016-10-04T00:00:00.000Z","updated":"2016-10-13T14:07:41.000Z","comments":true,"path":"2016/10/04/017 CentOS 6 计划任务 CronTab/","link":"","permalink":"http://yoursite.com/2016/10/04/017 CentOS 6 计划任务 CronTab/","excerpt":"","text":"安装 CronTab CentOS 中自带了CronTab 如果有需要 百度一下，你就知道 CronTab 使用与解释crontab -l 查看所有的计划任务crontab -e 修改计划任务 service crond start 启动计划任务service crond restart 重启计划任务service crond reload 重新载入计划任务 Ubuntu 下的使用的语法service cron start 启动计划任务service cron restart 重启计划任务service cron reload 重新载入计划任务 如果第一次用这个命令会让你选择文本编辑器, 我选择的是`vim` 如果要换: `select-editor` CronTab 的语法* * * * * date &gt;&gt; /tmp/date.txt * * * * * date &gt;&gt; /tmp/date.txt 分钟 小时 几号 几月 星期 需要执行的命令 案例每一小时* */1 * * * /service/l-zm/request.sh 每小时执行/etc/cron.hourly目录内的脚本01 * * * * root run-parts /etc/cron.hourly 每秒执行一次*/1 * * * * sleep 0s;date &gt;&gt; /tmp/date.txt */1 * * * * sleep 1s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 2s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 3s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 4s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 5s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 6s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 7s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 8s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 9s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 10s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 11s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 12s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 13s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 14s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 15s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 16s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 17s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 18s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 19s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 20s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 21s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 22s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 23s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 24s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 25s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 26s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 27s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 28s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 29s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 30s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 31s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 32s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 33s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 34s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 35s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 36s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 37s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 38s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 39s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 40s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 41s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 42s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 43s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 44s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 45s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 46s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 47s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 48s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 49s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 50s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 51s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 52s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 53s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 54s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 55s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 56s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 57s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 58s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 59s; date &gt;&gt; /tmp/date.txt 如果每秒没有循环连续 可以试试把 sleep 0s 删除, 在最后添加 sleep 60s (CentOS 和 Ubuntu 下不一样) 每小时的第3和第15分钟执行3,15 * * * * /service/l-zm/request.sh 在上午8点到11点的第3和第15分钟执行3,15 8-11 * * * /service/l-zm/request.sh 每隔两天的上午8点到11点的第3和第15分钟执行3,15 8-11 */2 * * date &gt;&gt; /tmp/date.txt 每个星期一的上午8点到11点的第3和第15分钟执行3,15 8-11 * * 1 date &gt;&gt; /tmp/date.txt 每晚的21:3030 21 * * * /service/l-zm/request.sh 每月1、10、22日的4 : 4545 4 1,10,22 * * /service/l-zm/request.sh 每周六、周日的1 : 1010 1 * * 6,0 /service/l-zm/request.sh 每天18 : 00至23 : 00之间每隔30分钟0,30 18-23 * * * /service/l-zm/request.sh 每星期六的晚上11 : 00 pm0 23 * * 6 /service/l-zm/request.sh 晚上11点到早上7点之间，每隔一小时* 23-7/1 * * * /service/l-zm/request.sh 每月的4号与每周一到周三的11点0 11 4 * mon-wed /service/l-zm/request.sh 一月一号的4点0 4 1 jan * /service/l-zm/request.sh CentOS CronTab","categories":[],"tags":[{"name":"CentOS","slug":"CentOS","permalink":"http://yoursite.com/tags/CentOS/"},{"name":"CronTab","slug":"CronTab","permalink":"http://yoursite.com/tags/CronTab/"}],"keywords":[]},{"title":"CentOS 6 安装 JDK","slug":"016 CentOS 6 安装JDK","date":"2016-10-03T00:00:00.000Z","updated":"2016-10-02T17:11:05.000Z","comments":true,"path":"2016/10/03/016 CentOS 6 安装JDK/","link":"","permalink":"http://yoursite.com/2016/10/03/016 CentOS 6 安装JDK/","excerpt":"","text":"下载 JDK 安装http://www.oracle.com/technetwork/java/javase/downloads/index.html 其他版本下载提示页面拉低，找到 Java Archive 上传至服务器 tar -zxvf jdk-7u80-linux-x64.tar.gz mv jdk1.7.0_80 /usr/ 设置环境变量 vim /etc/profile 添加如下内容 export JAVA_HOME=/usr/jdk1.7.0_80 export JRE_HOME=$JAVA_HOME/jre export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=./:$JAVA_HOME/lib:$JAVA_HOME/jre/lib 修改生效 source /etc/profile 验证 java -version java version &quot;1.7.0_80&quot; Java(TM) SE Runtime Environment (build 1.7.0_80-b15) Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode) 使用 yum 安装 JDKyum search java | grep jdk ldapjdk-javadoc.x86_64 : Javadoc for ldapjdk java-1.6.0-openjdk.x86_64 : OpenJDK Runtime Environment java-1.6.0-openjdk-demo.x86_64 : OpenJDK Demos java-1.6.0-openjdk-devel.x86_64 : OpenJDK Development Environment java-1.6.0-openjdk-javadoc.x86_64 : OpenJDK API Documentation java-1.6.0-openjdk-src.x86_64 : OpenJDK Source Bundle java-1.7.0-openjdk.x86_64 : OpenJDK Runtime Environment java-1.7.0-openjdk-demo.x86_64 : OpenJDK Demos java-1.7.0-openjdk-devel.x86_64 : OpenJDK Development Environment java-1.7.0-openjdk-javadoc.noarch : OpenJDK API Documentation java-1.7.0-openjdk-src.x86_64 : OpenJDK Source Bundle java-1.8.0-openjdk.x86_64 : OpenJDK Runtime Environment java-1.8.0-openjdk-debug.x86_64 : OpenJDK Runtime Environment with full debug on java-1.8.0-openjdk-demo.x86_64 : OpenJDK Demos java-1.8.0-openjdk-demo-debug.x86_64 : OpenJDK Demos with full debug on java-1.8.0-openjdk-devel.x86_64 : OpenJDK Development Environment java-1.8.0-openjdk-devel-debug.x86_64 : OpenJDK Development Environment with java-1.8.0-openjdk-headless.x86_64 : OpenJDK Runtime Environment java-1.8.0-openjdk-headless-debug.x86_64 : OpenJDK Runtime Environment with full java-1.8.0-openjdk-javadoc.noarch : OpenJDK API Documentation java-1.8.0-openjdk-javadoc-debug.noarch : OpenJDK API Documentation for packages java-1.8.0-openjdk-src.x86_64 : OpenJDK Source Bundle java-1.8.0-openjdk-src-debug.x86_64 : OpenJDK Source Bundle for packages with ldapjdk.x86_64 : The Mozilla LDAP Java SDK 安装 java-1.7.0-openjdk yum install java-1.7.0-openjdk 安装完之后，默认的安装目录是在: /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75.x86_64 设置环境变量 修改生效 同上 JDK","categories":[],"tags":[{"name":"JDK","slug":"JDK","permalink":"http://yoursite.com/tags/JDK/"}],"keywords":[]},{"title":"Tomcat 各版本下载","slug":"015 Tomcat 各版本下载","date":"2016-10-03T00:00:00.000Z","updated":"2016-10-02T16:24:36.000Z","comments":true,"path":"2016/10/03/015 Tomcat 各版本下载/","link":"","permalink":"http://yoursite.com/2016/10/03/015 Tomcat 各版本下载/","excerpt":"","text":"http://archive.apache.org/dist/tomcat/ http://archive.apache.org/dist/tomcat/ Tomcat","categories":[],"tags":[{"name":"Tomcat","slug":"Tomcat","permalink":"http://yoursite.com/tags/Tomcat/"}],"keywords":[]},{"title":"Centos 6 中部署 Hexo 个人博客","slug":"013 CentOS 6 中部署 Hexo 个人博客","date":"2016-10-01T00:00:00.000Z","updated":"2016-10-02T16:02:52.000Z","comments":true,"path":"2016/10/01/013 CentOS 6 中部署 Hexo 个人博客/","link":"","permalink":"http://yoursite.com/2016/10/01/013 CentOS 6 中部署 Hexo 个人博客/","excerpt":"","text":"首先安装 Node.js更新系统所有软件1yum -y update 安装 Development Tools1yum -y groupinstall &quot;Development Tools&quot; 安装 screen1yum -y install screen 选择目录来编译源程序1cd /usr/local/src 下载 Node.js1wget http://nodejs.org/dist/node-latest.tar.gz 解压并变为目录12tar zxf node-*.tar.gzcd node-v* 配置环境1./configure 出现问题WARNING: C++ compiler too old, need g++ 4.8 or clang++ 3.4 (CXX=g++)gcc 版本过低，升级gcc。请看我博客中 CentOS 6 安装 / 更新 GCC 编译器 编译1make 出现问题make[1]: [/usr/local/src/node-v6.7.0/out/Release/obj.target/v8_libplatform/deps/v8/src/libplatform/default-platform.o] 错误 1make[1]: Leaving directory /usr/local/src/node-v6.7.0/outmake: * [node] 错误 2源码编译升级安装了gcc后，编译程序或运行其它程序时，有时会出现类似/usr/lib64/libstdc++.so.6: version GLIBCXX_3.4.21 not found的问题。这是因为升级gcc时，生成的动态库没有替换老版本gcc的动态库导致的，将gcc最新版本的动态库替换系统中老版本的动态库即可解决strings /usr/lib64/libstdc++.so.6 | grep GLIBC输出结果如下……GLIBCXX_3.4.17GLIBCXX_3.4.18GLIBCXX_3.4.19GLIBC_2.3GLIBC_2.2.5GLIBC_2.3.2……从以上输出可以看出，gcc的动态库还是旧版本的。说明出现这些问题，是因为升级gcc时，生成的动态库没有替换老版本gcc的动态库问题处理：执行以下命令，查找编译gcc时生成的最新动态库find / -name &quot;libstdc++.so星&quot;……/usr/local/build/gcc-4.9.1/x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.20/usr/local/build/gcc-4.9.1/x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so/usr/local/build/gcc-4.9.1/x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6/usr/local/build/gcc-4.9.1/stage1-x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.20(最新动态库)/usr/local/build/gcc-4.9.1/stage1-x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so/usr/local/build/gcc-4.9.1/stage1-x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6/usr/local/build/gcc-4.9.1/prev-x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.20/usr/local/build/gcc-4.9.1/prev-x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so/usr/local/build/gcc-4.9.1/prev-x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6将上面的最新动态库libstdc++.so.6.0.20复制到/usr/lib64目录下cp /usr/local/build/gcc-4.9.1/stage1-x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.20 /usr/lib64复制后，修改系统默认动态库的指向，即：重建默认库的软连接切换工作目录至 cd /usr/lib64删除原来软连接 rm -rf libstdc++.so.6将默认库的软连接指向最新动态库 ln -s libstdc++.so.6.0.20 libstdc++.so.6默认动态库升级完成。重新运行以下命令检查动态库 strings /usr/lib64/libstdc++.so.6 | grep GLIBC有了 GLIBCXX_3.4.20重新编译 make 安装1make install Node.js 安装完成 查看Node.js 版本 1node --version 安装 Nginx 这里不多说，网上都是 安装 hexo1npm install -g hexo 初始化 可以到自己指定的目录下初始化，比如我的在 /service/hexo 下 1hexo init 部署 将自己的 MarkDown 文件上传至服务器 Hexo source 指定文件夹下 hexo g hexo s &amp; (添加 &amp; 后，关掉terminal后服务依然在) ps aux | grep hexo (找到指定的端口号可以使用：kill -9 123456 杀掉服务) 完成服务器 Node.js Hexo","categories":[],"tags":[{"name":"服务器","slug":"服务器","permalink":"http://yoursite.com/tags/服务器/"},{"name":"Node.js","slug":"Node-js","permalink":"http://yoursite.com/tags/Node-js/"},{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}],"keywords":[]},{"title":"CentOS 6 安装 / 更新 GCC 编译器","slug":"014 CentOS 6 安装:更新 gcc 编译器","date":"2016-10-01T00:00:00.000Z","updated":"2016-10-02T16:00:03.000Z","comments":true,"path":"2016/10/01/014 CentOS 6 安装:更新 gcc 编译器/","link":"","permalink":"http://yoursite.com/2016/10/01/014 CentOS 6 安装:更新 gcc 编译器/","excerpt":"","text":"使用 yum 安装 gcc 安装 gcc 、 c++ 编译器以及内核文件 1yum -y install gcc gcc-c++ kernel-devel yum 安装的版本太低 就需要自己安装了 不建议在服务器上面下载 因为速度太慢了 下面这个网址 根据自己的需求下载指定版本 然后上传至服务器http://gcc.skazkaforyou.com/releases/ 下载 解压在这里，我们将gcc-4.9.1.tar.gz解压到/usr/local/src目录中(当然你也可以指定其他目录) 解压 tar -xvzf gcc-4.9.1.tar.gz cd gcc-4.9.1 运行 download_prerequisites 脚本./contrib/download_prerequisites 安装gcc需要下载诸如gmp、mpfr、mpc等依赖文件，执行download_prerequisites将会自动下载这些软件并解压到当前目录(文件不大，总共只有几MB，请耐心等待下载) gcc 安装位置接着，就可以对gcc进行编译安装了。在此之前，我们先创建一个目录 /usr/local/build/gcc-4.9.1 (你也可以自行指定其他目录)用于存放编译后的程序文件 mkdir /usr/local/build/ mkdir /usr/local/build/gcc-4.9.1 跳转到编译后的程序文件存放目录cd /usr/local/build/gcc-4.9.1调用gcc源程序的configure(后面的参数选项可根据需要自行修改)，用于配置gcc/usr/local/src/gcc-4.9.1/configure --enable-checking=release --enable-languages=c,c++ --disable-multilib充分发挥CPU四核优势，启动四线程make -j4 编译 gcc 源程序 需要消耗比较长的时间make make命令这一过程耗费的时间非常多 我大概用了一个小时 安装 gccmake insatall 完成查看 gcc 版本 gcc -v gcc version 4.9.1 (GCC) CentOS GCC","categories":[],"tags":[{"name":"CentOS","slug":"CentOS","permalink":"http://yoursite.com/tags/CentOS/"},{"name":"GCC","slug":"GCC","permalink":"http://yoursite.com/tags/GCC/"}],"keywords":[]},{"title":"Mac 电脑下终端程序 SecureCRT","slug":"012 Mac 电脑下终端程序 SecureCRT","date":"2016-09-29T00:00:00.000Z","updated":"2016-09-28T12:55:05.000Z","comments":true,"path":"2016/09/29/012 Mac 电脑下终端程序 SecureCRT/","link":"","permalink":"http://yoursite.com/2016/09/29/012 Mac 电脑下终端程序 SecureCRT/","excerpt":"","text":"不能记录密码打开 SecureCRT 的全局选项，在主菜单 Preferences-&gt;General -&gt; 取消 Use Keychain 修改主题连接一个回话，在菜单中找到 Options-&gt;Session Options-&gt;Appearance (如果显示中文有问题也在这里设置) CRACK STEP 打开dmg镜像，将 SecureCRT.app 拖入应用程序 打开一次应用程序中的 SecureCRT.app-&gt;I Agree 后退出 必须要做！ 到应用程序里先找到secureCRT的包内容，进入MACOS文件夹。替换crack中的secureCRT文件 打开软件，到 Help 中点击 Enter License Data-&gt;Continue-&gt;Enter License Manually 对应Crack文件夹中的 Readme!! 文档填入相应信息即可 Mac 软件","categories":[],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://yoursite.com/tags/Mac/"},{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}],"keywords":[]},{"title":"Nginx 负载均衡","slug":"011 Nginx 负载均衡","date":"2016-09-28T00:00:00.000Z","updated":"2016-09-27T17:46:47.000Z","comments":true,"path":"2016/09/28/011 Nginx 负载均衡/","link":"","permalink":"http://yoursite.com/2016/09/28/011 Nginx 负载均衡/","excerpt":"","text":"说明一般情况下，项目上线可能会选在凌晨时刻进行，比如之前在中国电信，项目上线要等到凌晨一点，由测试给出最终版本项目文件，然后等待运维部署上线，我们开发等待测试给出上线结果，如果有问题，马上做修改，因为此刻访问用户最少，影响微乎其微。但是，上线完成，已经六点了。 生产环境 是一个神圣而有伟大的地方 只可远观而不可亵玩焉 Nginx 设置备用服务器官方 Example Configuration 1234567891011121314upstream backend &#123; server backend1.example.com weight=5; server backend2.example.com:8080; server unix:/tmp/backend3; server backup1.example.com:8080 backup; server backup2.example.com:8080 backup;&#125;server &#123; location / &#123; proxy_pass http://backend; &#125;&#125; 官方的说法是默认情况下，请求会根据权重在服务器之间请求。在上面的例子中，每7请求将被分配如下：5个请求到backend1.example.com、1个请求到backend2.example.com:8080、1个请求到unix:/tmp/backend3。如果与服务器的通信的过程中发生了错误，请求将被传递到下一个服务器，等等，直到尝试了所有的运作的服务器都放生错误，请求将请求剩下的备用服务器地址。 12345678910111213141516upstream backend &#123; server www.l-zm.com weight=5; server www.l-zm.com:8080; server www.l-zm.com:8081 backup;&#125;server &#123; listen 80; server_name localhost; location / &#123; index index.html proxy_pass http://backend; &#125;&#125; TODO：不间断更新中Nginx 服务器","categories":[],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/tags/Nginx/"},{"name":"服务器","slug":"服务器","permalink":"http://yoursite.com/tags/服务器/"}],"keywords":[]},{"title":"Mac 电脑 U盘 重装系统","slug":"006 Mac 电脑 U盘 重装系统","date":"2016-09-27T00:00:00.000Z","updated":"2016-09-26T16:40:19.000Z","comments":true,"path":"2016/09/27/006 Mac 电脑 U盘 重装系统/","link":"","permalink":"http://yoursite.com/2016/09/27/006 Mac 电脑 U盘 重装系统/","excerpt":"","text":"系统Install\\ macOS\\ Sierra.app 最新的系统可以去 Apple Store 里面下载 U盘lzmvlzm U盘名称可以到磁盘工具里面查看 终端输入1$ sudo /Applications/Install\\ macOS\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/lzmvlzm --applicationpath /Applications/Install\\ macOS\\ Sierra.app --nointeraction 操作 开机按下 option 键 Mac 系统","categories":[],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://yoursite.com/tags/Mac/"},{"name":"系统","slug":"系统","permalink":"http://yoursite.com/tags/系统/"}],"keywords":[]},{"title":"iOS 设置 Launch Image 启动图片尺寸 (闪图)","slug":"010 iOS 设置 Launch Image 启动图片尺寸 (闪图) ","date":"2016-09-27T00:00:00.000Z","updated":"2016-09-26T17:26:58.000Z","comments":true,"path":"2016/09/27/010 iOS 设置 Launch Image 启动图片尺寸 (闪图) /","link":"","permalink":"http://yoursite.com/2016/09/27/010 iOS 设置 Launch Image 启动图片尺寸 (闪图) /","excerpt":"","text":"iPhone Portrait iOS 8,9 Retina HD 5.5 ( 1242 * 2208 ) @3x ( 6 plus ) Retina HD 4.7 ( 750 * 1334 ) @2x ( 6 ) iPhone Landscape iOS 8,9 ( 横屏 ) Retina HD 5.5 ( 2208 * 1242 ) @3x ( 6 plus ) iPhone Portrait iOS 7-9 2x ( 640 * 960 ) @2x ( 4/4s ) Retina 4 ( 640 * 1136 ) @2x ( 5/5s/5c ) iPhone Portrait iOS 5,6 1x ( 320 * 480 ) @1x 2x ( 640 * 960 ) @2x Retina 4 ( 640 * 1136 ) @2x iPad Portrait iOS 7-9 1x ( 768 * 1024 ) @1x 2x ( 1536 * 2048 ) @2x iPad Landscape iOS 7-9 ( 横屏 ) 1x ( 1024 * 768 ) @1x 2x ( 2048 * 1536 ) @2x iPad Portrait iOS 5,6 1x ( 768 * 1024 ) @1x 2x ( 1536 * 2048 ) @2x iPad Landscape iOS 5,6 1x ( 1024 * 768 ) @1x 2x ( 2048 * 1536 ) @2x iPad Portrait Without Status Bar iOS 5,6 1x ( 768 * 1004 ) @1x 2x ( 1536 * 2008 ) @2x iPad Landscape Without Status Bar iOS 5,6 1x ( 1024 * 748 ) @1x 2x ( 2048 * 1496 ) @2x evice Portrait size Landscape size iPhone 6s Plus, iPhone 6 Plus 1080px by 1920px 1920px by 1080px iPhone 6s, iPhone 6 750px by 1334px 1334px by 750px iPhone SE 640px by 1136px 1136px by 640px 12.9-inch iPad Pro 2048px by 2732px 2732px by 2048px 9.7-inch iPad Pro, iPad Air 2, iPad mini 4, iPad mini 2 1536px by 2048px 2048px by 1536px 如果显示不正常, 把 App 卸载了重新安装下 延长显示时间代码 ( 在第一个加载页面的 viewDidLoad 中添加 )12345override func viewDidLoad() &#123; super.viewDidLoad() // LaunchImage 显示时间延长 NSThread.sleepForTimeInterval(3.0)//延长3秒&#125; iOS","categories":[],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://yoursite.com/tags/iOS/"}],"keywords":[]},{"title":"Spring 各版本 jar包 下载","slug":"007 Spring 各版本 jar包 下载","date":"2016-09-27T00:00:00.000Z","updated":"2016-09-26T16:45:23.000Z","comments":true,"path":"2016/09/27/007 Spring 各版本 jar包 下载/","link":"","permalink":"http://yoursite.com/2016/09/27/007 Spring 各版本 jar包 下载/","excerpt":"","text":"http://repo.spring.io/release/org/springframework/spring/ http://repo.spring.io/release/org/springframework/spring/ Spring","categories":[],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://yoursite.com/tags/Spring/"}],"keywords":[]},{"title":"Struts 各版本 jar包 下载","slug":"008 Struts 各版本 jar包 下载","date":"2016-09-27T00:00:00.000Z","updated":"2016-09-26T16:44:48.000Z","comments":true,"path":"2016/09/27/008 Struts 各版本 jar包 下载/","link":"","permalink":"http://yoursite.com/2016/09/27/008 Struts 各版本 jar包 下载/","excerpt":"","text":"http://archive.apache.org/dist/struts/binaries/ http://archive.apache.org/dist/struts/binaries/ Struts","categories":[],"tags":[{"name":"Struts","slug":"Struts","permalink":"http://yoursite.com/tags/Struts/"}],"keywords":[]},{"title":"Java 中 System.getProperty() 方法可以获取系统的那些值","slug":"009 Java 中 System.getProperty() 方法可以获取系统的那些值","date":"2016-09-27T00:00:00.000Z","updated":"2016-09-26T17:04:54.000Z","comments":true,"path":"2016/09/27/009 Java 中 System.getProperty() 方法可以获取系统的那些值/","link":"","permalink":"http://yoursite.com/2016/09/27/009 Java 中 System.getProperty() 方法可以获取系统的那些值/","excerpt":"","text":"- - java.version Java 运行时环境版本 java.vendor Java 运行时环境供应商 java.vendor.url Java 供应商的 URL java.home Java 安装目录 java.vm.specification.version Java 虚拟机规范版本 java.vm.specification.vendor Java 虚拟机规范供应商 java.vm.specification.name Java 虚拟机规范名称 java.vm.version Java 虚拟机实现版本 java.vm.vendor Java 虚拟机实现供应商 java.vm.name Java 虚拟机实现名称 java.specification.version Java 运行时环境规范版本 java.specification.vendor Java 运行时环境规范供应商 java.specification.name Java 运行时环境规范名称 java.class.version Java 类格式版本号 java.class.path Java 类路径 java.library.path 加载库时搜索的路径列表 java.io.tmpdir 默认的临时文件路径 java.compiler 要使用的 JIT 编译器的名称 java.ext.dirs 一个或多个扩展目录的路径 os.name 操作系统的名称 os.arch 操作系统的架构 os.version 操作系统的版本 file.separator 文件分隔符（在 UNIX 系统中是“/”） path.separator 路径分隔符（在 UNIX 系统中是“:”） line.separator 行分隔符（在 UNIX 系统中是“/n”） user.name 用户的账户名称 user.home 用户的主目录 user.dir 用户的当前工作目录 1System.getProperty(\"user.dir\") Java","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}],"keywords":[]},{"title":"Apple 系统固件下载地址","slug":"005 Apple 系统固件下载地址","date":"2016-09-26T00:00:00.000Z","updated":"2016-09-25T18:41:47.000Z","comments":true,"path":"2016/09/26/005 Apple 系统固件下载地址/","link":"","permalink":"http://yoursite.com/2016/09/26/005 Apple 系统固件下载地址/","excerpt":"","text":"https://support.apple.com/zh_CN/downloads/ Apple","categories":[],"tags":[{"name":"Apple","slug":"Apple","permalink":"http://yoursite.com/tags/Apple/"}],"keywords":[]},{"title":"MySQL 数据库编码方式修改","slug":"004 MySQL 数据库编码方式修改","date":"2016-09-26T00:00:00.000Z","updated":"2016-09-26T01:34:17.000Z","comments":true,"path":"2016/09/26/004 MySQL 数据库编码方式修改/","link":"","permalink":"http://yoursite.com/2016/09/26/004 MySQL 数据库编码方式修改/","excerpt":"","text":"查看 MySQL 编码进入 MySQL 输入 status 1234567891011121314151617mysql Ver 14.14 Distrib 5.6.33, for debian-linux-gnu (x86_64) using EditLine wrapperConnection id: 249Current database:Current user: root@localhostSSL: Not in useCurrent pager: stdoutUsing outfile: ''Using delimiter: ;Server version: 5.6.33-0ubuntu0.14.04.1 (Ubuntu)Protocol version: 10Connection: Localhost via UNIX socketServer characterset: utf8Db characterset: utf8Client characterset: utf8Conn. characterset: utf8UNIX socket: /var/run/mysqld/mysqld.sockUptime: 5 hours 16 min 18 sec 如果下面这四个不是 utf8 1234Server characterset: utf8Db characterset: utf8Client characterset: utf8Conn. characterset: utf8 保存中文的时候可能会乱码 修改1$ vim /etc/mysql/my.cnf [client] &gt; 下面追加 default-character-set=utf8 [mysqld] &gt; 下面追加 character-set-server=utf8 [mysql] &gt; 下面追加 no-auto-rehash 重启 MySQL 数据库输入1$ service mysql restart (重启数据库) MySQL","categories":[],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://yoursite.com/tags/MySQL/"}],"keywords":[]},{"title":"Mac 显示隐藏文件","slug":"002 Mac 显示隐藏文件","date":"2016-09-25T00:00:00.000Z","updated":"2016-09-25T18:32:45.000Z","comments":true,"path":"2016/09/25/002 Mac 显示隐藏文件/","link":"","permalink":"http://yoursite.com/2016/09/25/002 Mac 显示隐藏文件/","excerpt":"","text":"终端输入1$ defaults write com.apple.finder AppleShowAllFiles -bool true 生效强制退出 Finder commend + option + esc 恢复原来的样子1$ defaults write com.apple.finder AppleShowAllFiles -bool false Mac","categories":[],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://yoursite.com/tags/Mac/"}],"keywords":[]},{"title":"Mac 修改 Dock 栏隐藏的速度","slug":"003 Mac 修改 Dock 栏隐藏的速度","date":"2016-09-25T00:00:00.000Z","updated":"2016-09-25T18:34:08.000Z","comments":true,"path":"2016/09/25/003 Mac 修改 Dock 栏隐藏的速度/","link":"","permalink":"http://yoursite.com/2016/09/25/003 Mac 修改 Dock 栏隐藏的速度/","excerpt":"","text":"修改 Dock 栏显示隐藏的速度（ 0秒 | 0.5秒 默认是 1 ）1$ defaults write com.apple.dock autohide-delay -float 0 &amp;&amp; killall Dock 恢复默认设置1$ defaults delete com.apple.Dock autohide-delay &amp;&amp; killall Dock Mac","categories":[],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://yoursite.com/tags/Mac/"}],"keywords":[]},{"title":"Mac 电脑设置 Finder 可以退出","slug":"001 Mac 电脑设置 Finder 可以退出","date":"2016-09-25T00:00:00.000Z","updated":"2016-09-27T01:54:05.000Z","comments":true,"path":"2016/09/25/001 Mac 电脑设置 Finder 可以退出/","link":"","permalink":"http://yoursite.com/2016/09/25/001 Mac 电脑设置 Finder 可以退出/","excerpt":"","text":"终端输入1$ defaults write com.apple.Finder QuitMenuItem 1 恢复原来的样子1$ defaults write com.apple.Finder QuitMenuItem 0 Mac","categories":[],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://yoursite.com/tags/Mac/"}],"keywords":[]}]}