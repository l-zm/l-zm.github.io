{"meta":{"title":"Lizm's Personal Blog","subtitle":"You really have two down son (你真有两下子)","description":"Personal Blog","author":"Lizm","url":"http://yoursite.com"},"pages":[{"title":"archive","date":"2016-09-25T16:47:07.000Z","updated":"2016-09-25T16:51:45.000Z","comments":false,"path":"archives/index.html","permalink":"http://yoursite.com/archives/index.html","excerpt":"","text":""},{"title":"标签","date":"2016-09-25T10:38:09.000Z","updated":"2016-09-25T14:24:16.000Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"网络请求的请求头和应答头解释","slug":"031 网络请求的请求头和应答头解释","date":"2017-03-10T00:00:00.000Z","updated":"2017-03-10T09:49:49.000Z","comments":true,"path":"2017/03/10/031 网络请求的请求头和应答头解释/","link":"","permalink":"http://yoursite.com/2017/03/10/031 网络请求的请求头和应答头解释/","excerpt":"","text":"HTTP 请求的细节请求方式：POST(常用)、GET(常用)、HEAD、OPTIONS、DELETE、TRACE、PUT Request Headers (请求头)：浏览器通过这个头告诉服务器，它所支持的数据类型 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 浏览器通过这个头告诉服务器，支持的压缩格式 Accept-Encoding：gzip, deflate, sdch, br 浏览器通过这个头告诉服务器，它的语言环境 Accept-Language: zh-CN,zh;q=0.8,en;q=0.6 浏览器通过这个头告诉服务器，请求完后是断开链接还是何持链接 Connection: keep-alive 通过在客户端记录信息确定用户身份 Cookie: _gscu_1241536983=882696267fjfxi33;TSf75e5b=e0cd2fdfeb03cb76b58c2625a 浏览器通过这个头告诉服务器，想访问哪台主机 Host: l-zm.com 浏览器通过这个头告诉服务器，客户机是哪个页面来的 防盗链 Referer: http://www.l-zm.com/index.jsp 浏览器通过这个头告诉服务器，它支持哪种字符集 Accept-Charset: zh-cn,zh;q=0.5 浏览器通过这个头告诉服务器，缓存数据的时间 如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回304代码 If-Modified-Since: Fri, 10 Mar 2017 08:22:58 GMT 自动升级请求从http到https Upgrade-Insecure-Requests: 1 浏览器类型 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36 Response Headers (应答头)：Cache-Control: privateCache-Control指定请求和响应遵循的缓存机制。在请求消息或响应消息中设置Cache-Control并不会修改另一个消息处理过程中的缓存处理过程。请求时的缓存指令包括no-cache、no-store、max-age、max-stale、min-fresh、only-if-cached，响应消息中的指令包括public、private、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age。各个消息中的指令含义如下： no-cache：指示请求或响应消息不能缓存，实际上是可以存储在本地缓存区中的，只是在与原始服务器进行新鲜度验证之前，缓存不能将其提供给客户端使用 no-store：缓存应该尽快从存储器中删除文档的所有痕迹，因为其中可能会包含敏感信息。 max-age：缓存无法返回缓存时间长于max-age规定秒的文档，若不超规定秒浏览器将不会发送对应的请求到服务器，数据由缓存直接返回；超过这一时间段才进一步由服务器决定是返回新数据还是仍由缓存提供。若同时还发送了max-stale指令，则使用期可能会超过其过期时间。 min-fresh：至少在未来规定秒内文档要保持新鲜，接受其新鲜生命期大于其当前 Age 跟 min-fresh 值之和的缓存对象。 max-stale：指示客户端可以接收过期响应消息，如果指定max-stale消息的值，那么客户端可以接收过期但在指定值之内的响应消息。 only-if-cached：只有当缓存中有副本存在时，客户端才会获得一份副本。 Public：指示响应可被任何缓存区缓存，可以用缓存内容回应任何用户。 Private：指示对于单个用户的整个或部分响应消息，不能被共享缓存处理，只能用缓存内容回应先前请求该内容的那个用户。 Connection: Keep-AliveConnection表示是否需要持久连接。如果Servlet看到这里的值为“Keep-Alive”，或者看到请求使用的是HTTP 1.1（HTTP 1.1默认进行持久连接），它就可以利用持久连接的优点，当页面包含多个元素时（例如Applet，图片），显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入ByteArrayOutputStream，然后在正式写出内容之前计算它的大小 Close：告诉WEB服务器或者代理服务器，在完成本次请求的响应后，断开连接，不要等待本次连接的后续请求了 Keepalive：告诉WEB服务器或者代理服务器，在完成本次请求的响应后，保持连接，等待本次连接的后续请求 Keep-Alive：如果浏览器请求保持连接，则该头部表明希望 WEB 服务器保持连接多长时间（秒），如Keep-Alive：300 Content-Type: text/html;charset=utf-8WEB 服务器告诉浏览器自己响应的对象的类型 如：image/jpeg、video/mpeg4 Date: Fri, 10 Mar 2017 09:20:09 GMT原始服务器消息发出的时间 Expires: Thu, 01 Jan 1970 00:00:00 GMT响应过期的日期和时间 Keep-Alive: timeout=5, max=97使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接 Pragma: No-cache控制页面缓存 Set-Cookie: TSf75e5b=6aa6aedfeb03cb76b58c26fbf; Path=/设置和页面关联的Cookie Transfer-Encoding: chunked用于确保安全和信息的恰当传输 X-Frame-Options: Options:SAMEORIGIN用于指示是否应该允许浏览器呈现在一个页面 &lt;FRAME&gt; 或 &lt;IFRAME&gt;中. 以确保网站内容是不是嵌入到其它网站 Web","categories":[],"tags":[{"name":"Web","slug":"Web","permalink":"http://yoursite.com/tags/Web/"}],"keywords":[]},{"title":"MacOS Maven的安装与配置","slug":"030 MacOS Maven的安装与配置","date":"2017-02-28T00:00:00.000Z","updated":"2017-02-28T10:01:58.000Z","comments":true,"path":"2017/02/28/030 MacOS Maven的安装与配置/","link":"","permalink":"http://yoursite.com/2017/02/28/030 MacOS Maven的安装与配置/","excerpt":"","text":"下载https://maven.apache.org/download.cgi 保存下载好的文件保存在：/Users/lizm/Documents/apache-maven-3.3.3/ (不管在哪里,你开心就好) 设置打开 终端 , vim ~/.bash_profile export M2_HOME=/Users/lizm/Documents/apache-maven-3.3.3 export PATH=$PATH:$M2_HOME/bin 保存 source ~/.bash_profilemvn -v Maven MacOS","categories":[],"tags":[{"name":"Maven","slug":"Maven","permalink":"http://yoursite.com/tags/Maven/"},{"name":"MacOS","slug":"MacOS","permalink":"http://yoursite.com/tags/MacOS/"}],"keywords":[]},{"title":"无论以后跟谁结婚-请记住这些话","slug":"029 无论以后跟谁结婚-请记住这些话","date":"2017-02-05T00:00:00.000Z","updated":"2017-02-05T15:45:21.000Z","comments":true,"path":"2017/02/05/029 无论以后跟谁结婚-请记住这些话/","link":"","permalink":"http://yoursite.com/2017/02/05/029 无论以后跟谁结婚-请记住这些话/","excerpt":"","text":"无论以后跟谁结婚，请记住这些话01结婚是三个家庭的联谊，如果父母反对，沟通无果，这婚就不要结了，这就是以后各种解不开的死疙瘩的源头，别跟家里闹翻了，这世上，能发自肺腑疼你的，父母一定是排第一的。 02父母在，不远嫁，如果仍要嫁，有时间还是常回家看看吧，我们结婚就是跟父母的一场渐行渐远的告别，你说不必送了，而他们余生最开心的事儿就是盼你回家吃顿饭。 03恋爱的时候可以作，但是请注意自己的颜值，能力，但愿你的脾气对的上你的实力。没有谁离不开谁，生活并非只是一种，你说鱼儿离不开水，其实鱼儿离开水，碳烤还是清蒸，都是命运的归途，说不准哪一种更幸福，仔细阅读这段话：你以为你以为的幸福就是以为的幸福吗？ 04哪怕结婚，也不要轻易放弃异性朋友，你可以把你的异性朋友介绍给你的爱人。韩剧最不缺的就是误会，人生也是，不要瞎猜。你问，男女之间有纯洁的友谊吗？这个我不清楚，但是我觉得我跟任何人交往，都应该有最起码的底线，感情的底线就是能区分男朋友与男性朋友的区别，这是对自己人生最起码的尊重。 05管好自己的财产，经济基础是婚姻幸福的入门标准，婚姻不是劫富济贫，爱可以势均力敌，但是婚姻法只保护财产不保护爱，这句话读三遍：久病床前无孝子，久贫家中无贤妻。你看，这社会很现实，有钱走遍天下，无钱寸步难行。 06不要轻易辞掉工作，备孕，做一个全职主妇。不要去过自己没有把握的人生，你看，信用卡确实好用，刷爆的时候心情很嗨，拿明天的钱来买今天的开心，但是，你要清楚后天的每一份得到背后都有代价。 07不要攀比婚姻，没有对比就没有伤害，一年有四季，有360多天，阴晴风雨都有，婚姻很长，疲惫、烦躁、失望都会有，看清真相后，请依然热爱生活。 08不要放弃浪漫，记住每一个属于你们的特殊纪念日，哪怕是一句简单的问候，生日快乐，结婚纪念日快乐，都倍感欣慰。女生是那种一包糖炒栗子就开心好几天，回忆起来都会面带微笑的人，男生是那种你亲他一下，他就敢跟生活的刁难拼命的人。互相奖励是爱情升温最快的方法之一。 09男人太年轻会输给那些成熟的老男人，女人年纪一大就是败给那些花枝招展的小姑娘。不要贪，不要妄图去证明什么，人有的时候就要学会认输。米饭是什么盖头，面是浇什么汤，各有各的主。那么婚姻，靠什么维系？信任和克制。一般你越想抓住的东西，越容易失去。 10所有家庭矛盾，如果没有好的解决方案，宁愿闭嘴不说话，也不要张嘴就是抱怨。这世上没有无坚不摧的婚姻，抱怨是前行的飞机大炮开路，小三紧随其后的小米加步枪突围，你问，人为什么出轨？家里的饭不好吃，还要刷锅洗碗，当然就会下馆子，下馆子和外遇一样，都是拍拍屁沟走人。回头看，他离开你，只不过是你当时抱怨推了他一把而已。 11不要指望一个男人婚后会变的对你多么好，如果婚前做不到，婚后基本无望。老话说的挺好：宁愿找个爸，千万别当妈。婚姻讲的确实是磨合，但前提是合的来的人磨，三观不同，性格不合，怎么磨？ 12结婚前去他家吃顿饭，他爸对他妈的态度，很大程度上会映射你将来的生活，原生家庭对一个人的婚恋观会影响很大，幸福的气场都雷同。这只是一个参考而已。总有人会拿“他爱不爱你就看这几点”的个例爱情模式来指导你，就像你毕业的时候“学校的就业指导办指导你就业”一样的不靠谱。因为我们无法用几点来概括一个人的全部爱。 13你觉得一个人大清早穿越几条街给你买豆浆油条，很感动。其实，你是，没有更好的选择。如果有，你一定会选择蔓越莓饼干，奶香土司配煎蛋，皮蛋瘦肉粥。感动和心动是两码事儿，你说，他对我那么好，我要嫁给他？可是，你忘记了先问自己：我到底爱不爱他？让一个人感动、惊喜是可以用事件来做的，让一个人爱上你，是需要时间来做的。 14沟通可以解决婚姻里的90%以上的问题，那么剩下的10%就是各自的秘密，打死都不能说的，所以，收起好奇心，这很重要。有些烦恼的事儿，他愿意跟你说，你就倾听，他不愿意说，自然有他的道理。人被逼急了，撒起慌来，连自己都害怕。尊重比打着“我为你好”的旗号获取对方隐私，更可爱。 15每个人都有不可逾越的底线，没有人的忍耐都是有限度的，每个人都是有脾气的，所以，不要在公开场合互相拆台，恩爱可以在外面秀，但是有情绪回家吵。 16吵架很正常，但是，无休止的因为同一个问题吵架，很悲催。两个人一起解决麻烦比制造麻烦更有趣。婚姻就是一场求同存异，共同成长的旅行，快的要等等慢的，慢的要努力，如果你不努力，别人想拉你一把，都够不到你的手，达尔文的进化论定论是优胜劣汰，婚姻也如此，没有那一场婚姻是一劳永逸的。 17不要把婚姻当成你的全部，你还有工作、朋友、梦想、一大堆未完成的计划，结婚只是两个人的开始，要有一个共同的奋斗目标。 18婚后遇到更合适更情投意合的人生挚爱，怎么办？人啊，如果打算去做一件坏事，他能想出一百种理所当然的理由，还能自我暗示，我做到对，你必须成全我。出轨就是出轨，背叛就是背叛，别拿真爱说事儿，真爱说：这个黑锅我不背！我不背！为什么婚后会遇到更合适的今生挚爱，这种幻觉？你跟一个人生活是24小时直播，你跟另一个是剪辑的美好的综艺秀，你说哪一个好看？所以，婚后，你说，遇见今生挚爱一点也不稀奇，你只是享受了那一个人的美好而已，不信，结个婚试试。就像你旅行的时候，去过一些城市，觉得那地方真美，你特别向往，你搬到那座城市住一段时间试试。 19其实好多人都不在意婚礼，但是直到他们结婚后，突然有一天参加了朋友的婚礼。所以，女生如果不想后悔，男生如果不想被埋怨，婚礼一定要有的，跟豪华度无关，那是属于两个人有趣的记忆。婚礼上那句“我愿意”很普通，但是一定要说给你听。 20不要因为被时间、父母催、朋友圈子都结婚了等焦虑逼迫而慌忙进入一场婚姻，你年纪不小了，可以为自己做主了，越是一个人的时候，越要学会善待自己，越着急越容易犯错。饥不择食顶多闹个肚子，但是饥不择人，就不知道后果了。 无论跟谁结婚，都请记住以上这些忠告，基本上都是废话。 你看，烟盒上都写着忠告“吸烟有害健康”，那又怎么样？每一次有媒体人过劳离世，就会刮起一阵“劝你早睡”的风，那又怎样？你劝听吗？你不听啊，因为你总觉得这一切离你很远很远。 没事儿，可劲儿作吧，会懂的，花点代价就行。 跌倒了就知道疼，分手了就知道疼，饿了就知道什么好吃。人啊，最大的悲哀就是活的侥幸，总以为意外不会发生在自己身上，就算发生了，首先埋怨上天不公，没事儿，时间会告诉你什么是对的。但是，请记住，时间不会给你任何惋惜的机会。 有句话不对，不听老人言，吃亏在眼前。如果都是眼前，我们一定会学的很乖，可惜，亏都是后来的，连本带息一次偿还的，该尝的苦头，一点都不会少。这世上有个词挺难过，叫：原本可以。 对于有婚姻需求的人来说，人生最重要的决定是跟谁结婚，选择一个人，不仅仅是戒指互换约一大群人吃一顿饭，而是你选择了余生活下来的方式。 无数的忠告都没用，你还是要一步一个跟头的修行，但愿，你每一步都走的踏实，有力。 Lim 生活","categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"http://yoursite.com/tags/生活/"}],"keywords":[]},{"title":"Mac 电脑系统自带壁纸和屏保壁纸位置","slug":"028 Mac 电脑系统自带壁纸和屏保壁纸位置","date":"2016-12-23T00:00:00.000Z","updated":"2016-12-23T13:07:13.000Z","comments":true,"path":"2016/12/23/028 Mac 电脑系统自带壁纸和屏保壁纸位置/","link":"","permalink":"http://yoursite.com/2016/12/23/028 Mac 电脑系统自带壁纸和屏保壁纸位置/","excerpt":"","text":"系统自带壁纸cd /Library/Desktop\\ Pictures/ 系统自带屏保壁纸cd /Library/Screen\\ Savers/Default\\ Collections/ Mac","categories":[],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://yoursite.com/tags/Mac/"}],"keywords":[]},{"title":"MacOS 10.12 安全性与隐私没有允许任何来源 解决办法","slug":"027 MacOS 10.12 安全性与隐私没有允许任何来源 解决办法","date":"2016-12-20T00:00:00.000Z","updated":"2016-12-20T08:01:39.000Z","comments":true,"path":"2016/12/20/027 MacOS 10.12 安全性与隐私没有允许任何来源 解决办法/","link":"","permalink":"http://yoursite.com/2016/12/20/027 MacOS 10.12 安全性与隐私没有允许任何来源 解决办法/","excerpt":"","text":"苹果官方关于 《OS X：关于 Gatekeeper》 说明https://support.apple.com/zh-cn/HT202491 原因更新到MacOS 10.12 后发现系统偏好设置 -&gt; 安全性与隐私 默认已经去除了允许安装任何来源App的选项,官方给出的解决办法是按住键盘上的Control + 点击要打开的App 是因为Gatekeeper,10.12默认是开的,只需要关闭Gatekeeper即可看到选项 终端输入sudo spctl --master-disable 重新打开设置就能看到 如果重新选择的其他选项就是重新开启了Gatekeeper,那就必须重新执行一次命令关闭Gatekeeper Mac","categories":[],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://yoursite.com/tags/Mac/"}],"keywords":[]},{"title":"IntelliJ IDEA 创建Maven项目慢问题","slug":"026 IntelliJ IDEA 创建Maven项目慢问题","date":"2016-12-19T00:00:00.000Z","updated":"2016-12-20T07:52:41.000Z","comments":true,"path":"2016/12/19/026 IntelliJ IDEA 创建Maven项目慢问题/","link":"","permalink":"http://yoursite.com/2016/12/19/026 IntelliJ IDEA 创建Maven项目慢问题/","excerpt":"","text":"原因Maven 获取 archetype-catalog.xml 导致 下载http://repo1.maven.org/maven2/archetype-catalog.xml (文件) 保存下载好的文件保存在：/Users/lim/.m2/archetype-catalog.xml 设置打开 IntelliJ IDEA , 但不要打开项目, 点击：configure &gt; preferences &gt; Build &gt; Build Tools &gt; Maven &gt; Runner VM Options: -DarchetypeCatalog=local IntelliJ IDEA Maven","categories":[],"tags":[{"name":"IntelliJ IDEA","slug":"IntelliJ-IDEA","permalink":"http://yoursite.com/tags/IntelliJ-IDEA/"},{"name":"Maven","slug":"Maven","permalink":"http://yoursite.com/tags/Maven/"}],"keywords":[]},{"title":"BigDecimal Java高精度运算","slug":"025 BigDecimal Java高精度运算","date":"2016-12-05T00:00:00.000Z","updated":"2016-12-07T06:21:03.000Z","comments":true,"path":"2016/12/05/025 BigDecimal Java高精度运算/","link":"","permalink":"http://yoursite.com/2016/12/05/025 BigDecimal Java高精度运算/","excerpt":"","text":"不同舍入模式下的舍入操作汇总 NUMBER UP DOWN CEILING FLOOR HALF_UP HALF_DOWN HALF_EVEN 5.5 6 5 6 5 6 5 6 2.5 3 2 3 2 3 2 2 1.6 2 1 2 1 2 2 2 1.1 2 1 2 1 1 1 1 1.0 1 1 1 1 1 1 1 -1.0 -1 -1 -1 -1 -1 -1 -1 -1.1 -2 -1 -1 -2 -1 -1 -1 -1.6 -2 -1 -1 -2 -2 -2 -2 -2.5 -3 -2 -2 -3 -3 -2 -2 -5.5 -6 -5 -5 -6 -6 -5 -6 UP 远离零方向舍入的舍入模式。始终对非零舍弃部分前面的数字加 1。注意，此舍入模式始终不会减少计算值的绝对值 DOWN 向零方向舍入的舍入模式。从不对舍弃部分前面的数字加 1（即截尾）。注意，此舍入模式始终不会增加计算值的绝对值 CEILING 向正无限大方向舍入的舍入模式。如果结果为正，则舍入行为类似于 RoundingMode.UP；如果结果为负，则舍入行为类似于 RoundingMode.DOWN。注意，此舍入模式始终不会减少计算值 FLOOR 向负无限大方向舍入的舍入模式。如果结果为正，则舍入行为类似于 RoundingMode.DOWN；如果结果为负，则舍入行为类似于 RoundingMode.UP。注意，此舍入模式始终不会增加计算值 HALF_UP 向最接近数字方向舍入的舍入模式，如果与两个相邻数字的距离相等，则向上舍入。如果被舍弃部分 &gt;= 0.5，则舍入行为同 RoundingMode.UP；否则舍入行为同 RoundingMode.DOWN。注意，此舍入模式就是通常学校里讲的四舍五入 HALF_DOWN 向最接近数字方向舍入的舍入模式，如果与两个相邻数字的距离相等，则向下舍入。如果被舍弃部分 &gt; 0.5，则舍入行为同 RoundingMode.UP；否则舍入行为同 RoundingMode.DOWN HALF_EVEN 向最接近数字方向舍入的舍入模式，如果与两个相邻数字的距离相等，则向相邻的偶数舍入。如果舍弃部分左边的数字为奇数，则舍入行为同 RoundingMode.HALF_UP；如果为偶数，则舍入行为同 RoundingMode.HALF_DOWN。注意，在重复进行一系列计算时，此舍入模式可以在统计上将累加错误减到最小。此舍入模式也称为“银行家舍入法”，主要在美国使用。此舍入模式类似于 Java 中对 float 和 double 算法使用的舍入策略 UNNECESSARY 用于断言请求的操作具有精确结果的舍入模式，因此不需要舍入。如果对生成精确结果的操作指定此舍入模式，则抛出 ArithmeticException Java BigDecimal","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"BigDecimal","slug":"BigDecimal","permalink":"http://yoursite.com/tags/BigDecimal/"}],"keywords":[]},{"title":"MySQL 基本操作","slug":"024 MySQL 基本操作","date":"2016-11-24T00:00:00.000Z","updated":"2016-12-05T12:36:19.000Z","comments":true,"path":"2016/11/24/024 MySQL 基本操作/","link":"","permalink":"http://yoursite.com/2016/11/24/024 MySQL 基本操作/","excerpt":"","text":"Mysql 设置 unique key 及 联合主键// 删除约束 alter table `表` drop index `联合主键的名称`; // 创建 唯一约束主键 alter table `表` add unique key (`字段`) // 创建 联合主键 联合主键不可重复 alter table `表` add unique key `联合主键的名称` (`字段1`,`字段2`); MySQL","categories":[],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://yoursite.com/tags/MySQL/"}],"keywords":[]},{"title":"Linux MySQL 自动备份","slug":"023 Linux MySQL 自动备份","date":"2016-10-26T00:00:00.000Z","updated":"2016-12-23T16:01:58.000Z","comments":true,"path":"2016/10/26/023 Linux MySQL 自动备份/","link":"","permalink":"http://yoursite.com/2016/10/26/023 Linux MySQL 自动备份/","excerpt":"","text":"mysqldump数据库结构+数据的 .sql 文件 mysqldump -u 用户名 -p密码 数据库 &gt; /tmp/mysql_data/文件名`date +%Y-%m-%d-%H-%M-%S`.sql mysqldump -u lim -ppassword shujuku &gt; /tmp/mysql_data/shujuku\\`date +%Y-%m-%d-%H-%M-%S\\`.sql 数据库结构+数据的 .sql.gz 文件 mysqldump -u lim -ppassword shujuku | gzip &gt; /tmp/mysql_data/shujuku`date +%Y-%m-%d-%H-%M-%S`.sql.gz 备份scp /usr/local/backup_mysql/shujuku.sql root@10.10.10.10:/usr/local/online-mysql-database/shujuku.sql 恢复首页进入 mysql 的 bin 目录 创建数据库 mysqladmin create shujuku 恢复数据 mysql -u lim -ppassword shujuku &lt; shujuku.sql Linux SSH","categories":[],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://yoursite.com/tags/MySQL/"},{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}],"keywords":[]},{"title":"SSH 免密码登录远程服务器","slug":"022 SSH免密码登录远程服务器","date":"2016-10-25T00:00:00.000Z","updated":"2016-12-13T17:21:04.000Z","comments":true,"path":"2016/10/25/022 SSH免密码登录远程服务器/","link":"","permalink":"http://yoursite.com/2016/10/25/022 SSH免密码登录远程服务器/","excerpt":"","text":"准备 本机生成 rsa 秘钥 ssh-keygen -t rsa 上传公钥scp /Users/Lim/.ssh/id_rsa.pub root@目标服务器IP:/root/.ssh/tmp/ 如果目标服务器上面没有 .ssh 目录 使用：ssh-keygen -t rsa 生成 修改进入：cd /root/.ssh/tmp修改名字：mv id_rsa.pub authorized_keys复制到 .ssh 目录：cp /root/.ssh/tmp/authorized_keys /root/.ssh/修改文件权限：chmod 600 /root/.ssh/authorized_key (如果不修改，可能会引起 authorized_key 文件被修改,导致文件失效) 配置多用户如果 authorized_key 已经存在, 进行如下操作在第二个用户机上面生成 rea 秘钥复制到服务器上：scp /Users/Lim/.ssh/id_rsa.pub root@目标服务器IP:/root/.ssh/tmp/执行：cat /root/.ssh/tmp/id_rsa.pub &gt;&gt; /root/.ssh/authorized_key （附加秘钥） Done直接登录服务器：ssh root@目标服务器IP Linux SSH","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"SSH","slug":"SSH","permalink":"http://yoursite.com/tags/SSH/"}],"keywords":[]},{"title":"SpringMVC 操作 Redis","slug":"021 SpringMVC 操作 Redis","date":"2016-10-18T00:00:00.000Z","updated":"2016-10-17T17:32:52.000Z","comments":true,"path":"2016/10/18/021 SpringMVC 操作 Redis/","link":"","permalink":"http://yoursite.com/2016/10/18/021 SpringMVC 操作 Redis/","excerpt":"","text":"环境Java SpringMVC Maven 依赖包 12345&lt;dependency&gt; &lt;groupId&gt;org.springframework.data&lt;/groupId&gt; &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt; &lt;version&gt;1.7.1.RELEASE&lt;/version&gt;&lt;/dependency&gt; spring-data-redis 使用 spring-data-redis ，即省去了自己实现注入的过程，通过它提供的一些配置，即可实现连接池配置、RedisTemplate 配置、JedisConnectionFactory 配置；通过 JedisConnectionFactory 可配置连接池参数、redis 服务器、端口、密码、超时时间、database索引等；RedisTemplate 即注入的bean ，可以使用 RedisTemplate 自动注入的实体进行 redis 的一系列操作 配置 redis.properties 123456789redis.host=127.0.0.1redis.port=6379redis.pass=redis.maxIdle=300redis.maxActive=300redis.maxWait=1000redis.timeout=3000redis.testOnBorrow=trueredis.database=20 spring-redis.xml 12345678910111213141516171819202122232425262728293031323334&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt; &lt;bean id=\"poolConfig\" class=\"redis.clients.jedis.JedisPoolConfig\"&gt; &lt;property name=\"maxIdle\" value=\"$&#123;redis.maxIdle&#125;\"/&gt; &lt;property name=\"maxTotal\" value=\"$&#123;redis.maxActive&#125;\"/&gt; &lt;property name=\"maxWaitMillis\" value=\"$&#123;redis.maxWait&#125;\"/&gt; &lt;property name=\"testOnBorrow\" value=\"$&#123;redis.testOnBorrow&#125;\"/&gt; &lt;/bean&gt; &lt;!-- Redis 服务器中心 --&gt; &lt;bean id=\"connectionFactory\" class=\"org.springframework.data.redis.connection.jedis.JedisConnectionFactory\"&gt; &lt;property name=\"poolConfig\" ref=\"poolConfig\"/&gt; &lt;property name=\"port\" value=\"$&#123;redis.port&#125;\"/&gt; &lt;property name=\"hostName\" value=\"$&#123;redis.host&#125;\"/&gt; &lt;property name=\"timeout\" value=\"$&#123;redis.timeout&#125;\"/&gt; &lt;!--&lt;property name=\"database\" value=\"1\"/&gt;--&gt; &lt;/bean&gt; &lt;bean id=\"stringRedisSerializer\" class=\"org.springframework.data.redis.serializer.StringRedisSerializer\"/&gt; &lt;bean id=\"commonRedisTemplate\" class=\"org.springframework.data.redis.core.RedisTemplate\"&gt; &lt;property name=\"connectionFactory\" ref=\"connectionFactory\"/&gt; &lt;property name=\"keySerializer\" ref=\"stringRedisSerializer\"/&gt; &lt;property name=\"hashKeySerializer\" ref=\"stringRedisSerializer\"/&gt; &lt;property name=\"valueSerializer\" ref=\"stringRedisSerializer\"/&gt; &lt;property name=\"hashValueSerializer\" ref=\"stringRedisSerializer\"/&gt; &lt;/bean&gt;&lt;/beans&gt; applicationContext.xml 123456789101112131415161718192021222324252627282930313233&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"&gt; &lt;!--引入配置文件--&gt; &lt;bean id=\"configProperties\" class=\"org.springframework.beans.factory.config.PropertiesFactoryBean\"&gt; &lt;property name=\"locations\"&gt; &lt;list&gt; &lt;!-- 引入jdbc配置文件 --&gt; &lt;value&gt;classpath:mybatis/jdbc.properties&lt;/value&gt; &lt;!--引入redis配置文件--&gt; &lt;value&gt;classpath:redis/redis.properties&lt;/value&gt; &lt;!--引入一些常量配置--&gt; &lt;value&gt;classpath:config.properties&lt;/value&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- 自动扫描 --&gt; &lt;context:component-scan base-package=\"com.l-zm.*\"/&gt; &lt;bean id=\"propertyConfigurer\" class=\"org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer\"&gt; &lt;property name=\"properties\" ref=\"configProperties\"/&gt; &lt;/bean&gt; &lt;import resource=\"classpath:mybatis/spring-mybatis.xml\"/&gt; &lt;import resource=\"classpath:redis/spring-redis.xml\"/&gt; &lt;import resource=\"classpath:mvc-dispatcher-servlet.xml\"/&gt;&lt;/beans&gt; 定义接口12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455/** * User: Lim * Date: 2016-10-18 * Time: 18:39 */public interface IRedisCache &#123; /** * 设置 一个 缓存 * * @param key * @param value */ void set(String key, String value) throws Exception; /** * 设置 制定缓存时间的 缓存 * * @param key * @param value * @param liveTime */ void set(String key, String value, int liveTime) throws Exception; /** * 获取该key的缓存 * * @param key * @return */ String get(String key); /** * 删除一个 字符串key * * @param key */ void del(String key); /** * 根据匹配符查找缓存 * * @param pattern * @return */ Set&lt;String&gt; keys(String pattern); /** * 判断是否存在该key的缓存数据 * * @param key * @return */ boolean exists(String key);&#125; 实现接口123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172package com.l-zm.common.service.impl;import com.huohao.common.service.IRedisCache;import org.springframework.beans.factory.annotation.Value;import org.springframework.dao.DataAccessException;import org.springframework.data.redis.connection.RedisConnection;import org.springframework.data.redis.core.RedisCallback;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.stereotype.Service;import org.springframework.util.StringUtils;import javax.annotation.Resource;import java.io.UnsupportedEncodingException;import java.util.HashSet;import java.util.Set;/** * User: Lim * Date: 2016-10-18 * Time: 18:39 */@Servicepublic class RedisCache implements IRedisCache &#123; @Resource(name=\"commonRedisTemplate\") private RedisTemplate&lt;String, String&gt; commonRedisTemplate; /** * 添加key value * * @param key * @param value */ @Override public void set(String key, String value) throws Exception &#123; if (StringUtils.isEmpty(key)) &#123; return; &#125; if (StringUtils.isEmpty(value)) &#123; return; &#125; final String keyf = key; final String valuef = value; commonRedisTemplate.execute(new RedisCallback&lt;Object&gt;() &#123; public Long doInRedis(RedisConnection connection) throws DataAccessException &#123; byte[] keyb = keyf.getBytes(); byte[] valueb = valuef.getBytes(); connection.set(keyb, valueb); return null; &#125; &#125;); &#125; /** * 添加key value 并且设置存活时间 * * @param key * @param value * @param liveTime 分钟 */ @Override public void set(String key, String value, int liveTime) throws Exception &#123; if (StringUtils.isEmpty(key)) &#123; return; &#125; if (StringUtils.isEmpty(value)) &#123; return; &#125; if (StringUtils.isEmpty(liveTime)) &#123; return; &#125; final Long liveTimeLong = Long.parseLong(liveTime+\"\"); final String keyf = key; final String valuef = value; commonRedisTemplate.execute(new RedisCallback&lt;Object&gt;() &#123; public Long doInRedis(RedisConnection connection) throws DataAccessException &#123; byte[] keyb = keyf.getBytes(); byte[] valueb = valuef.getBytes(); connection.setEx(keyb, liveTimeLong, valueb); return 1L; &#125; &#125;); &#125; /** * 获取redis value (String) * * @param key * @return */ @Override public String get(String key) &#123; final String keyF = key; String resultStr; resultStr = commonRedisTemplate.execute(new RedisCallback&lt;String&gt;() &#123; public String doInRedis(RedisConnection redisConnection) throws DataAccessException &#123; byte[] key = keyF.getBytes(); byte[] value = redisConnection.get(key); if (value == null) &#123; return null; &#125; try &#123; return new String(value, \"UTF-8\"); &#125; catch (UnsupportedEncodingException e) &#123; return null; &#125; &#125; &#125;); return resultStr; &#125; /** * 通过key删除 * * @param key */ @Override public void del(String key) &#123; if (StringUtils.isEmpty(key)) &#123; return; &#125; final String keyf = key; commonRedisTemplate.execute(new RedisCallback&lt;Void&gt;() &#123; public Void doInRedis(RedisConnection connection) throws DataAccessException &#123; byte[] keyb = keyf.getBytes(); connection.del(keyb); return null; &#125; &#125;); &#125; /** * 通过正则匹配keys * * @param pattern * @return */ public Set&lt;String&gt; keys(String pattern) &#123; final String patternF = pattern; Set&lt;byte[]&gt; byteSet; byteSet = commonRedisTemplate.execute(new RedisCallback&lt;Set&lt;byte[]&gt;&gt;() &#123; public Set&lt;byte[]&gt; doInRedis(RedisConnection redisConnection) throws DataAccessException &#123; byte[] patternB = patternF.getBytes(); Set&lt;byte[]&gt; valueSet = redisConnection.keys(patternB); if (valueSet == null) &#123; return null; &#125; return valueSet; &#125; &#125;); Set&lt;String&gt; returnSet = new HashSet&lt;String&gt;(); String stringValue = \"\"; for (byte[] byteValue : byteSet)&#123; try &#123; stringValue = new String(byteValue, \"UTF-8\"); &#125; catch (UnsupportedEncodingException e) &#123; e.printStackTrace(); &#125; returnSet.add(stringValue); &#125; return returnSet; &#125; /** * 检查key是否已经存在 * * @param key * @return */ public boolean exists(String key) &#123; final String keyF = key; Boolean object; object = commonRedisTemplate.execute(new RedisCallback&lt;Boolean&gt;() &#123; public Boolean doInRedis(RedisConnection redisConnection) throws DataAccessException &#123; byte[] keyB = keyF.getBytes(); return redisConnection.exists(keyB); &#125; &#125;); return object; &#125;&#125; 使用123456789101112131415@Resourceprivate IRedisCache redisCache;@ResponseBody@RequestMapping(\"redis\")public String redis(String name) &#123; try &#123; redisCache.set(\"Lim:\" + name,\"lizhimin01\", FIVE_MINUTE); Set&lt;String&gt; lim = redisCache.keys(\"Lim:*\"); System.out.println(lim.size()); &#125; catch (Exception ex) &#123; ex.printStackTrace(); &#125; return \"ok\";&#125; SpringMVC Redis","categories":[],"tags":[{"name":"Redis","slug":"Redis","permalink":"http://yoursite.com/tags/Redis/"},{"name":"SpringMVC","slug":"SpringMVC","permalink":"http://yoursite.com/tags/SpringMVC/"}],"keywords":[]},{"title":"Redis 安装及 Redis-sentinel (哨兵模式)集群方案配置","slug":"020 Redis安装及Redis-sentinel (哨兵模式)集群方案配置","date":"2016-10-14T00:00:00.000Z","updated":"2016-12-23T06:29:59.000Z","comments":true,"path":"2016/10/14/020 Redis安装及Redis-sentinel (哨兵模式)集群方案配置/","link":"","permalink":"http://yoursite.com/2016/10/14/020 Redis安装及Redis-sentinel (哨兵模式)集群方案配置/","excerpt":"","text":"下载http://redis.io 解压 安装12345tar xvzf redis-3.2.4.tar.gzmv redis-3.2.4 /usr/localcd /usr/local/redis-3.2.4/makemake test 问题1: make[2]: cc: Command not found异常原因：没有安装 gcc解决方案：yum install gcc-c++问题2: You need tcl 8.5 or newer in order to run the Redis test异常原因：没有安装 tcl解决方案：yum install -y tcl解决方案 (Ubuntu)：apt-get install tcl8.5 tcl8.5-dev tk8.5 tk8.5-dev问题3: zmalloc.h:51:31: error: jemalloc/jemalloc.h: No such file or directory异常原因：一些编译依赖或原来编译遗留出现的问题解决方案：make distclean 清理一下 然后再 make问题4: E: Unable to fetch some archives, maybe run apt-get update or try with –fix-missing?解决方案：apt-get update 配置在 make 成功以后 会在 src 目录下多出一些可执行文件：redis-server redis-cli redis-sentinel 等等 设置命令: cp redis-server /usr/local/bin/ cp redis-cli /usr/local/bin/ cp redis-sentinel /usr/local/bin/ Redis-sentinel (哨兵模式) 集群方案配置说明: 两个 Redis-sentinel 服务, 一个 Redis 主服务, 三个从服务 (通过不同的端口进行配置, 项目中应该是6台服务器) cd /usr/local 创建 6 个目录 mkdir redis-7501 redis-7502 redis-7503 redis-7504 redis-7505 redis-7506 cp /usr/local/redis-3.2.4/redis.conf /usr/local/redis-7501/redis-7501.conf cp /usr/local/redis-3.2.4/redis.conf /usr/local/redis-7502/redis-7502.conf cp /usr/local/redis-3.2.4/redis.conf /usr/local/redis-7503/redis-7503.conf cp /usr/local/redis-3.2.4/redis.conf /usr/local/redis-7504/redis-7504.conf cp /usr/local/redis-3.2.4/sentinel.conf /usr/local/redis-7505/sentinel-7505.conf cp /usr/local/redis-3.2.4/sentinel.conf /usr/local/redis-7506/sentinel-7506.conf 每个 Redis 目录下 建立 run log 文件夹 记录 Redis 日志和文件 此处以修改 redis-7501.conf 为例: vim redis-7501.conf 要修改的: bind 127.0.0.1 port 7501 daemonize yes pidfile /usr/local/redis-7501/run/redis_7501.pid logfile &quot;/usr/local/redis-7501/log/redis-7501.log&quot; 此处以修改 sentinel-7505.conf 为例: vim sentinel-7505.conf 要修改的: port 7505 sentinel monitor mymaster 127.0.0.1 7501 2 启动四个redis实例，其中端口为7501的redis设为master，其他三个设为slave 所以 mymaster 后跟的是 master 的 ip 和端口,最后一个’2’代表我要启动只要有2个sentinel认为master下线， 就认为该master客观下线，启动failover并选举产生新的master。通常最后一个参数不能多于启动的sentinel实例数 启动 Redis 和 sentinel分别启动4个 Redis 实例 redis-server /usr/local/redis-7501/redis-7501.conf redis-server /usr/local/redis-7502/redis-7502.conf redis-server /usr/local/redis-7503/redis-7503.conf redis-server /usr/local/redis-7504/redis-7504.conf 然后分别登陆 7502 7503 7504 三个实例，动态改变主从关系，成为 7501 的 slave redis-cli -h 127.0.0.1 -p 7502 127.0.0.1:7502&gt; SLAVEOF 127.0.0.1 7501 redis-cli -h 127.0.0.1 -p 7503 127.0.0.1:7503&gt; SLAVEOF 127.0.0.1 7501 redis-cli -h 127.0.0.1 -p 7504 127.0.0.1:7504&gt; SLAVEOF 127.0.0.1 7501 以后台启动模式启动两个 sentinel（哨兵） redis-sentinel /usr/local/redis-7505/sentinel-7505.conf &amp;redis-sentinel /usr/local/redis-7506/sentinel-7506.conf &amp; Done Redis 配置文件说明bind 127.0.0.1 # 默认绑定本机所有ip地址 为了安全 可以只监听内网ipprotected-mode yes # 保护模式[无密码模式设置为no]port 6379 # 默认端口tcp-backlog 511 # listen队列的长度timeout 0 # 客户端空闲多少s(秒)后踢掉 0禁止tcp-keepalive 300 # 检测挂掉的连接 单位s 0禁止################################# GENERAL #####################################daemonize no # 作为守护进程运行supervised no # 设成开机启动后 系统监控pidfile /var/run/redis_6379.pid # pid 位置loglevel notice # 设置服务端的日志级别，有下列几种选择 debug：记录详细信息，用于开发或调试 verbose：提供很多有用的信息， 但是又不像debug那么详尽，默认就是这一选项 notice：适度提醒，多用于产品环境 warning：仅显示重要的警告信息logfile &quot;&quot; # 日志目录databases 16 # 指定数据库的数量################################ SNAPSHOTTING ################################save 900 1 # 每900秒(15分钟)至少一次键值变更时被触发save 300 10 # 每300秒(5分钟)至少10次键值变更时被触发save 60 10000 # 每60秒至少10000次键值变更时被触发stop-writes-on-bgsave-error yes # 后台存储错误停止写rdbcompression yes # 存储至本地数据库时(持久化到rdb文件)是否压缩数据 默认为 yesrdbchecksum yes # 读取和写入的时候是否支持CRC64校验 默认是开启的dbfilename dump.rdb # 镜像文件的名字dir ./ # 当前工作目录 配置文件和镜像文件等都在此目录下################################# REPLICATION #################################slave-serve-stale-data yes # 当slave服务器和master服务器失去连接后， 或者当数据正在复制传输的时候，如果此参数值设置“yes” slave服务器可以继续接受客户端的请求， 否则，会返回给请求的客户端如下信息 “SYNC with master in progress”slave-read-only yes # 是否允许slave服务器节点只提供读服务repl-diskless-sync no # disk较慢，并且网络较快的时候， 可以用diskless。（默认用disk-based）repl-diskless-sync-delay 5 # 备份等待延迟时间 secondsrepl-disable-tcp-nodelay no # 指定向slave同步数据时，是否禁用socket的NO_DELAY选 项。 若配置为“yes”，则禁用NO_DELAY，则TCP协议栈会合并小包统一发送， 这样可以减少主从节点间的包数量并节省带宽，但会增加数据同步到 slave的时间。若配置为“no”，表明启用NO_DELAY，则TCP协议栈不 会延迟小包的发送时机，这样数据同步的延时会减少，但需要更大的带宽。 通常情况下，应该配置为no以降低同步延时， 但在主从节点间网络负载已经很高的情况下，可以配置为yesslave-priority 100 # 指定slave的优先级。在不只1个slave存在的部署环境下， 当master宕机时，Redis Sentinel会将priority值最小的slave 提升为master需要注意的是，若该配置项为0，则对应的slave永远 不会自动提升为master############################## APPEND ONLY MODE ###############################appendonly no # 开启append only 模式之后，redis 会把所接收到的每一次写 操作请求都追加到appendonly.aof 文件中，当redis 重新启动时， 会从该文件恢复出之前的状态。但是这样会造成appendonly.aof 文件过大，所以redis 还支持了BGREWRITEAOF 指令， 对appendonly.aof 进行重新整理。默认是不开启的appendfilename &quot;appendonly.aof&quot; # 默认为appendonly.aofappendfsync everysec # 设置aof的同步频率，有三种选择 always、everysec、no，默认是everysec表示每秒同步一次no-appendfsync-on-rewrite no # 指定是否在后台aof文件rewrite期间调用fsync， 默认为no，表示要调用fsync（无论后台是否有子进程在刷盘）。 Redis在后台写RDB文件或重写afo文件期间会存在大量磁盘IO， 此时，在某些linux系统中，调用fsync可能会阻塞auto-aof-rewrite-percentage 100 # 指定Redis重写aof文件的条件，默认为100， 表示与上次rewrite的aof文件大小相比，当前aof文件增长量超过上 次afo文件大小的100%时，就会触发background rewrite。 若配置为0，则会禁用自动rewriteauto-aof-rewrite-min-size 64mb # 指定触发rewrite的aof文件大小。 若aof文件小于该值，即使当前文件的增量比例达到 auto-aof-rewrite-percentage的配置值，也不会触发自动 rewrite。即这两个配置项同时满足时，才会触发rewriteaof-load-truncated yes # 会自动发布一个log给客户端然后load（默认） 如果是no，用户必须手动redis-check-aof修复AOF文件才可以################################ LUA SCRIPTING ###############################lua-time-limit 5000 # 一个Lua脚本最长的执行时间，单位为毫秒 如果为0或负数表示无限执行时间，默认为5000################################## SLOW LOG ###################################slowlog-log-slower-than 10000 # 设定执行时间，单位是微秒，执行时长超过该时间 的命令将会被记入log。-1表示不记录slow log; 0强制记录所有命令slowlog-max-len 128 # 最多保存 128 条日志################################ LATENCY MONITOR ##############################latency-monitor-threshold 0 # 用LATENCY打印redis实例在跑命令时的耗时图表 只记录大于等于下边设置的值的操作。0的话，就是关闭监视。 可以动态开启############################# EVENT NOTIFICATION ##############################notify-keyspace-events &quot;&quot; # 如果开着开关。一个client进行了DEL操作在“foo”key 上在database0上。两个消息将会发布通过 pub/sub默认所用的通知被禁用，因为用户通常不需要改特性 并且该特性会有性能损耗############################### ADVANCED CONFIG ###############################hash-max-ziplist-entries 512 # hash类型的数据结构在编码上可以使用 ziplist和hashtable。ziplist的特点就是文件存储(以及内存存储) 所需的空间较小,在内容较小时,性能和hashtable几乎一样.因此redis 对hash类型默认采取ziplist。如果hash中条目的条目个数或者value 长度达到阀值,将会被重构为hashtable 这个参数指的是ziplist中允许存储的最大条目个数 默认为512，建议为128hash-max-ziplist-value 64 # ziplist中允许条目value值最大字节数，默认为64，建议为1024list-max-ziplist-size -2 # 对于list类型,将会采取ziplist,linkedlist两种编码类型list-compress-depth 0 # 表示一个quicklist两端不被压缩的节点个数。 注：这里的节点个数是指quicklist双向链表的节点个数， 而不是指ziplist里面的数据项个数。实际上，一个 quicklist节点上的ziplist，如果被压缩，就是整体被压缩的 参数list-compress-depth的取值含义如下： 0: 是个特殊值，表示都不压缩。这是Redis的默认值。 1: 表示quicklist两端各有1个节点不压缩，中间的节点压缩。 2: 表示quicklist两端各有2个节点不压缩，中间的节点压缩。 3: 表示quicklist两端各有3个节点不压缩，中间的节点压缩。 依此类推 由于0是个特殊值，很容易看出quicklist的头节点和 尾节点总是不被压缩的，以便于在表的两端进行快速存取set-max-intset-entries 512 # 当set类型中的数据都是数值类型， 并且set中整型元素的数量不超过指定值时，使用特殊的编码方式zset-max-ziplist-entries 128 # 与hash和list类似 zset-max-ziplist-value 64 # zsort也采用如下的配置来选择是否进行特殊编码来节省空间hll-sparse-max-bytes 3000 # 这个限制包含了16个字节的头部，当一个HyperLogLog 使用sparse representation 超过了这个显示，它就会转换到 dense representation上activerehashing yes # 用来控制是否自动重建hash。Active rehashing每100微秒 使用1微秒cpu时间排序，以重组Redis的hash表。重建是通过一种 lazy方式，写入hash表的操作越多，需要执行rehashing的步骤 也越多，如果服务器当前空闲，那么rehashing操作会一直执行。 如果对实时性要求较高，难以接受redis时不时出现的2微秒的延迟， 则可以设置activerehashing为no， 否则建议设置为yes，以节省内存空间client-output-buffer-limit normal 0 0 0client-output-buffer-limit slave 256mb 64mb 60client-output-buffer-limit pubsub 32mb 8mb 60客户端buffer控制。在客户端与server进行的交互中,每个连接都会与一个buffer关联,此buffer用来队列化等待被client接受的响应信息。如果client不能及时的消费响应信息,那么buffer将会被不断积压而给server带来内存压力.如果buffer中积压的数据达到阀值,将会导致连接被关闭,buffer被移除。buffer控制类型包括:normal -&gt; 普通连接；slave -&gt;与slave之间的连接；pubsub -&gt;pub/sub类型连接，此类型的连接，往往会产生此种问题;因为pub端会密集的发布消息,但是sub端可能消费不足.指令格式:client-output-buffer-limit &lt;class&gt; &lt;hard&gt; &lt;soft&gt; &lt;seconds&gt;&quot;,其中hard表示buffer最大值,一旦达到阀值将立即关闭连接;soft表示&quot;容忍值&quot;,它和seconds配合,如果buffer值超过soft且持续时间达到了seconds,也将立即关闭连接,如果超过了soft但是在seconds之后，buffer数据小于了soft,连接将会被保留.其中hard和soft都设置为0,则表示禁用buffer控制.通常hard值大于softhz 10 # Redis server执行后台任务的频率,默认为10, 此值越大表示redis对&quot;间歇性task&quot;的执行次数越频繁(次数/秒)。 &quot;间歇性task&quot;包括&quot;过期集合&quot;检测、关闭&quot;空闲超时&quot;的连接等,此 值必须大于0且小于500。此值过小就意味着更多的cpu周期消耗, 后台task被轮询的次数更频繁。此值过大意味着&quot;内存敏感&quot;性较差。 建议采用默认值aof-rewrite-incremental-fsync yes # aof rewrite过程中,是否采取增量文件同步策略 默认为“yes”。 rewrite过程中,每32M数据进行一次文件同步 这样可以减少aof大文件写入对磁盘的操作次数 Redis","categories":[],"tags":[{"name":"Redis","slug":"Redis","permalink":"http://yoursite.com/tags/Redis/"}],"keywords":[]},{"title":"Linux 操作命令及基本设置","slug":"019 Linux 操作命令及基本设置","date":"2016-10-14T00:00:00.000Z","updated":"2016-12-16T05:55:19.000Z","comments":true,"path":"2016/10/14/019 Linux 操作命令及基本设置/","link":"","permalink":"http://yoursite.com/2016/10/14/019 Linux 操作命令及基本设置/","excerpt":"","text":"Linux下编译软件时指定安装目录的好处 源码的安装一般由3个步骤组成：配置(configure)、编译(make)、安装(make install)Configure是一个可执行脚本，它有很多选项，在待安装的源码路径下使用命令./configure –help输出详细的选项列表。其中–prefix选项是配置安装的路径，如果不配置该选项，安装后可执行文件默认放在/usr /local/bin，库文件默认放在/usr/local/lib，配置文件默认放在/usr/local/etc，其它的资源文件放在/usr /local/share，比较凌乱。如果配置–prefix，如：./configure –prefix=/usr/local/test可以把所有资源文件放在/usr/local/test的路径中，不会杂乱。用了—prefix选项的另一个好处是卸载软件或移植软件。当某个安装的软件不再需要时，只须简单的删除该安装目录，就可以把软件卸载得干干净净；移植软件只需拷贝整个目录到另外一个机器即可（相同的操作系统）。当然要卸载程序，也可以在原来的make目录下用一次make uninstall，但前提是make文件指定过uninstall。 复制 剪切 粘贴 复制的命令是 y 即yank(提起) 常用的命令如下y 在使用v模式选定了某一块的时候，复制选定块到缓冲区用yy 复制整行 (nyy或者yny ，复制n行，n为数字）y^ 复制当前到行头的内容y$ 复制当前到行尾的内容yw 复制一个word (nyw或者ynw，复制n个word，n为数字）yG 复制至档尾(nyG或者ynG，复制到第n行，例如1yG或者y1G，复制到档尾）剪切的命令是 d 即delete d与y命令基本类似 所以两个命令用法一样 包括含有数字的用法d 剪切选定块到缓冲区；dd 剪切整行d^ 剪切至行首d$ 剪切至行尾dw 剪切一个worddG 剪切至档尾粘贴的命令式 p 即put(放下）p 小写p代表贴至游标后（下）, 因为游标是在具体字符的位置上, 所以实际是在该字符的后面P 大写P代表贴至游标前（上）整行的复制粘贴在游标的上（下）一行，非整行的复制则是粘贴在游标的前（后） 注： 在正则表达式中，^表示匹配字符串的开始位置，$表示匹配字符串的结束位置。 命令前面加数字表示重复的次数，加字母表示使用的缓冲区名称。使用英文句号”.”可以重复上一个命令。 在复制粘贴时，另一组常用的命令是u（撤销操作），U（撤销某一行最近所有修改），Ctrl+R（重做）， 这些功能主要是vim中的，vi中略有差别 yum -y update / upgrade yum -y upgrade 和 yum -y update 区别 yum -y update升级所有包，改变软件设置和系统设置,系统版本内核都升级yum -y upgrade升级所有包，不改变软件设置和系统设置，系统版本升级，内核不改变 修改 文件 文件夹 名称 mv 修改前的文件名称 修改后的文件名称mv 修改前的文件夹名称 修改后的文件夹名称 修改 登录欢迎语 vim /etc/motd Linux","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}],"keywords":[]},{"title":"Linux 中 curl","slug":"018 Linux 中 curl","date":"2016-10-11T00:00:00.000Z","updated":"2016-10-14T08:05:02.000Z","comments":true,"path":"2016/10/11/018 Linux 中 curl/","link":"","permalink":"http://yoursite.com/2016/10/11/018 Linux 中 curl/","excerpt":"","text":"curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本Ubuntu 中默认没有安装：apt-get install curl 安装即可 常见参数 [option] [URL…] -A/–user-agent 设置用户代理发送给服务器 -b/–cookie cookie字符串或文件读取位置 -c/–cookie-jar 操作结束后把cookie写入到这个文件中 -C/–continue-at 断点续转 -D/–dump-header 把header信息写入到该文件中 -e/–referer 来源网址 -f/–fail 连接失败时不显示http错误 -o/–output 把输出写到该文件中 -O/–remote-name 把输出写到该文件中，保留远程文件的文件名 -r/–range 检索来自HTTP/1.1或FTP服务器字节范围 -s/–silent 静音模式。不输出任何东西 -T/–upload-file 上传文件 -u/–user 设置服务器的用户和密码 -w/–write-out [format] 什么输出完成后 -x/–proxy 在给定的端口上使用HTTP代理 -#/–progress-bar 进度条显示当前的传送状态 常用 curl 实例 发送 GET 请求 # curl http://www.baidu.com # curl http://www.baidu.com/login?param1=12345\\&amp;param2=6789 多个参数要加 \\ 转义 # curl -i http://www.baidu.com 显示全部信息 # curl -l http://www.baidu.com 只显示头部信息 # curl -v http://www.baidu.com 显示get请求全过程解析 发送 POST 请求 # curl -d &quot;param1=12345&amp;param2=6789&quot; http://www.baidu.com 抓取页面内容到一个文件中 选项 -o 将下载数据写入到指定名称的文件中，并使用 –progress 显示进度条 # curl -o l-zm.html http://www.l-zm.com --progress 使用选项 -O URL必须具体到文件 不然抓不下来 # curl -O http://www.baidu.com/lim.jpg --progress # curl -O http://www.baidu.com/lim01.jpg -O http://www.baidu.com/lim02.jpg 获取多个 Linux curl","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"curl","slug":"curl","permalink":"http://yoursite.com/tags/curl/"}],"keywords":[]},{"title":"Linux 计划任务 CronTab","slug":"017 CentOS 6 计划任务 CronTab","date":"2016-10-04T00:00:00.000Z","updated":"2016-10-26T09:14:20.000Z","comments":true,"path":"2016/10/04/017 CentOS 6 计划任务 CronTab/","link":"","permalink":"http://yoursite.com/2016/10/04/017 CentOS 6 计划任务 CronTab/","excerpt":"","text":"安装 CronTab CentOS 中自带了CronTab 如果有需要 百度一下，你就知道 CentOS 安装 CronTabyum -y install vixie-cron vixie-cron 软件包是 cron 的主程序yum -y install crontabs crontabs 软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序 Ubuntu 安装 CronTabapt-get install cron CronTab 使用与解释 Centos 下的使用的语法crontab -l 查看所有的计划任务crontab -e 修改计划任务 service crond start 启动计划任务service crond restart 重启计划任务service crond reload 重新载入计划任务 Ubuntu 下的使用的语法service cron start 启动计划任务service cron restart 重启计划任务service cron reload 重新载入计划任务 如果第一次用这个命令会让你选择文本编辑器, 我选择的是`vim` 如果要换: `select-editor` CronTab 的语法* * * * * date &gt;&gt; /tmp/date.txt * * * * * date &gt;&gt; /tmp/date.txt 分钟 小时 几号 几月 星期 需要执行的命令 案例每一小时* */1 * * * /service/l-zm/request.sh 每小时执行/etc/cron.hourly目录内的脚本01 * * * * root run-parts /etc/cron.hourly 每秒执行一次*/1 * * * * sleep 0s;date &gt;&gt; /tmp/date.txt */1 * * * * sleep 1s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 2s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 3s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 4s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 5s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 6s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 7s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 8s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 9s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 10s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 11s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 12s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 13s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 14s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 15s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 16s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 17s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 18s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 19s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 20s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 21s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 22s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 23s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 24s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 25s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 26s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 27s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 28s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 29s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 30s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 31s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 32s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 33s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 34s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 35s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 36s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 37s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 38s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 39s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 40s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 41s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 42s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 43s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 44s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 45s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 46s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 47s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 48s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 49s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 50s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 51s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 52s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 53s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 54s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 55s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 56s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 57s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 58s; date &gt;&gt; /tmp/date.txt */1 * * * * sleep 59s; date &gt;&gt; /tmp/date.txt 如果每秒没有循环连续 可以试试把 sleep 0s 删除, 在最后添加 sleep 60s (CentOS 和 Ubuntu 下不一样) 每小时的第3和第15分钟执行3,15 * * * * /service/l-zm/request.sh 在上午8点到11点的第3和第15分钟执行3,15 8-11 * * * /service/l-zm/request.sh 每隔两天的上午8点到11点的第3和第15分钟执行3,15 8-11 */2 * * date &gt;&gt; /tmp/date.txt 每个星期一的上午8点到11点的第3和第15分钟执行3,15 8-11 * * 1 date &gt;&gt; /tmp/date.txt 每晚的21:3030 21 * * * /service/l-zm/request.sh 每月1、10、22日的4 : 4545 4 1,10,22 * * /service/l-zm/request.sh 每周六、周日的1 : 1010 1 * * 6,0 /service/l-zm/request.sh 每天18 : 00至23 : 00之间每隔30分钟0,30 18-23 * * * /service/l-zm/request.sh 每星期六的晚上11 : 00 pm0 23 * * 6 /service/l-zm/request.sh 晚上11点到早上7点之间，每隔一小时* 23-7/1 * * * /service/l-zm/request.sh 每月的4号与每周一到周三的11点0 11 4 * mon-wed /service/l-zm/request.sh 一月一号的4点0 4 1 jan * /service/l-zm/request.sh Linux CronTab","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"CronTab","slug":"CronTab","permalink":"http://yoursite.com/tags/CronTab/"}],"keywords":[]},{"title":"CentOS 6 安装 JDK","slug":"016 CentOS 6 安装JDK","date":"2016-10-03T00:00:00.000Z","updated":"2016-10-20T08:21:47.000Z","comments":true,"path":"2016/10/03/016 CentOS 6 安装JDK/","link":"","permalink":"http://yoursite.com/2016/10/03/016 CentOS 6 安装JDK/","excerpt":"","text":"下载 JDK 安装http://www.oracle.com/technetwork/java/javase/downloads/index.html 其他版本下载提示页面拉低，找到 Java Archive 上传至服务器 tar -zxvf jdk-7u80-linux-x64.tar.gz mv jdk1.7.0_80 /usr/ 设置环境变量 vim /etc/profile 添加如下内容 export JAVA_HOME=/usr/jdk1.7.0_80 export JRE_HOME=$JAVA_HOME/jre export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=./:$JAVA_HOME/lib:$JAVA_HOME/jre/lib 修改生效 source /etc/profile 验证 java -version java version &quot;1.7.0_80&quot; Java(TM) SE Runtime Environment (build 1.7.0_80-b15) Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode) 使用 yum 安装 JDKyum search java | grep jdk ldapjdk-javadoc.x86_64 : Javadoc for ldapjdk java-1.6.0-openjdk.x86_64 : OpenJDK Runtime Environment java-1.6.0-openjdk-demo.x86_64 : OpenJDK Demos java-1.6.0-openjdk-devel.x86_64 : OpenJDK Development Environment java-1.6.0-openjdk-javadoc.x86_64 : OpenJDK API Documentation java-1.6.0-openjdk-src.x86_64 : OpenJDK Source Bundle java-1.7.0-openjdk.x86_64 : OpenJDK Runtime Environment java-1.7.0-openjdk-demo.x86_64 : OpenJDK Demos java-1.7.0-openjdk-devel.x86_64 : OpenJDK Development Environment java-1.7.0-openjdk-javadoc.noarch : OpenJDK API Documentation java-1.7.0-openjdk-src.x86_64 : OpenJDK Source Bundle java-1.8.0-openjdk.x86_64 : OpenJDK Runtime Environment java-1.8.0-openjdk-debug.x86_64 : OpenJDK Runtime Environment with full debug on java-1.8.0-openjdk-demo.x86_64 : OpenJDK Demos java-1.8.0-openjdk-demo-debug.x86_64 : OpenJDK Demos with full debug on java-1.8.0-openjdk-devel.x86_64 : OpenJDK Development Environment java-1.8.0-openjdk-devel-debug.x86_64 : OpenJDK Development Environment with java-1.8.0-openjdk-headless.x86_64 : OpenJDK Runtime Environment java-1.8.0-openjdk-headless-debug.x86_64 : OpenJDK Runtime Environment with full java-1.8.0-openjdk-javadoc.noarch : OpenJDK API Documentation java-1.8.0-openjdk-javadoc-debug.noarch : OpenJDK API Documentation for packages java-1.8.0-openjdk-src.x86_64 : OpenJDK Source Bundle java-1.8.0-openjdk-src-debug.x86_64 : OpenJDK Source Bundle for packages with ldapjdk.x86_64 : The Mozilla LDAP Java SDK 安装 java-1.7.0-openjdk yum install java-1.7.0-openjdk 安装完之后，默认的安装目录是在: /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.75.x86_64 设置环境变量 修改生效 同上 JDK","categories":[],"tags":[{"name":"JDK","slug":"JDK","permalink":"http://yoursite.com/tags/JDK/"}],"keywords":[]},{"title":"Tomcat 相关问题及各个版本下载","slug":"015 Tomcat 相关问题及各个版本下载","date":"2016-10-03T00:00:00.000Z","updated":"2016-10-14T08:04:49.000Z","comments":true,"path":"2016/10/03/015 Tomcat 相关问题及各个版本下载/","link":"","permalink":"http://yoursite.com/2016/10/03/015 Tomcat 相关问题及各个版本下载/","excerpt":"","text":"Tomcat Get 请求中文乱码到 Tmocat 目录 conf 下修改 server.xml 添加 URIEncoding=&quot;UTF-8&quot; 1&lt;Connector URIEncoding=&quot;UTF-8&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot;/&gt; Tomcat 各个版本下载http://archive.apache.org/dist/tomcat/ http://archive.apache.org/dist/tomcat/ Tomcat","categories":[],"tags":[{"name":"Tomcat","slug":"Tomcat","permalink":"http://yoursite.com/tags/Tomcat/"}],"keywords":[]},{"title":"Centos 6 中部署 Hexo 个人博客","slug":"013 CentOS 6 中部署 Hexo 个人博客","date":"2016-10-01T00:00:00.000Z","updated":"2016-10-02T16:02:52.000Z","comments":true,"path":"2016/10/01/013 CentOS 6 中部署 Hexo 个人博客/","link":"","permalink":"http://yoursite.com/2016/10/01/013 CentOS 6 中部署 Hexo 个人博客/","excerpt":"","text":"首先安装 Node.js更新系统所有软件1yum -y update 安装 Development Tools1yum -y groupinstall &quot;Development Tools&quot; 安装 screen1yum -y install screen 选择目录来编译源程序1cd /usr/local/src 下载 Node.js1wget http://nodejs.org/dist/node-latest.tar.gz 解压并变为目录12tar zxf node-*.tar.gzcd node-v* 配置环境1./configure 出现问题WARNING: C++ compiler too old, need g++ 4.8 or clang++ 3.4 (CXX=g++)gcc 版本过低，升级gcc。请看我博客中 CentOS 6 安装 / 更新 GCC 编译器 编译1make 出现问题make[1]: [/usr/local/src/node-v6.7.0/out/Release/obj.target/v8_libplatform/deps/v8/src/libplatform/default-platform.o] 错误 1make[1]: Leaving directory /usr/local/src/node-v6.7.0/outmake: * [node] 错误 2源码编译升级安装了gcc后，编译程序或运行其它程序时，有时会出现类似/usr/lib64/libstdc++.so.6: version GLIBCXX_3.4.21 not found的问题。这是因为升级gcc时，生成的动态库没有替换老版本gcc的动态库导致的，将gcc最新版本的动态库替换系统中老版本的动态库即可解决strings /usr/lib64/libstdc++.so.6 | grep GLIBC输出结果如下……GLIBCXX_3.4.17GLIBCXX_3.4.18GLIBCXX_3.4.19GLIBC_2.3GLIBC_2.2.5GLIBC_2.3.2……从以上输出可以看出，gcc的动态库还是旧版本的。说明出现这些问题，是因为升级gcc时，生成的动态库没有替换老版本gcc的动态库问题处理：执行以下命令，查找编译gcc时生成的最新动态库find / -name &quot;libstdc++.so星&quot;……/usr/local/build/gcc-4.9.1/x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.20/usr/local/build/gcc-4.9.1/x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so/usr/local/build/gcc-4.9.1/x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6/usr/local/build/gcc-4.9.1/stage1-x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.20(最新动态库)/usr/local/build/gcc-4.9.1/stage1-x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so/usr/local/build/gcc-4.9.1/stage1-x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6/usr/local/build/gcc-4.9.1/prev-x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.20/usr/local/build/gcc-4.9.1/prev-x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so/usr/local/build/gcc-4.9.1/prev-x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6将上面的最新动态库libstdc++.so.6.0.20复制到/usr/lib64目录下cp /usr/local/build/gcc-4.9.1/stage1-x86_64-unknown-linux-gnu/libstdc++-v3/src/.libs/libstdc++.so.6.0.20 /usr/lib64复制后，修改系统默认动态库的指向，即：重建默认库的软连接切换工作目录至 cd /usr/lib64删除原来软连接 rm -rf libstdc++.so.6将默认库的软连接指向最新动态库 ln -s libstdc++.so.6.0.20 libstdc++.so.6默认动态库升级完成。重新运行以下命令检查动态库 strings /usr/lib64/libstdc++.so.6 | grep GLIBC有了 GLIBCXX_3.4.20重新编译 make 安装1make install Node.js 安装完成 查看Node.js 版本 1node --version 安装 Nginx 这里不多说，网上都是 安装 hexo1npm install -g hexo 初始化 可以到自己指定的目录下初始化，比如我的在 /service/hexo 下 1hexo init 部署 将自己的 MarkDown 文件上传至服务器 Hexo source 指定文件夹下 hexo g hexo s &amp; (添加 &amp; 后，关掉terminal后服务依然在) ps aux | grep hexo (找到指定的端口号可以使用：kill -9 123456 杀掉服务) 完成服务器 Node.js Hexo","categories":[],"tags":[{"name":"服务器","slug":"服务器","permalink":"http://yoursite.com/tags/服务器/"},{"name":"Node.js","slug":"Node-js","permalink":"http://yoursite.com/tags/Node-js/"},{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}],"keywords":[]},{"title":"CentOS 6 安装 / 更新 GCC 编译器","slug":"014 CentOS 6 安装:更新 gcc 编译器","date":"2016-10-01T00:00:00.000Z","updated":"2016-10-02T16:00:03.000Z","comments":true,"path":"2016/10/01/014 CentOS 6 安装:更新 gcc 编译器/","link":"","permalink":"http://yoursite.com/2016/10/01/014 CentOS 6 安装:更新 gcc 编译器/","excerpt":"","text":"使用 yum 安装 gcc 安装 gcc 、 c++ 编译器以及内核文件 1yum -y install gcc gcc-c++ kernel-devel yum 安装的版本太低 就需要自己安装了 不建议在服务器上面下载 因为速度太慢了 下面这个网址 根据自己的需求下载指定版本 然后上传至服务器http://gcc.skazkaforyou.com/releases/ 下载 解压在这里，我们将gcc-4.9.1.tar.gz解压到/usr/local/src目录中(当然你也可以指定其他目录) 解压 tar -xvzf gcc-4.9.1.tar.gz cd gcc-4.9.1 运行 download_prerequisites 脚本./contrib/download_prerequisites 安装gcc需要下载诸如gmp、mpfr、mpc等依赖文件，执行download_prerequisites将会自动下载这些软件并解压到当前目录(文件不大，总共只有几MB，请耐心等待下载) gcc 安装位置接着，就可以对gcc进行编译安装了。在此之前，我们先创建一个目录 /usr/local/build/gcc-4.9.1 (你也可以自行指定其他目录)用于存放编译后的程序文件 mkdir /usr/local/build/ mkdir /usr/local/build/gcc-4.9.1 跳转到编译后的程序文件存放目录cd /usr/local/build/gcc-4.9.1调用gcc源程序的configure(后面的参数选项可根据需要自行修改)，用于配置gcc/usr/local/src/gcc-4.9.1/configure --enable-checking=release --enable-languages=c,c++ --disable-multilib充分发挥CPU四核优势，启动四线程make -j4 编译 gcc 源程序 需要消耗比较长的时间make make命令这一过程耗费的时间非常多 我大概用了一个小时 安装 gccmake insatall 完成查看 gcc 版本 gcc -v gcc version 4.9.1 (GCC) CentOS GCC","categories":[],"tags":[{"name":"CentOS","slug":"CentOS","permalink":"http://yoursite.com/tags/CentOS/"},{"name":"GCC","slug":"GCC","permalink":"http://yoursite.com/tags/GCC/"}],"keywords":[]},{"title":"Mac 电脑下终端程序 SecureCRT","slug":"012 Mac 电脑下终端程序 SecureCRT","date":"2016-09-29T00:00:00.000Z","updated":"2016-09-28T12:55:05.000Z","comments":true,"path":"2016/09/29/012 Mac 电脑下终端程序 SecureCRT/","link":"","permalink":"http://yoursite.com/2016/09/29/012 Mac 电脑下终端程序 SecureCRT/","excerpt":"","text":"不能记录密码打开 SecureCRT 的全局选项，在主菜单 Preferences-&gt;General -&gt; 取消 Use Keychain 修改主题连接一个回话，在菜单中找到 Options-&gt;Session Options-&gt;Appearance (如果显示中文有问题也在这里设置) CRACK STEP 打开dmg镜像，将 SecureCRT.app 拖入应用程序 打开一次应用程序中的 SecureCRT.app-&gt;I Agree 后退出 必须要做！ 到应用程序里先找到secureCRT的包内容，进入MACOS文件夹。替换crack中的secureCRT文件 打开软件，到 Help 中点击 Enter License Data-&gt;Continue-&gt;Enter License Manually 对应Crack文件夹中的 Readme!! 文档填入相应信息即可 Mac 软件","categories":[],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://yoursite.com/tags/Mac/"},{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}],"keywords":[]},{"title":"Nginx 安装 负载均衡 备用服务器","slug":"011 Nginx 安装 负载均衡 备用服务器","date":"2016-09-28T00:00:00.000Z","updated":"2016-12-23T16:21:34.000Z","comments":true,"path":"2016/09/28/011 Nginx 安装 负载均衡 备用服务器/","link":"","permalink":"http://yoursite.com/2016/09/28/011 Nginx 安装 负载均衡 备用服务器/","excerpt":"","text":"Nginx 安装官网下载 http://nginx.org/ 放在目录：/usr/local/nginx 下 tar -zxvf /usr/local/nginx/nginx-1.10.1.tar.gz 进入目录：cd nginx-1.10.1 ./configure --prefix=/usr/local/nginx 出现错误： ./configure: error: the HTTP rewrite module requires the PCRE library. You can either disable the module by using --without-http_rewrite_module option, or install the PCRE library into the system, or build the PCRE library statically from the source with nginx by using --with-pcre=&lt;path&gt; option. 安装： yum -y install pcre-devel 出现错误： ./configure: error: the HTTP gzip module requires the zlib library. You can either disable the module by using --without-http_gzip_module option, or install the zlib library into the system, or build the zlib library statically from the source with nginx by using --with-zlib=&lt;path&gt; option. 安装：yum -y install zlib-devel 启动service nginx start 查询Nginx进程ps -ef | grep nginx 重启service nginx restart Nginx 设置备用服务器说明一般情况下，项目上线可能会选在凌晨时刻进行，比如之前在中国电信，项目上线要等到凌晨一点，由测试给出最终版本项目文件，然后等待运维部署上线，我们开发等待测试给出上线结果，如果有问题，马上做修改，因为此刻访问用户最少，影响微乎其微。但是，上线完成，已经六点了。 生产环境 是一个神圣而有伟大的地方 只可远观而不可亵玩焉 官方 Example Configuration 1234567891011121314upstream backend &#123; server backend1.example.com weight=5; server backend2.example.com:8080; server unix:/tmp/backend3; server backup1.example.com:8080 backup; server backup2.example.com:8080 backup;&#125;server &#123; location / &#123; proxy_pass http://backend; &#125;&#125; 官方的说法是默认情况下，请求会根据权重在服务器之间请求。在上面的例子中，每7请求将被分配如下：5个请求到backend1.example.com、1个请求到backend2.example.com:8080、1个请求到unix:/tmp/backend3。如果与服务器的通信的过程中发生了错误，请求将被传递到下一个服务器，等等，直到尝试了所有的运作的服务器都放生错误，请求将请求剩下的备用服务器地址。 12345678910111213141516upstream backend &#123; server www.l-zm.com weight=5; server www.l-zm.com:8080; server www.l-zm.com:8081 backup;&#125;server &#123; listen 80; server_name localhost; location / &#123; index index.html proxy_pass http://backend; &#125;&#125; TODO：不间断更新中Nginx 服务器","categories":[],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/tags/Nginx/"},{"name":"服务器","slug":"服务器","permalink":"http://yoursite.com/tags/服务器/"}],"keywords":[]},{"title":"iOS 设置 Launch Image 启动图片尺寸 (闪图)","slug":"010 iOS 设置 Launch Image 启动图片尺寸 (闪图) ","date":"2016-09-27T00:00:00.000Z","updated":"2016-09-26T17:26:58.000Z","comments":true,"path":"2016/09/27/010 iOS 设置 Launch Image 启动图片尺寸 (闪图) /","link":"","permalink":"http://yoursite.com/2016/09/27/010 iOS 设置 Launch Image 启动图片尺寸 (闪图) /","excerpt":"","text":"iPhone Portrait iOS 8,9 Retina HD 5.5 ( 1242 * 2208 ) @3x ( 6 plus ) Retina HD 4.7 ( 750 * 1334 ) @2x ( 6 ) iPhone Landscape iOS 8,9 ( 横屏 ) Retina HD 5.5 ( 2208 * 1242 ) @3x ( 6 plus ) iPhone Portrait iOS 7-9 2x ( 640 * 960 ) @2x ( 4/4s ) Retina 4 ( 640 * 1136 ) @2x ( 5/5s/5c ) iPhone Portrait iOS 5,6 1x ( 320 * 480 ) @1x 2x ( 640 * 960 ) @2x Retina 4 ( 640 * 1136 ) @2x iPad Portrait iOS 7-9 1x ( 768 * 1024 ) @1x 2x ( 1536 * 2048 ) @2x iPad Landscape iOS 7-9 ( 横屏 ) 1x ( 1024 * 768 ) @1x 2x ( 2048 * 1536 ) @2x iPad Portrait iOS 5,6 1x ( 768 * 1024 ) @1x 2x ( 1536 * 2048 ) @2x iPad Landscape iOS 5,6 1x ( 1024 * 768 ) @1x 2x ( 2048 * 1536 ) @2x iPad Portrait Without Status Bar iOS 5,6 1x ( 768 * 1004 ) @1x 2x ( 1536 * 2008 ) @2x iPad Landscape Without Status Bar iOS 5,6 1x ( 1024 * 748 ) @1x 2x ( 2048 * 1496 ) @2x evice Portrait size Landscape size iPhone 6s Plus, iPhone 6 Plus 1080px by 1920px 1920px by 1080px iPhone 6s, iPhone 6 750px by 1334px 1334px by 750px iPhone SE 640px by 1136px 1136px by 640px 12.9-inch iPad Pro 2048px by 2732px 2732px by 2048px 9.7-inch iPad Pro, iPad Air 2, iPad mini 4, iPad mini 2 1536px by 2048px 2048px by 1536px 如果显示不正常, 把 App 卸载了重新安装下 延长显示时间代码 ( 在第一个加载页面的 viewDidLoad 中添加 )12345override func viewDidLoad() &#123; super.viewDidLoad() // LaunchImage 显示时间延长 NSThread.sleepForTimeInterval(3.0)//延长3秒&#125; iOS","categories":[],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://yoursite.com/tags/iOS/"}],"keywords":[]},{"title":"Java 中 System.getProperty() 方法可以获取系统的那些值","slug":"009 Java 中 System.getProperty() 方法可以获取系统的那些值","date":"2016-09-27T00:00:00.000Z","updated":"2016-09-26T17:04:54.000Z","comments":true,"path":"2016/09/27/009 Java 中 System.getProperty() 方法可以获取系统的那些值/","link":"","permalink":"http://yoursite.com/2016/09/27/009 Java 中 System.getProperty() 方法可以获取系统的那些值/","excerpt":"","text":"- - java.version Java 运行时环境版本 java.vendor Java 运行时环境供应商 java.vendor.url Java 供应商的 URL java.home Java 安装目录 java.vm.specification.version Java 虚拟机规范版本 java.vm.specification.vendor Java 虚拟机规范供应商 java.vm.specification.name Java 虚拟机规范名称 java.vm.version Java 虚拟机实现版本 java.vm.vendor Java 虚拟机实现供应商 java.vm.name Java 虚拟机实现名称 java.specification.version Java 运行时环境规范版本 java.specification.vendor Java 运行时环境规范供应商 java.specification.name Java 运行时环境规范名称 java.class.version Java 类格式版本号 java.class.path Java 类路径 java.library.path 加载库时搜索的路径列表 java.io.tmpdir 默认的临时文件路径 java.compiler 要使用的 JIT 编译器的名称 java.ext.dirs 一个或多个扩展目录的路径 os.name 操作系统的名称 os.arch 操作系统的架构 os.version 操作系统的版本 file.separator 文件分隔符（在 UNIX 系统中是“/”） path.separator 路径分隔符（在 UNIX 系统中是“:”） line.separator 行分隔符（在 UNIX 系统中是“/n”） user.name 用户的账户名称 user.home 用户的主目录 user.dir 用户的当前工作目录 1System.getProperty(\"user.dir\") Java","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}],"keywords":[]},{"title":"Struts 各版本 jar包 下载","slug":"008 Struts 各版本 jar包 下载","date":"2016-09-27T00:00:00.000Z","updated":"2016-09-26T16:44:48.000Z","comments":true,"path":"2016/09/27/008 Struts 各版本 jar包 下载/","link":"","permalink":"http://yoursite.com/2016/09/27/008 Struts 各版本 jar包 下载/","excerpt":"","text":"http://archive.apache.org/dist/struts/binaries/ http://archive.apache.org/dist/struts/binaries/ Struts","categories":[],"tags":[{"name":"Struts","slug":"Struts","permalink":"http://yoursite.com/tags/Struts/"}],"keywords":[]},{"title":"Spring 各版本 jar包 下载","slug":"007 Spring 各版本 jar包 下载","date":"2016-09-27T00:00:00.000Z","updated":"2016-09-26T16:45:23.000Z","comments":true,"path":"2016/09/27/007 Spring 各版本 jar包 下载/","link":"","permalink":"http://yoursite.com/2016/09/27/007 Spring 各版本 jar包 下载/","excerpt":"","text":"http://repo.spring.io/release/org/springframework/spring/ http://repo.spring.io/release/org/springframework/spring/ Spring","categories":[],"tags":[{"name":"Spring","slug":"Spring","permalink":"http://yoursite.com/tags/Spring/"}],"keywords":[]},{"title":"Mac 电脑 U盘 重装系统","slug":"006 Mac 电脑 U盘 重装系统","date":"2016-09-27T00:00:00.000Z","updated":"2016-09-26T16:40:19.000Z","comments":true,"path":"2016/09/27/006 Mac 电脑 U盘 重装系统/","link":"","permalink":"http://yoursite.com/2016/09/27/006 Mac 电脑 U盘 重装系统/","excerpt":"","text":"系统Install\\ macOS\\ Sierra.app 最新的系统可以去 Apple Store 里面下载 U盘lzmvlzm U盘名称可以到磁盘工具里面查看 终端输入1$ sudo /Applications/Install\\ macOS\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/lzmvlzm --applicationpath /Applications/Install\\ macOS\\ Sierra.app --nointeraction 操作 开机按下 option 键 Mac 系统","categories":[],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://yoursite.com/tags/Mac/"},{"name":"系统","slug":"系统","permalink":"http://yoursite.com/tags/系统/"}],"keywords":[]},{"title":"Apple 系统固件下载地址","slug":"005 Apple 系统固件下载地址","date":"2016-09-26T00:00:00.000Z","updated":"2016-10-27T07:25:02.000Z","comments":true,"path":"2016/09/26/005 Apple 系统固件下载地址/","link":"","permalink":"http://yoursite.com/2016/09/26/005 Apple 系统固件下载地址/","excerpt":"","text":"https://support.apple.com/zh_CN/downloads/ 检查激活锁状态 https://www.icloud.com/activationlock/ Apple","categories":[],"tags":[{"name":"Apple","slug":"Apple","permalink":"http://yoursite.com/tags/Apple/"}],"keywords":[]},{"title":"MySQL 数据库编码方式修改","slug":"004 MySQL 数据库编码方式修改","date":"2016-09-26T00:00:00.000Z","updated":"2016-09-26T01:34:17.000Z","comments":true,"path":"2016/09/26/004 MySQL 数据库编码方式修改/","link":"","permalink":"http://yoursite.com/2016/09/26/004 MySQL 数据库编码方式修改/","excerpt":"","text":"查看 MySQL 编码进入 MySQL 输入 status 1234567891011121314151617mysql Ver 14.14 Distrib 5.6.33, for debian-linux-gnu (x86_64) using EditLine wrapperConnection id: 249Current database:Current user: root@localhostSSL: Not in useCurrent pager: stdoutUsing outfile: ''Using delimiter: ;Server version: 5.6.33-0ubuntu0.14.04.1 (Ubuntu)Protocol version: 10Connection: Localhost via UNIX socketServer characterset: utf8Db characterset: utf8Client characterset: utf8Conn. characterset: utf8UNIX socket: /var/run/mysqld/mysqld.sockUptime: 5 hours 16 min 18 sec 如果下面这四个不是 utf8 1234Server characterset: utf8Db characterset: utf8Client characterset: utf8Conn. characterset: utf8 保存中文的时候可能会乱码 修改1$ vim /etc/mysql/my.cnf [client] &gt; 下面追加 default-character-set=utf8 [mysqld] &gt; 下面追加 character-set-server=utf8 [mysql] &gt; 下面追加 no-auto-rehash 重启 MySQL 数据库输入1$ service mysql restart (重启数据库) MySQL","categories":[],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://yoursite.com/tags/MySQL/"}],"keywords":[]},{"title":"Mac 显示隐藏文件","slug":"002 Mac 显示隐藏文件","date":"2016-09-25T00:00:00.000Z","updated":"2016-09-25T18:32:45.000Z","comments":true,"path":"2016/09/25/002 Mac 显示隐藏文件/","link":"","permalink":"http://yoursite.com/2016/09/25/002 Mac 显示隐藏文件/","excerpt":"","text":"终端输入1$ defaults write com.apple.finder AppleShowAllFiles -bool true 生效强制退出 Finder commend + option + esc 恢复原来的样子1$ defaults write com.apple.finder AppleShowAllFiles -bool false Mac","categories":[],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://yoursite.com/tags/Mac/"}],"keywords":[]},{"title":"Mac 修改 Dock 栏隐藏的速度","slug":"003 Mac 修改 Dock 栏隐藏的速度","date":"2016-09-25T00:00:00.000Z","updated":"2016-09-25T18:34:08.000Z","comments":true,"path":"2016/09/25/003 Mac 修改 Dock 栏隐藏的速度/","link":"","permalink":"http://yoursite.com/2016/09/25/003 Mac 修改 Dock 栏隐藏的速度/","excerpt":"","text":"修改 Dock 栏显示隐藏的速度（ 0秒 | 0.5秒 默认是 1 ）1$ defaults write com.apple.dock autohide-delay -float 0 &amp;&amp; killall Dock 恢复默认设置1$ defaults delete com.apple.Dock autohide-delay &amp;&amp; killall Dock Mac","categories":[],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://yoursite.com/tags/Mac/"}],"keywords":[]},{"title":"Mac 电脑设置 Finder 可以退出","slug":"001 Mac 电脑设置 Finder 可以退出","date":"2016-09-25T00:00:00.000Z","updated":"2016-09-27T01:54:05.000Z","comments":true,"path":"2016/09/25/001 Mac 电脑设置 Finder 可以退出/","link":"","permalink":"http://yoursite.com/2016/09/25/001 Mac 电脑设置 Finder 可以退出/","excerpt":"","text":"终端输入1$ defaults write com.apple.Finder QuitMenuItem 1 恢复原来的样子1$ defaults write com.apple.Finder QuitMenuItem 0 Mac","categories":[],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://yoursite.com/tags/Mac/"}],"keywords":[]}]}