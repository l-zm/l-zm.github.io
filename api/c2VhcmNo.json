[{"title":"exo 网站初始化","date":"2022-04-25T00:00:00.000Z","date_formatted":{"ll":"2022年4月25日","L":"2022/04/25","MM-DD":"04-25"},"updated":"2022-04-24T16:00:00.000Z","content":"第一步\n初始化：hexo init\n安装 主题\n使用的主题：inside\n地址：https://github.com/ikeq/hexo-theme-inside\n\n进入博客目录 project/ , 执行以下命令：\n\n1npm install hexo-theme-inside\n\n配置：project/_config.yml\n\n1theme: inside\n\n创建主题文件：project/_config.inside.yml\n\n1https://github.com/ikeq/hexo-theme-inside/blob/master/_config.yml\nhttps://github.com/omnibingo/talk2.it\n","plink":"http://l-zm.com/hexo-web-site-inti/"},{"title":"iOS App苹果企业签分发","date":"2022-04-23T00:00:00.000Z","date_formatted":{"ll":"2022年4月23日","L":"2022/04/23","MM-DD":"04-23"},"updated":"2022-04-24T16:00:00.000Z","content":"配置\n\n\n必须有SSL证书（HTTPS）\n\n企业签分发的 plist、icon、ipa 等文件下载链接必须是https协议的，例如：https://html.主域名.com/company_ios/propertylist.plist\n\n\n\n配置MIME\n\n如果是Nginx，在 nginx/conf/mime.types 配置文件里面添加如下配置\n\n说明：\n\napplication/octet-stream表示.ipa后缀的文件是下载类型\ntext/xml表示.plist后缀的文件是xml类型\n\n\n\n12application/octet-stream    ipatext/xml    plist\n\n苹果端安装协议\n\n1itms-services:///?action=download-manifest&amp;url=https://html.主域名.com/company_ios/propertylist.plist\n使用\n12// 能触发这个地址就好window.location = &quot;itms-services:///?action=download-manifest&amp;url=https://html.主域名.com/company_ios/propertylist.plist&quot; \n注意\n\n自己签名的SSL证书是不行的\nplist 文件中有中文会有问题，需要另存为utf-8格式保存即可\nplist 文件下载路径问题，下载路径不要操作三级，否者会报“无法连接到…”、“此时无法下载…”、“证书有问题…”等\n安装协议 itms-services: 后面是三个&quot;/&quot;，当然，我测试了两个，也是可以的\n客户端对 plist 文件是有缓存的，如果安装不成功，可以修改下 plist 文件名称重新试下\n安装过程中图片无法显示问题，这个在plist文件里面已经设置了图片地址，但是就是不显示\n\nplist文件样本：\n12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;&lt;plist version=&quot;1.0&quot;&gt;&lt;dict&gt;    &lt;key&gt;items&lt;/key&gt;    &lt;array&gt;        &lt;dict&gt;            &lt;key&gt;assets&lt;/key&gt;            &lt;array&gt;                &lt;dict&gt;                    &lt;key&gt;kind&lt;/key&gt;                    &lt;string&gt;software-package&lt;/string&gt;                    &lt;key&gt;url&lt;/key&gt;                    &lt;string&gt;https://www.主域名.com/包.ipa&lt;/string&gt;                &lt;/dict&gt;                &lt;dict&gt;                    &lt;key&gt;kind&lt;/key&gt;                    &lt;string&gt;full-size-image&lt;/string&gt;                    &lt;key&gt;needs-shine&lt;/key&gt;          　　　　　　　　　　&lt;true/&gt;                    &lt;key&gt;url&lt;/key&gt;                    &lt;string&gt;http://www.主域名.com/icon-512.png&lt;/string&gt;                &lt;/dict&gt;                &lt;dict&gt;                    &lt;key&gt;kind&lt;/key&gt;                    &lt;string&gt;display-image&lt;/string&gt;                    &lt;key&gt;needs-shine&lt;/key&gt;          　　　　　　　　　　&lt;true/&gt;                    &lt;key&gt;url&lt;/key&gt;                    &lt;string&gt;http://www.主域名.com/icon-57.png&lt;/string&gt;                &lt;/dict&gt;            &lt;/array&gt;            &lt;key&gt;metadata&lt;/key&gt;            &lt;dict&gt;                &lt;key&gt;bundle-identifier&lt;/key&gt;                &lt;string&gt;com.主域名.bundleId&lt;/string&gt;                &lt;key&gt;bundle-version&lt;/key&gt;                &lt;string&gt;2.0.0&lt;/string&gt;                &lt;key&gt;kind&lt;/key&gt;                &lt;string&gt;software&lt;/string&gt;                &lt;key&gt;subtitle&lt;/key&gt;                &lt;string&gt;&lt;/string&gt;                &lt;key&gt;title&lt;/key&gt;                &lt;string&gt;App名称&lt;/string&gt;            &lt;/dict&gt;        &lt;/dict&gt;    &lt;/array&gt;&lt;/dict&gt;&lt;/plist&gt;\n关于跳转设置信任的逻辑\n\n\niOS 9 版本之前可以直接： prefs:root=General&amp;path=ManagedConfigurationList \n\n\niOS 10 系统之后不能直接跳转了，但是可以：https://www.主域名.com/企业签文件.mobileprovision \n\n\nJS Demo\n\n\n123456789101112131415    if(agent.indexOf(&quot;like mac os x&quot;) &gt; 0) &#123;         var ver=agent.match(/cpu iphone os (.*?) like mac os/);        ver = ver[1].replace(/_/g,&quot;.&quot;)        ver = ver.split(&#x27;.&#x27;)[0]         var url = &quot;prefs:root=General&amp;path=ManagedConfigurationList&quot;;        if (agent.indexOf(&#x27;ipad&#x27;) &gt; 0 || ver &gt; 9) &#123;            if (agent.indexOf(&#x27;browser&#x27;) &lt; 0) &#123;                //证书替换                url   = &quot;https://www.主域名.com/embedded.mobileprovision&quot;;            &#125;        &#125;        request(url);&#125;\n","plink":"http://l-zm.com/ios-app-enterprise-sign-share/"},{"title":"苹果官方鼠标移动速度慢问题解决(Magic Mouse)","date":"2022-01-05T00:00:00.000Z","date_formatted":{"ll":"2022年1月5日","L":"2022/01/05","MM-DD":"01-05"},"updated":"2022-01-04T16:00:00.000Z","content":"设置\n\n如果这里的调节到最大还是满足不了你\n我们可以通过终端查看到我们鼠标的设置：\n读取当前的移动速度：\ndefaults read -g com.apple.mouse.scaling\n默认可能是：3 ， 我这里设置的：7\ndefaults write -g com.apple.mouse.scaling 7\n重启电脑生效\n","plink":"http://l-zm.com/magic-mouse/"},{"title":"Redis 配置文件说明","date":"2022-01-04T00:00:00.000Z","date_formatted":{"ll":"2022年1月4日","L":"2022/01/04","MM-DD":"01-04"},"updated":"2022-01-03T16:00:00.000Z","content":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148################################## NETWORK #####################################bind 127.0.0.1\t\t\t# 默认绑定本机所有ip地址 为了安全 可以只监听内网ipprotected-mode yes\t\t# 保护模式[无密码模式设置为no]port 6379 \t\t\t# 默认端口tcp-backlog 511\t\t\t# listen队列的长度timeout 0\t\t\t# 客户端空闲多少s(秒)后踢掉 0禁止tcp-keepalive 300\t\t# 检测挂掉的连接 单位s 0禁止################################# GENERAL #####################################daemonize no \t\t\t# 作为守护进程运行supervised no \t\t\t# 设成开机启动后 系统监控pidfile /var/run/redis_6379.pid # pid 位置loglevel notice \t\t# 设置服务端的日志级别，有下列几种选择\t\t\t\tdebug：记录详细信息，用于开发或调试\t\t\t\tverbose：提供很多有用的信息，\t\t\t\t\t但是又不像debug那么详尽，默认就是这一选项\t\t\t\tnotice：适度提醒，多用于产品环境\t\t\t\twarning：仅显示重要的警告信息logfile &quot;&quot;\t\t\t# 日志目录databases 16\t\t\t# 指定数据库的数量################################ SNAPSHOTTING  ################################save 900 1\t\t\t# 每900秒(15分钟)至少一次键值变更时被触发save 300 10\t\t\t# 每300秒(5分钟)至少10次键值变更时被触发save 60 10000\t\t\t# 每60秒至少10000次键值变更时被触发stop-writes-on-bgsave-error yes\t# 后台存储错误停止写rdbcompression yes\t\t# 存储至本地数据库时(持久化到rdb文件)是否压缩数据 默认为 yesrdbchecksum yes\t\t\t# 读取和写入的时候是否支持CRC64校验 默认是开启的dbfilename dump.rdb \t\t# 镜像文件的名字dir ./ \t\t\t\t# 当前工作目录 配置文件和镜像文件等都在此目录下################################# REPLICATION #################################slave-serve-stale-data yes\t# 当slave服务器和master服务器失去连接后，\t\t\t\t或者当数据正在复制传输的时候，如果此参数值设置“yes”\t\t\t\tslave服务器可以继续接受客户端的请求，\t\t\t\t否则，会返回给请求的客户端如下信息\t\t\t\t“SYNC with master in progress”slave-read-only yes\t\t# 是否允许slave服务器节点只提供读服务repl-diskless-sync no \t\t# disk较慢，并且网络较快的时候，\t\t\t\t可以用diskless。（默认用disk-based）repl-diskless-sync-delay 5\t# 备份等待延迟时间 secondsrepl-disable-tcp-nodelay no \t# 指定向slave同步数据时，是否禁用socket的NO_DELAY选 项。\t\t\t\t若配置为“yes”，则禁用NO_DELAY，则TCP协议栈会合并小包统一发送，\t\t\t\t这样可以减少主从节点间的包数量并节省带宽，但会增加数据同步到\t\t\t\tslave的时间。若配置为“no”，表明启用NO_DELAY，则TCP协议栈不\t\t\t\t会延迟小包的发送时机，这样数据同步的延时会减少，但需要更大的带宽。\t\t\t\t通常情况下，应该配置为no以降低同步延时，\t\t\t\t但在主从节点间网络负载已经很高的情况下，可以配置为yesslave-priority 100\t\t# 指定slave的优先级。在不只1个slave存在的部署环境下，\t\t\t\t当master宕机时，Redis Sentinel会将priority值最小的slave\t\t\t\t提升为master需要注意的是，若该配置项为0，则对应的slave永远\t\t\t\t不会自动提升为master############################## APPEND ONLY MODE ###############################appendonly no \t\t\t# 开启append only 模式之后，redis 会把所接收到的每一次写\t\t\t\t操作请求都追加到appendonly.aof 文件中，当redis 重新启动时，\t\t\t\t会从该文件恢复出之前的状态。但是这样会造成appendonly.aof \t\t\t\t文件过大，所以redis 还支持了BGREWRITEAOF 指令，\t\t\t\t对appendonly.aof 进行重新整理。默认是不开启的appendfilename &quot;appendonly.aof&quot;\t# 默认为appendonly.aofappendfsync everysec\t\t# 设置aof的同步频率，有三种选择\t\t\t\talways、everysec、no，默认是everysec表示每秒同步一次no-appendfsync-on-rewrite no \t# 指定是否在后台aof文件rewrite期间调用fsync，\t\t\t\t默认为no，表示要调用fsync（无论后台是否有子进程在刷盘）。\t\t\t\tRedis在后台写RDB文件或重写afo文件期间会存在大量磁盘IO，\t\t\t\t此时，在某些linux系统中，调用fsync可能会阻塞auto-aof-rewrite-percentage 100 # 指定Redis重写aof文件的条件，默认为100，\t\t\t\t表示与上次rewrite的aof文件大小相比，当前aof文件增长量超过上\t\t\t\t次afo文件大小的100%时，就会触发background rewrite。\t\t\t\t若配置为0，则会禁用自动rewriteauto-aof-rewrite-min-size 64mb \t# 指定触发rewrite的aof文件大小。\t\t\t\t若aof文件小于该值，即使当前文件的增量比例达到\t\t\t\tauto-aof-rewrite-percentage的配置值，也不会触发自动\t\t\t\trewrite。即这两个配置项同时满足时，才会触发rewriteaof-load-truncated yes \t\t# 会自动发布一个log给客户端然后load（默认）\t\t\t\t如果是no，用户必须手动redis-check-aof修复AOF文件才可以################################ LUA SCRIPTING  ###############################lua-time-limit 5000 \t\t# 一个Lua脚本最长的执行时间，单位为毫秒\t\t\t\t如果为0或负数表示无限执行时间，默认为5000################################## SLOW LOG ###################################slowlog-log-slower-than 10000 \t# 设定执行时间，单位是微秒，执行时长超过该时间\t\t\t\t的命令将会被记入log。-1表示不记录slow log; 0强制记录所有命令slowlog-max-len 128 \t\t# 最多保存 128 条日志################################ LATENCY MONITOR ##############################latency-monitor-threshold 0\t# 用LATENCY打印redis实例在跑命令时的耗时图表\t\t\t\t只记录大于等于下边设置的值的操作。0的话，就是关闭监视。\t\t\t\t可以动态开启############################# EVENT NOTIFICATION ##############################notify-keyspace-events &quot;&quot; \t# 如果开着开关。一个client进行了DEL操作在“foo”key\t\t\t\t上在database0上。两个消息将会发布通过 \t\t\t\tpub/sub默认所用的通知被禁用，因为用户通常不需要改特性\t\t\t\t并且该特性会有性能损耗############################### ADVANCED CONFIG ###############################hash-max-ziplist-entries 512 \t# hash类型的数据结构在编码上可以使用\t\t\t\tziplist和hashtable。ziplist的特点就是文件存储(以及内存存储)\t\t\t\t所需的空间较小,在内容较小时,性能和hashtable几乎一样.因此redis\t\t\t\t对hash类型默认采取ziplist。如果hash中条目的条目个数或者value\t\t\t\t长度达到阀值,将会被重构为hashtable\t\t\t\t这个参数指的是ziplist中允许存储的最大条目个数\t\t\t\t默认为512，建议为128hash-max-ziplist-value 64\t# ziplist中允许条目value值最大字节数，默认为64，建议为1024list-max-ziplist-size -2 \t# 对于list类型,将会采取ziplist,linkedlist两种编码类型list-compress-depth 0\t\t# 表示一个quicklist两端不被压缩的节点个数。\t\t\t\t注：这里的节点个数是指quicklist双向链表的节点个数，\t\t\t\t而不是指ziplist里面的数据项个数。实际上，一个\t\t\t\tquicklist节点上的ziplist，如果被压缩，就是整体被压缩的\t\t\t\t参数list-compress-depth的取值含义如下：\t\t\t\t0: 是个特殊值，表示都不压缩。这是Redis的默认值。\t\t\t\t1: 表示quicklist两端各有1个节点不压缩，中间的节点压缩。\t\t\t\t2: 表示quicklist两端各有2个节点不压缩，中间的节点压缩。\t\t\t\t3: 表示quicklist两端各有3个节点不压缩，中间的节点压缩。\t\t\t\t依此类推\t\t\t\t由于0是个特殊值，很容易看出quicklist的头节点和\t\t\t\t尾节点总是不被压缩的，以便于在表的两端进行快速存取set-max-intset-entries 512 \t# 当set类型中的数据都是数值类型，\t\t\t\t并且set中整型元素的数量不超过指定值时，使用特殊的编码方式zset-max-ziplist-entries 128 \t# 与hash和list类似 zset-max-ziplist-value 64 \t# zsort也采用如下的配置来选择是否进行特殊编码来节省空间hll-sparse-max-bytes 3000 \t# 这个限制包含了16个字节的头部，当一个HyperLogLog\t\t\t\t使用sparse representation 超过了这个显示，它就会转换到\t\t\t\tdense representation上activerehashing yes \t\t# 用来控制是否自动重建hash。Active rehashing每100微秒\t\t\t\t使用1微秒cpu时间排序，以重组Redis的hash表。重建是通过一种\t\t\t\tlazy方式，写入hash表的操作越多，需要执行rehashing的步骤\t\t\t\t也越多，如果服务器当前空闲，那么rehashing操作会一直执行。\t\t\t\t如果对实时性要求较高，难以接受redis时不时出现的2微秒的延迟，\t\t\t\t则可以设置activerehashing为no，\t\t\t\t否则建议设置为yes，以节省内存空间client-output-buffer-limit normal 0 0 0client-output-buffer-limit slave 256mb 64mb 60client-output-buffer-limit pubsub 32mb 8mb 60客户端buffer控制。在客户端与server进行的交互中,每个连接都会与一个buffer关联,此buffer用来队列化等待被client接受的响应信息。如果client不能及时的消费响应信息,那么buffer将会被不断积压而给server带来内存压力.如果buffer中积压的数据达到阀值,将会导致连接被关闭,buffer被移除。buffer控制类型包括:normal -&gt; 普通连接；slave -&gt;与slave之间的连接；pubsub -&gt;pub/sub类型连接，此类型的连接，往往会产生此种问题;因为pub端会密集的发布消息,但是sub端可能消费不足.指令格式:client-output-buffer-limit &lt;class&gt; &lt;hard&gt; &lt;soft&gt; &lt;seconds&gt;&quot;,其中hard表示buffer最大值,一旦达到阀值将立即关闭连接;soft表示&quot;容忍值&quot;,它和seconds配合,如果buffer值超过soft且持续时间达到了seconds,也将立即关闭连接,如果超过了soft但是在seconds之后，buffer数据小于了soft,连接将会被保留.其中hard和soft都设置为0,则表示禁用buffer控制.通常hard值大于softhz 10  \t\t\t\t# Redis server执行后台任务的频率,默认为10,\t\t\t\t此值越大表示redis对&quot;间歇性task&quot;的执行次数越频繁(次数/秒)。\t\t\t\t&quot;间歇性task&quot;包括&quot;过期集合&quot;检测、关闭&quot;空闲超时&quot;的连接等,此\t\t\t\t值必须大于0且小于500。此值过小就意味着更多的cpu周期消耗,\t\t\t\t后台task被轮询的次数更频繁。此值过大意味着&quot;内存敏感&quot;性较差。\t\t\t\t建议采用默认值aof-rewrite-incremental-fsync yes # aof rewrite过程中,是否采取增量文件同步策略\t\t\t\t默认为“yes”。 rewrite过程中,每32M数据进行一次文件同步\t\t\t\t这样可以减少aof大文件写入对磁盘的操作次数\n","thumbnail":"https://pic.imgdb.cn/item/626cdd0f239250f7c5494283.png","plink":"http://l-zm.com/redis-config-explan/"},{"title":"BigDecimal Java高精度运算","date":"2022-01-03T00:00:00.000Z","date_formatted":{"ll":"2022年1月3日","L":"2022/01/03","MM-DD":"01-03"},"updated":"2022-01-02T16:00:00.000Z","content":"不同舍入模式下的舍入操作汇总\n\n\nNUMBER\nUP\nDOWN\nCEILING\nFLOOR\nHALF_UP\nHALF_DOWN\nHALF_EVEN\n\n\n\n\n5.5\n6\n5\n6\n5\n6\n5\n6\n\n\n2.5\n3\n2\n3\n2\n3\n2\n2\n\n\n1.6\n2\n1\n2\n1\n2\n2\n2\n\n\n1.1\n2\n1\n2\n1\n1\n1\n1\n\n\n1.0\n1\n1\n1\n1\n1\n1\n1\n\n\n-1.0\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n\n\n-1.1\n-2\n-1\n-1\n-2\n-1\n-1\n-1\n\n\n-1.6\n-2\n-1\n-1\n-2\n-2\n-2\n-2\n\n\n-2.5\n-3\n-2\n-2\n-3\n-3\n-2\n-2\n\n\n-5.5\n-6\n-5\n-5\n-6\n-6\n-5\n-6\n\n\nUP 远离零方向舍入的舍入模式。始终对非零舍弃部分前面的数字加 1。注意，此舍入模式始终不会减少计算值的绝对值\nDOWN 向零方向舍入的舍入模式。从不对舍弃部分前面的数字加 1（即截尾）。注意，此舍入模式始终不会增加计算值的绝对值\nCEILING 向正无限大方向舍入的舍入模式。如果结果为正，则舍入行为类似于 RoundingMode.UP；如果结果为负，则舍入行为类似于 RoundingMode.DOWN。注意，此舍入模式始终不会减少计算值\nFLOOR 向负无限大方向舍入的舍入模式。如果结果为正，则舍入行为类似于 RoundingMode.DOWN；如果结果为负，则舍入行为类似于 RoundingMode.UP。注意，此舍入模式始终不会增加计算值\nHALF_UP 向最接近数字方向舍入的舍入模式，如果与两个相邻数字的距离相等，则向上舍入。如果被舍弃部分 &gt;= 0.5，则舍入行为同 RoundingMode.UP；否则舍入行为同 RoundingMode.DOWN。注意，此舍入模式就是通常学校里讲的四舍五入\nHALF_DOWN 向最接近数字方向舍入的舍入模式，如果与两个相邻数字的距离相等，则向下舍入。如果被舍弃部分 &gt; 0.5，则舍入行为同 RoundingMode.UP；否则舍入行为同 RoundingMode.DOWN\nHALF_EVEN 向最接近数字方向舍入的舍入模式，如果与两个相邻数字的距离相等，则向相邻的偶数舍入。如果舍弃部分左边的数字为奇数，则舍入行为同 RoundingMode.HALF_UP；如果为偶数，则舍入行为同 RoundingMode.HALF_DOWN。注意，在重复进行一系列计算时，此舍入模式可以在统计上将累加错误减到最小。此舍入模式也称为“银行家舍入法”，主要在美国使用。此舍入模式类似于 Java 中对 float 和 double 算法使用的舍入策略\nUNNECESSARY 用于断言请求的操作具有精确结果的舍入模式，因此不需要舍入。如果对生成精确结果的操作指定此舍入模式，则抛出 ArithmeticException\n","thumbnail":"https://pic.imgdb.cn/item/626ca558239250f7c5c3694f.png","plink":"http://l-zm.com/bigdecimal/"},{"title":"Mac 修改 Dock 栏的隐藏速度","date":"2022-01-02T00:00:00.000Z","date_formatted":{"ll":"2022年1月2日","L":"2022/01/02","MM-DD":"01-02"},"updated":"2022-01-01T16:00:00.000Z","content":"修改 Dock 栏显示隐藏的速度（ 0秒 | 0.5秒 | 默认是 1 ）\n$ defaults write com.apple.dock autohide-delay -float 0 &amp;&amp; killall Dock\n恢复默认设置\n$ defaults delete com.apple.Dock autohide-delay &amp;&amp; killall Dock\n","plink":"http://l-zm.com/mac-edit-dock-hidden-speed/"},{"title":"解除网页右键限制","date":"2022-01-02T00:00:00.000Z","date_formatted":{"ll":"2022年1月2日","L":"2022/01/02","MM-DD":"01-02"},"updated":"2022-01-01T16:00:00.000Z","content":"脚本\n1javascript:!function e(t)&#123;function n()&#123;&#125;function o(e)&#123;e[i].removeChild(e)&#125;function r(e)&#123;return[].slice.call(t.querySelectorAll(e))&#125;function c(t)&#123;function n()&#123;s(function()&#123;if(!o)try&#123;var n=t.contentDocument;n.body.childNodes.length&amp;&amp;(o=1,e(n))&#125;catch(e)&#123;o=0&#125;&#125;,100)&#125;a[l](function(e)&#123;t[&#x27;on&#x27;+e]=null&#125;);var o;n(),t.onload=n&#125;for(var i=&#x27;parentNode&#x27;,l=&#x27;forEach&#x27;,a=&#x27;contextmenu dragstart selectstart select copy beforecopy mouseup mousedown&#x27;.split(&#x27; &#x27;),u=setTimeout(n,0);u&gt;=0;u--)clearTimeout(u);for(u=setInterval(n,1e8);u&gt;=0;u--)clearInterval(u);var s=setTimeout;setTimeout=setInterval=n,r(&#x27;script&#x27;)[l](o);var m=[];r(&#x27;iframe,frame&#x27;)[l](function(e)&#123;m.push(e),e[i].replaceChild(t.createElement(&#x27;script&#x27;),e)&#125;);var f=t.documentElement.innerHTML;t.open(),t.write(&#x27;&lt;!DOCTYPE html&gt;&#x27;),t.close(),t.documentElement.innerHTML=f,r(&#x27;script&#x27;)[l](function(e)&#123;e[i].replaceChild(m.shift(),e)&#125;),r(&#x27;*&#x27;)[l](c),c(t),a[l](function(e)&#123;t.addEventListener(e,function(e)&#123;e.stopPropagation()&#125;,!0)&#125;);var p=t.createElement(&#x27;style&#x27;);p.innerHTML=&#x27;*&#123;-webkit-user-select:text!important;-moz-user-select:text!important;user-select:text!important;&#125;&#x27;,t.body.appendChild(p)&#125;(document);\n两种使用方法:\n\n浏览器: F12打开调试模式, 在控制台Console里面直接执行\n直接保存为书签, 在需要解除右键限制的网页直接点击书签即可 (推荐)\n\n","plink":"http://l-zm.com/remove-right-click-limit/"},{"title":"Linux 计划任务 CronTab","date":"2022-01-01T00:00:00.000Z","date_formatted":{"ll":"2022年1月1日","L":"2022/01/01","MM-DD":"01-01"},"updated":"2021-12-31T16:00:00.000Z","content":"\nCronTab 的语法\n* * * * * date &gt;&gt; /tmp/date.txt\n\n\n\n*\n*\n*\n*\n*\ndate &gt;&gt; /tmp/date.txt\n\n\n\n\n分钟\n小时\n几号\n几月\n星期\n需要执行的命令\n\n\n案例\n每一小时\n* */1 * * * /service/l-zm/request.sh\n每小时执行/etc/cron.hourly目录内的脚本\n01 * * * * root run-parts /etc/cron.hourly\n每小时的第3和第15分钟执行\n3,15 * * * * /service/l-zm/request.sh\n在上午8点到11点的第3和第15分钟执行\n3,15 8-11 * * * /service/l-zm/request.sh\n每隔两天的上午8点到11点的第3和第15分钟执行\n3,15 8-11 */2 * * date &gt;&gt; /tmp/date.txt\n每个星期一的上午8点到11点的第3和第15分钟执行\n3,15 8-11 * * 1 date &gt;&gt; /tmp/date.txt\n每晚的21:30\n30 21 * * * /service/l-zm/request.sh\n每月1、10、22日的4 : 45\n45 4 1,10,22 * * /service/l-zm/request.sh\n每周六、周日的1 : 10\n10 1 * * 6,0 /service/l-zm/request.sh\n每天18 : 00至23 : 00之间每隔30分钟\n0,30 18-23 * * * /service/l-zm/request.sh\n每星期六的晚上11 : 00 pm\n0 23 * * 6 /service/l-zm/request.sh\n晚上11点到早上7点之间，每隔一小时\n* 23-7/1 * * * /service/l-zm/request.sh\n每月的4号与每周一到周三的11点\n0 11 4 * mon-wed /service/l-zm/request.sh\n一月一号的4点\n0 4 1 jan * /service/l-zm/request.sh\n每秒执行一次\n1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162*/1 * * * * sleep 0s;date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 1s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 2s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 3s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 4s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 5s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 6s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 7s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 8s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 9s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 10s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 11s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 12s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 13s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 14s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 15s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 16s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 17s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 18s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 19s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 20s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 21s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 22s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 23s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 24s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 25s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 26s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 27s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 28s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 29s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 30s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 31s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 32s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 33s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 34s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 35s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 36s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 37s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 38s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 39s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 40s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 41s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 42s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 43s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 44s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 45s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 46s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 47s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 48s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 49s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 50s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 51s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 52s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 53s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 54s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 55s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 56s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 57s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 58s; date &gt;&gt; /tmp/date.txt*/1 * * * * sleep 59s; date &gt;&gt; /tmp/date.txt如果每秒没有循环连续 可以试试把 sleep 0s 删除, 在最后添加 sleep 60s (CentOS 和 Ubuntu 下不一样)\nCronTab 使用与解释\ncrontab -l 查看所有的计划任务\ncrontab -e 修改计划任务\nservice crond start 启动计划任务\nservice crond restart 重启计划任务\nservice crond reload 重新载入计划任务\n","thumbnail":"https://pic.imgdb.cn/item/626c9b44239250f7c5ac164d.png","plink":"http://l-zm.com/linux-crontab/"},{"title":"临时文档","date":"2022-01-01T00:00:00.000Z","date_formatted":{"ll":"2022年1月1日","L":"2022/01/01","MM-DD":"01-01"},"updated":"2021-12-31T16:00:00.000Z","content":"\n\n\nU2FsdGVkX1+lLyXGyfFl0MEtXilTDaOC371ZFEKsy77LZQ1J8meunBAGWqxIEVzD","plink":"http://l-zm.com/1/"},{"title":"404","date":"2022-04-30T07:14:00.000Z","updated":"2022-04-30T07:22:18.416Z","content":"adsfasdadsfafsf\n"},{"title":"About Me","date":"2022-04-25T15:48:16.425Z","date_formatted":{"ll":"2022年4月25日","L":"2022/04/25","MM-DD":"04-25"},"updated":"2022-04-25T07:48:16.425Z","content":"关于我\n","plink":"http://l-zm.com/about/"},{"title":"404","date":"2022-04-30T07:14:00.000Z","updated":"2022-04-30T07:18:04.754Z","content":"adsfasdadsfafsf\n"}]