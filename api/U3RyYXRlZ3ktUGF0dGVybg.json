{"title":"Java 23种设计模式之行为型模式「策略模式」Strategy Pattern","date":"2022-05-01T00:00:00.000Z","date_formatted":{"ll":"2022年5月1日","L":"2022/05/01","MM-DD":"05-01"},"link":"Strategy-Pattern","tags":["Strategy Pattern"],"categories":["Design Pattern","Java"],"updated":"2022-04-30T16:00:00.000Z","content":"<h2 id=\"策略模式---strategy-pattern\">策略模式 - Strategy Pattern<a title=\"#策略模式---strategy-pattern\" href=\"#策略模式---strategy-pattern\"></a></h2>\n<p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。</p>\n<p>在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的<code>context</code>对象。策略对象改变<code>context</code>对象的执行算法。</p>\n<p><strong>定义:</strong> 定义一系列的算法, 把它们一个个封装起来, 并且使它们可相互替换.<br>\n<strong>主要解决:</strong> 在有多种算法相似的情况下, 使用 <code>if...else</code> 所带来的复杂和难以维护.<br>\n<strong>何时使用:</strong> 一个系统有许多许多类, 而区分它们的只是他们直接的行为.<br>\n<strong>如何解决:</strong> 将这些算法封装成一个一个的类, 任意地替换.<br>\n<strong>关键代码:</strong> 实现同一个接口.</p>\n<p><strong>应用实例:</strong></p>\n<ul>\n<li>诸葛亮的锦囊妙计, 每一个锦囊就是一个策略.</li>\n<li>旅行的出游方式, 选择骑自行车、坐汽车, 每一种旅行方式都是一个策略.</li>\n<li>JAVA AWT 中的 LayoutManager.</li>\n</ul>\n<p><strong>优点:</strong></p>\n<ul>\n<li>算法可以自由切换。</li>\n<li>避免使用多重条件判断。</li>\n<li>扩展性良好。</li>\n</ul>\n<p><strong>缺点:</strong></p>\n<ul>\n<li>策略类会增多。</li>\n<li>所有策略类都需要对外暴露。</li>\n</ul>\n<p><strong>使用场景:</strong></p>\n<ul>\n<li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。</li>\n<li>2、一个系统需要动态地在几种算法中选择一种。</li>\n<li>3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</li>\n</ul>\n<p><strong>注意事项:</strong> 如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。</p>\n<h2 id=\"实现\">实现<a title=\"#实现\" href=\"#实现\"></a></h2>\n","prev":{"title":"Windows 11 设置状态栏时钟时间精确显示到秒教程","link":"Windows-11-Time-Second"},"next":{"title":"Java 23种设计模式之创建型模式「单例模式」Singleton Pattern","link":"Singleton-Pattern"},"plink":"http://l-zm.com/Strategy-Pattern/","toc":[{"id":"策略模式---strategy-pattern","title":"策略模式 - Strategy Pattern","index":"1"},{"id":"实现","title":"实现","index":"2"}],"reading_time":"492 字约 3 分钟"}