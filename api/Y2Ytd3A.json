{"title":"使用 Cloudflare 的 Workers 搭建免费代理节点","date":"2024-01-02T00:00:00.000Z","date_formatted":{"ll":"2024年1月2日","L":"2024/01/02","MM-DD":"01-02"},"thumbnail":"https://i.l-zm.com/i/20240126cf-wp.png","link":"cf-wp","tags":["VPN"],"categories":["VPN"],"updated":"2024-01-01T16:00:00.000Z","content":"<h3 id=\"cloudflare-官网\">Cloudflare 官网<a title=\"#cloudflare-官网\" href=\"#cloudflare-官网\"></a></h3>\n<ol>\n<li>打开 <code>cloudflare.com</code> 并登录 Cloudflare</li>\n<li>点击左侧: <code>Workers 和 Pages</code></li>\n<li>点击页面: <code>创建应用程序</code></li>\n<li>在<code>Workers</code>标签下点击: <code>创建 Worker</code>, 名称自定义, 比如叫: vless</li>\n<li>点击: <code>部署</code> &gt; 恭喜！您的 Worker 已部署到以下区域：全球。</li>\n</ol>\n<h3 id=\"编辑代码\">编辑代码<a title=\"#编辑代码\" href=\"#编辑代码\"></a></h3>\n<ul>\n<li>代码1: <a href=\"https://github.com/zizifn/edgetunnel/blob/main/src/worker-vless.js\" target=\"_blank\">https://github.com/zizifn/edgetunnel/blob/main/src/worker-vless.js</a></li>\n<li>代码2: <a href=\"https://github.com/3Kmfi6HP/EDtunnel/blob/main/_worker.js\" target=\"_blank\">https://github.com/3Kmfi6HP/EDtunnel/blob/main/_worker.js</a></li>\n<li>代码3: <a href=\"https://github.com/yonggekkk/Cloudflare-workers-pages-vless/blob/main/_worker.js\" target=\"_blank\">https://github.com/yonggekkk/Cloudflare-workers-pages-vless/blob/main/_worker.js</a></li>\n</ul>\n<ol>\n<li>点击: <code>编辑代码</code></li>\n<li>删除默认的所有代码</li>\n<li>复制上面<code>代码1</code>的所有代码</li>\n<li>修改以下代码:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第7行和第9行代码: 生成自己的ID和配置proxyIP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> userID = <span class=\"string\">&#x27;d342d11e-d424-4583-b36e-524ab1f0afa4&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> proxyIP = <span class=\"string\">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>proxyIP可选的五个反代 cf 域名</p>\n<ul>\n<li><code>cdn-all.xn--b6gac.eu.org</code></li>\n<li><code>cdn.xn--b6gac.eu.org</code></li>\n<li><code>cdn-b100.xn--b6gac.eu.org</code></li>\n<li><code>edgetunnel.anycast.eu.org</code></li>\n<li><code>cdn.anycast.eu.org</code></li>\n</ul>\n</blockquote>\n<ol>\n<li>点击右侧: <code>保存并部署</code></li>\n<li>返回Worker管理页面</li>\n<li>点击: <code>触发器</code></li>\n<li>点击: <code>添加自定义域</code></li>\n<li>输入一个当前绑定域名的一个二级域名, 比如: <code>vless.你的域名.com</code></li>\n<li>最后点击: <code>添加自定义域</code></li>\n<li>然后打开: <code>https://vless.你的域名.com/你的userId</code></li>\n<li>即可得到自己的v2ray地址, 然后添加v2ray (复制链接到v2rayN直接粘贴)</li>\n</ol>\n<h3 id=\"配置v2rayn\">配置v2rayN<a title=\"#配置v2rayn\" href=\"#配置v2rayn\"></a></h3>\n<ol>\n<li>右键刚刚添加的节点, 点击: <code>编辑服务器</code></li>\n<li>地址(address)输入自己的本地网络的优选IP (优选IP方法看下方)</li>\n<li>完成, 恭喜</li>\n</ol>\n<hr>\n<h3 id=\"如何生成uuid\">如何生成UUID<a title=\"#如何生成uuid\" href=\"#如何生成uuid\"></a></h3>\n<blockquote>\n<p>生成UUID<br>\n<a href=\"https://l-zm.com/vpn-uuid\" target=\"_blank\">https://l-zm.com/vpn-uuid</a></p>\n</blockquote>\n<hr>\n<h3 id=\"如何优选ip\">如何优选IP<a title=\"#如何优选ip\" href=\"#如何优选ip\"></a></h3>\n<blockquote>\n<p>使用 better-cloudflare-ip 在Windows上优选 Cloudflare IP<br>\n<a href=\"https://l-zm.com/win-cf-ip\" target=\"_blank\">https://l-zm.com/win-cf-ip</a></p>\n</blockquote>\n<blockquote>\n<p>使用 iSH App在iPhone上优选 Cloudflare IP<br>\n<a href=\"https://l-zm.com/ish-ios\" target=\"_blank\">https://l-zm.com/ish-ios</a></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>参考资料:</p>\n<p>CF workers vless永久免费节点搭建教程：优选反代IP+优选域名多平台一键脚本发布，支持自定义伪装网页，13个端口随便换，独家探讨CF免费代理节点的敏感安全问题<br>\n<a href=\"https://ygkkk.blogspot.com/2023/07/cfworkers-vless.html\" target=\"_blank\">https://ygkkk.blogspot.com/2023/07/cfworkers-vless.html</a></p>\n<p>永久免费高速节点搭建教程：晚高峰4k视频秒开 ；worker-vless 节点搭建；使用优选IP、优选域名<br>\n<a href=\"https://andytreasurebox.blogspot.com/2023/12/4k-worker-vless-ip.html\" target=\"_blank\">https://andytreasurebox.blogspot.com/2023/12/4k-worker-vless-ip.html</a></p>\n</blockquote>\n<hr>\n<hr>\n<details>\n<summary><strong>代码1 详情</strong></summary>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &lt;!--GAMFC--&gt;version base on commit 43fad05dcdae3b723c53c226f8181fc5bd47223e, time is 2023-06-22 15:20:02 UTC&lt;!--GAMFC-END--&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">// @ts-ignore</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;cloudflare:sockets&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// How to generate your own UUID:</span></span><br><span class=\"line\"><span class=\"comment\">// [Windows] Press &quot;Win + R&quot;, input cmd and run:  Powershell -NoExit -Command &quot;[guid]::NewGuid()&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> userID = <span class=\"string\">&#x27;d342d11e-d424-4583-b36e-524ab1f0afa4&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> proxyIP = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"title function_\">isValidUUID</span>(userID)) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;uuid is not valid&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">import(&quot;@cloudflare/workers-types&quot;).Request</span>&#125; <span class=\"variable\">request</span></span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">&#123;UUID: string, PROXYIP: string</span>&#125;&#125; env</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">import(&quot;@cloudflare/workers-types&quot;).ExecutionContext</span>&#125; <span class=\"variable\">ctx</span></span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Promise&lt;Response&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">fetch</span>(<span class=\"params\">request, env, ctx</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tuserID = env.<span class=\"property\">UUID</span> || userID;</span><br><span class=\"line\">\t\t\tproxyIP = env.<span class=\"property\">PROXYIP</span> || proxyIP;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> upgradeHeader = request.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;Upgrade&#x27;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!upgradeHeader || upgradeHeader !== <span class=\"string\">&#x27;websocket&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> url = <span class=\"keyword\">new</span> <span class=\"title function_\">URL</span>(request.<span class=\"property\">url</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">switch</span> (url.<span class=\"property\">pathname</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(request.<span class=\"property\">cf</span>), &#123; <span class=\"attr\">status</span>: <span class=\"number\">200</span> &#125;);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">`/<span class=\"subst\">$&#123;userID&#125;</span>`</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">const</span> vlessConfig = <span class=\"title function_\">getVLESSConfig</span>(userID, request.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;Host&#x27;</span>));</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(<span class=\"string\">`<span class=\"subst\">$&#123;vlessConfig&#125;</span>`</span>, &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"attr\">status</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;text/plain;charset=utf-8&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">default</span>:</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(<span class=\"string\">&#x27;Not found&#x27;</span>, &#123; <span class=\"attr\">status</span>: <span class=\"number\">404</span> &#125;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"title function_\">vlessOverWSHandler</span>(request);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">Error</span>&#125; */</span> <span class=\"keyword\">let</span> e = err;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(e.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">import(&quot;@cloudflare/workers-types&quot;).Request</span>&#125; <span class=\"variable\">request</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">vlessOverWSHandler</span>(<span class=\"params\">request</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">import(&quot;@cloudflare/workers-types&quot;).WebSocket[]</span>&#125; */</span></span><br><span class=\"line\">\t<span class=\"comment\">// @ts-ignore</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> webSocketPair = <span class=\"keyword\">new</span> <span class=\"title class_\">WebSocketPair</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> [client, webSocket] = <span class=\"title class_\">Object</span>.<span class=\"title function_\">values</span>(webSocketPair);</span><br><span class=\"line\"></span><br><span class=\"line\">\twebSocket.<span class=\"title function_\">accept</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> address = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> portWithRandomLog = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"title function_\">log</span> = (<span class=\"params\"><span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">string</span>&#125; */</span> info, <span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">string | undefined</span>&#125; */</span> event</span>) =&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`[<span class=\"subst\">$&#123;address&#125;</span>:<span class=\"subst\">$&#123;portWithRandomLog&#125;</span>] <span class=\"subst\">$&#123;info&#125;</span>`</span>, event || <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> earlyDataHeader = request.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;sec-websocket-protocol&#x27;</span>) || <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> readableWebSocketStream = <span class=\"title function_\">makeReadableWebSocketStream</span>(webSocket, earlyDataHeader, log);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">&#123; value: import(&quot;@cloudflare/workers-types&quot;).Socket | null</span>&#125;&#125;*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> remoteSocketWapper = &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">value</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> udpStreamWrite = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> isDns = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// ws --&gt; remote</span></span><br><span class=\"line\">\treadableWebSocketStream.<span class=\"title function_\">pipeTo</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">WritableStream</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">async</span> <span class=\"title function_\">write</span>(<span class=\"params\">chunk, controller</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isDns &amp;&amp; udpStreamWrite) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"title function_\">udpStreamWrite</span>(chunk);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (remoteSocketWapper.<span class=\"property\">value</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> writer = remoteSocketWapper.<span class=\"property\">value</span>.<span class=\"property\">writable</span>.<span class=\"title function_\">getWriter</span>()</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">await</span> writer.<span class=\"title function_\">write</span>(chunk);</span><br><span class=\"line\">\t\t\t\twriter.<span class=\"title function_\">releaseLock</span>();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">\t\t\t\thasError,</span><br><span class=\"line\">\t\t\t\tmessage,</span><br><span class=\"line\">\t\t\t\tportRemote = <span class=\"number\">443</span>,</span><br><span class=\"line\">\t\t\t\taddressRemote = <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">\t\t\t\trawDataIndex,</span><br><span class=\"line\">\t\t\t\tvlessVersion = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>([<span class=\"number\">0</span>, <span class=\"number\">0</span>]),</span><br><span class=\"line\">\t\t\t\tisUDP,</span><br><span class=\"line\">\t\t\t&#125; = <span class=\"title function_\">processVlessHeader</span>(chunk, userID);</span><br><span class=\"line\">\t\t\taddress = addressRemote;</span><br><span class=\"line\">\t\t\tportWithRandomLog = <span class=\"string\">`<span class=\"subst\">$&#123;portRemote&#125;</span>--<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.random()&#125;</span> <span class=\"subst\">$&#123;isUDP ? <span class=\"string\">&#x27;udp &#x27;</span> : <span class=\"string\">&#x27;tcp &#x27;</span></span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">\t\t\t\t&#125;</span> `</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (hasError) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// controller.error(message);</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(message); <span class=\"comment\">// cf seems has bug, controller.error will not end stream</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// webSocket.close(1000, message);</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// if UDP but port not DNS port, close it</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isUDP) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (portRemote === <span class=\"number\">53</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tisDns = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// controller.error(&#x27;UDP proxy only enable for DNS which is port 53&#x27;);</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;UDP proxy only enable for DNS which is port 53&#x27;</span>); <span class=\"comment\">// cf seems has bug, controller.error will not end stream</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// [&quot;version&quot;, &quot;附加信息长度 N&quot;]</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> vlessResponseHeader = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>([vlessVersion[<span class=\"number\">0</span>], <span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> rawClientData = chunk.<span class=\"title function_\">slice</span>(rawDataIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> support udp here when cf runtime has udp support</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isDns) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> &#123; write &#125; = <span class=\"keyword\">await</span> <span class=\"title function_\">handleUDPOutBound</span>(webSocket, vlessResponseHeader, log);</span><br><span class=\"line\">\t\t\t\tudpStreamWrite = write;</span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">udpStreamWrite</span>(rawClientData);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">handleTCPOutBound</span>(remoteSocketWapper, addressRemote, portRemote, rawClientData, webSocket, vlessResponseHeader, log);</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"title function_\">close</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">log</span>(<span class=\"string\">`readableWebSocketStream is close`</span>);</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"title function_\">abort</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">log</span>(<span class=\"string\">`readableWebSocketStream is abort`</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(reason));</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;)).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;readableWebSocketStream pipeTo error&#x27;</span>, err);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(<span class=\"literal\">null</span>, &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">status</span>: <span class=\"number\">101</span>,</span><br><span class=\"line\">\t\t<span class=\"comment\">// @ts-ignore</span></span><br><span class=\"line\">\t\t<span class=\"attr\">webSocket</span>: client,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Handles outbound TCP connections.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">any</span>&#125; remoteSocket </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; addressRemote The remote address to connect to.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; portRemote The remote port to connect to.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Uint8Array</span>&#125; rawClientData The raw client data to write.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">import(&quot;@cloudflare/workers-types&quot;).WebSocket</span>&#125; webSocket The WebSocket to pass the remote socket to.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Uint8Array</span>&#125; vlessResponseHeader The VLESS response header.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">function</span>&#125; log The logging function.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Promise&lt;void&gt;</span>&#125; The remote socket.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handleTCPOutBound</span>(<span class=\"params\">remoteSocket, addressRemote, portRemote, rawClientData, webSocket, vlessResponseHeader, log,</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">connectAndWrite</span>(<span class=\"params\">address, port</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">import(&quot;@cloudflare/workers-types&quot;).Socket</span>&#125; */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> tcpSocket = <span class=\"title function_\">connect</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">hostname</span>: address,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">port</span>: port,</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tremoteSocket.<span class=\"property\">value</span> = tcpSocket;</span><br><span class=\"line\">\t\t<span class=\"title function_\">log</span>(<span class=\"string\">`connected to <span class=\"subst\">$&#123;address&#125;</span>:<span class=\"subst\">$&#123;port&#125;</span>`</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> writer = tcpSocket.<span class=\"property\">writable</span>.<span class=\"title function_\">getWriter</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">await</span> writer.<span class=\"title function_\">write</span>(rawClientData); <span class=\"comment\">// first write, nomal is tls client hello</span></span><br><span class=\"line\">\t\twriter.<span class=\"title function_\">releaseLock</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> tcpSocket;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// if the cf connect tcp socket have no incoming data, we retry to redirect ip</span></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">retry</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> tcpSocket = <span class=\"keyword\">await</span> <span class=\"title function_\">connectAndWrite</span>(proxyIP || addressRemote, portRemote)</span><br><span class=\"line\">\t\t<span class=\"comment\">// no matter retry success or not, close websocket</span></span><br><span class=\"line\">\t\ttcpSocket.<span class=\"property\">closed</span>.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;retry tcpSocket closed error&#x27;</span>, error);</span><br><span class=\"line\">\t\t&#125;).<span class=\"title function_\">finally</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">safeCloseWebSocket</span>(webSocket);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t<span class=\"title function_\">remoteSocketToWS</span>(tcpSocket, webSocket, vlessResponseHeader, <span class=\"literal\">null</span>, log);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> tcpSocket = <span class=\"keyword\">await</span> <span class=\"title function_\">connectAndWrite</span>(addressRemote, portRemote);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// when remoteSocket is ready, pass to websocket</span></span><br><span class=\"line\">\t<span class=\"comment\">// remote--&gt; ws</span></span><br><span class=\"line\">\t<span class=\"title function_\">remoteSocketToWS</span>(tcpSocket, webSocket, vlessResponseHeader, retry, log);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">import(&quot;@cloudflare/workers-types&quot;).WebSocket</span>&#125; <span class=\"variable\">webSocketServer</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; earlyDataHeader for ws 0rtt</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">(info: string)=&gt; void</span>&#125; log for ws 0rtt</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">makeReadableWebSocketStream</span>(<span class=\"params\">webSocketServer, earlyDataHeader, log</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> readableStreamCancel = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> stream = <span class=\"keyword\">new</span> <span class=\"title class_\">ReadableStream</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">start</span>(<span class=\"params\">controller</span>) &#123;</span><br><span class=\"line\">\t\t\twebSocketServer.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (readableStreamCancel) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> message = event.<span class=\"property\">data</span>;</span><br><span class=\"line\">\t\t\t\tcontroller.<span class=\"title function_\">enqueue</span>(message);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// The event means that the client closed the client -&gt; server stream.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// However, the server -&gt; client stream is still open until you call close() on the server side.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// The WebSocket protocol says that a separate close message must be sent in each direction to fully close the socket.</span></span><br><span class=\"line\">\t\t\twebSocketServer.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;close&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// client send close, need close server</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// if stream is cancel, skip controller.close</span></span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">safeCloseWebSocket</span>(webSocketServer);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (readableStreamCancel) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tcontroller.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t\twebSocketServer.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;webSocketServer has error&#x27;</span>);</span><br><span class=\"line\">\t\t\t\tcontroller.<span class=\"title function_\">error</span>(err);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// for ws 0rtt</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> &#123; earlyData, error &#125; = <span class=\"title function_\">base64ToArrayBuffer</span>(earlyDataHeader);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">\t\t\t\tcontroller.<span class=\"title function_\">error</span>(error);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (earlyData) &#123;</span><br><span class=\"line\">\t\t\t\tcontroller.<span class=\"title function_\">enqueue</span>(earlyData);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"title function_\">pull</span>(<span class=\"params\">controller</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// if ws can stop read if stream is full, we can implement backpressure</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// https://streams.spec.whatwg.org/#example-rs-push-backpressure</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"title function_\">cancel</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 1. pipe WritableStream has error, this cancel will called, so ws handle server close into here</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2. if readableStream is cancel, all controller.close/enqueue need skip,</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3. but from testing controller.error still work even if readableStream is cancel</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (readableStreamCancel) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">log</span>(<span class=\"string\">`ReadableStream was canceled, due to <span class=\"subst\">$&#123;reason&#125;</span>`</span>)</span><br><span class=\"line\">\t\t\treadableStreamCancel = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">safeCloseWebSocket</span>(webSocketServer);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> stream;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://xtls.github.io/development/protocols/vless.html</span></span><br><span class=\"line\"><span class=\"comment\">// https://github.com/zizifn/excalidraw-backup/blob/main/v2ray-protocol.excalidraw</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\"> ArrayBuffer</span>&#125; vlessBuffer </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; userID </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">processVlessHeader</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">\tvlessBuffer,</span></span><br><span class=\"line\"><span class=\"params\">\tuserID</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (vlessBuffer.<span class=\"property\">byteLength</span> &lt; <span class=\"number\">24</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">hasError</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&#x27;invalid data&#x27;</span>,</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> version = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(vlessBuffer.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> isValidUser = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> isUDP = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"title function_\">stringify</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(vlessBuffer.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>, <span class=\"number\">17</span>))) === userID) &#123;</span><br><span class=\"line\">\t\tisValidUser = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!isValidUser) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">hasError</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&#x27;invalid user&#x27;</span>,</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> optLength = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(vlessBuffer.<span class=\"title function_\">slice</span>(<span class=\"number\">17</span>, <span class=\"number\">18</span>))[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"comment\">//skip opt for now</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> command = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(</span><br><span class=\"line\">\t\tvlessBuffer.<span class=\"title function_\">slice</span>(<span class=\"number\">18</span> + optLength, <span class=\"number\">18</span> + optLength + <span class=\"number\">1</span>)</span><br><span class=\"line\">\t)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 0x01 TCP</span></span><br><span class=\"line\">\t<span class=\"comment\">// 0x02 UDP</span></span><br><span class=\"line\">\t<span class=\"comment\">// 0x03 MUX</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (command === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (command === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\tisUDP = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">hasError</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">`command <span class=\"subst\">$&#123;command&#125;</span> is not support, command 01-tcp,02-udp,03-mux`</span>,</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> portIndex = <span class=\"number\">18</span> + optLength + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> portBuffer = vlessBuffer.<span class=\"title function_\">slice</span>(portIndex, portIndex + <span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// port is big-Endian in raw data etc 80 == 0x005d</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> portRemote = <span class=\"keyword\">new</span> <span class=\"title class_\">DataView</span>(portBuffer).<span class=\"title function_\">getUint16</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> addressIndex = portIndex + <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> addressBuffer = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(</span><br><span class=\"line\">\t\tvlessBuffer.<span class=\"title function_\">slice</span>(addressIndex, addressIndex + <span class=\"number\">1</span>)</span><br><span class=\"line\">\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 1--&gt; ipv4  addressLength =4</span></span><br><span class=\"line\">\t<span class=\"comment\">// 2--&gt; domain name addressLength=addressBuffer[1]</span></span><br><span class=\"line\">\t<span class=\"comment\">// 3--&gt; ipv6  addressLength =16</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> addressType = addressBuffer[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> addressLength = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> addressValueIndex = addressIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> addressValue = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (addressType) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\taddressLength = <span class=\"number\">4</span>;</span><br><span class=\"line\">\t\t\taddressValue = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(</span><br><span class=\"line\">\t\t\t\tvlessBuffer.<span class=\"title function_\">slice</span>(addressValueIndex, addressValueIndex + addressLength)</span><br><span class=\"line\">\t\t\t).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\taddressLength = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(</span><br><span class=\"line\">\t\t\t\tvlessBuffer.<span class=\"title function_\">slice</span>(addressValueIndex, addressValueIndex + <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t)[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\taddressValueIndex += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\taddressValue = <span class=\"keyword\">new</span> <span class=\"title class_\">TextDecoder</span>().<span class=\"title function_\">decode</span>(</span><br><span class=\"line\">\t\t\t\tvlessBuffer.<span class=\"title function_\">slice</span>(addressValueIndex, addressValueIndex + addressLength)</span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\taddressLength = <span class=\"number\">16</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> dataView = <span class=\"keyword\">new</span> <span class=\"title class_\">DataView</span>(</span><br><span class=\"line\">\t\t\t\tvlessBuffer.<span class=\"title function_\">slice</span>(addressValueIndex, addressValueIndex + addressLength)</span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2001:0db8:85a3:0000:0000:8a2e:0370:7334</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> ipv6 = [];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t\tipv6.<span class=\"title function_\">push</span>(dataView.<span class=\"title function_\">getUint16</span>(i * <span class=\"number\">2</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\taddressValue = ipv6.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;:&#x27;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// seems no need add [] for ipv6</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"attr\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">hasError</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">`invild  addressType is <span class=\"subst\">$&#123;addressType&#125;</span>`</span>,</span><br><span class=\"line\">\t\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!addressValue) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">hasError</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">`addressValue is empty, addressType is <span class=\"subst\">$&#123;addressType&#125;</span>`</span>,</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">hasError</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">addressRemote</span>: addressValue,</span><br><span class=\"line\">\t\taddressType,</span><br><span class=\"line\">\t\tportRemote,</span><br><span class=\"line\">\t\t<span class=\"attr\">rawDataIndex</span>: addressValueIndex + addressLength,</span><br><span class=\"line\">\t\t<span class=\"attr\">vlessVersion</span>: version,</span><br><span class=\"line\">\t\tisUDP,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">import(&quot;@cloudflare/workers-types&quot;).Socket</span>&#125; remoteSocket </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">import(&quot;@cloudflare/workers-types&quot;).WebSocket</span>&#125; webSocket </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ArrayBuffer</span>&#125; vlessResponseHeader </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">(() =&gt; Promise&lt;void&gt;) | null</span>&#125; <span class=\"variable\">retry</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; log </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">remoteSocketToWS</span>(<span class=\"params\">remoteSocket, webSocket, vlessResponseHeader, retry, log</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// remote--&gt; ws</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> remoteChunkCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> chunks = [];</span><br><span class=\"line\">\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">ArrayBuffer | null</span>&#125; */</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> vlessHeader = vlessResponseHeader;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> hasIncomingData = <span class=\"literal\">false</span>; <span class=\"comment\">// check if remoteSocket has incoming data</span></span><br><span class=\"line\">\t<span class=\"keyword\">await</span> remoteSocket.<span class=\"property\">readable</span></span><br><span class=\"line\">\t\t.<span class=\"title function_\">pipeTo</span>(</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">WritableStream</span>(&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">start</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Uint8Array</span>&#125; chunk </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; controller </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t */</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">async</span> <span class=\"title function_\">write</span>(<span class=\"params\">chunk, controller</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\thasIncomingData = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// remoteChunkCount++;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (webSocket.<span class=\"property\">readyState</span> !== <span class=\"variable constant_\">WS_READY_STATE_OPEN</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tcontroller.<span class=\"title function_\">error</span>(</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">&#x27;webSocket.readyState is not open, maybe close&#x27;</span></span><br><span class=\"line\">\t\t\t\t\t\t);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (vlessHeader) &#123;</span><br><span class=\"line\">\t\t\t\t\t\twebSocket.<span class=\"title function_\">send</span>(<span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([vlessHeader, chunk]).<span class=\"title function_\">arrayBuffer</span>());</span><br><span class=\"line\">\t\t\t\t\t\tvlessHeader = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// seems no need rate limit this, CF seems fix this??..</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// if (remoteChunkCount &gt; 20000) &#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// \t// cf one package is 4096 byte(4kb),  4096 * 20000 = 80M</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// \tawait delay(1);</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// &#125;</span></span><br><span class=\"line\">\t\t\t\t\t\twebSocket.<span class=\"title function_\">send</span>(chunk);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">close</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"title function_\">log</span>(<span class=\"string\">`remoteConnection!.readable is close with hasIncomingData is <span class=\"subst\">$&#123;hasIncomingData&#125;</span>`</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// safeCloseWebSocket(webSocket); // no need server close websocket frist for some case will casue HTTP ERR_CONTENT_LENGTH_MISMATCH issue, client will send close event anyway.</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">abort</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`remoteConnection!.readable abort`</span>, reason);</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t\t.<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">`remoteSocketToWS has exception `</span>,</span><br><span class=\"line\">\t\t\t\terror.<span class=\"property\">stack</span> || error</span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">safeCloseWebSocket</span>(webSocket);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// seems is cf connect socket have error,</span></span><br><span class=\"line\">\t<span class=\"comment\">// 1. Socket.closed will have error</span></span><br><span class=\"line\">\t<span class=\"comment\">// 2. Socket.readable will be close without any data coming</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hasIncomingData === <span class=\"literal\">false</span> &amp;&amp; retry) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">log</span>(<span class=\"string\">`retry`</span>)</span><br><span class=\"line\">\t\t<span class=\"title function_\">retry</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; base64Str </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">base64ToArrayBuffer</span>(<span class=\"params\">base64Str</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!base64Str) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123; <span class=\"attr\">error</span>: <span class=\"literal\">null</span> &#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// go use modified Base64 for URL rfc4648 which js atob not support</span></span><br><span class=\"line\">\t\tbase64Str = base64Str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/-/g</span>, <span class=\"string\">&#x27;+&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/_/g</span>, <span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> decode = <span class=\"title function_\">atob</span>(base64Str);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> arryBuffer = <span class=\"title class_\">Uint8Array</span>.<span class=\"title function_\">from</span>(decode, <span class=\"function\">(<span class=\"params\">c</span>) =&gt;</span> c.<span class=\"title function_\">charCodeAt</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123; <span class=\"attr\">earlyData</span>: arryBuffer.<span class=\"property\">buffer</span>, <span class=\"attr\">error</span>: <span class=\"literal\">null</span> &#125;;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123; error &#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This is not real UUID validation</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; uuid </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isValidUUID</span>(<span class=\"params\">uuid</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> uuidRegex = <span class=\"regexp\">/^[0-9a-f]&#123;8&#125;-[0-9a-f]&#123;4&#125;-[4][0-9a-f]&#123;3&#125;-[89ab][0-9a-f]&#123;3&#125;-[0-9a-f]&#123;12&#125;$/i</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> uuidRegex.<span class=\"title function_\">test</span>(uuid);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">WS_READY_STATE_OPEN</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">WS_READY_STATE_CLOSING</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Normally, WebSocket will not has exceptions when close.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">import(&quot;@cloudflare/workers-types&quot;).WebSocket</span>&#125; <span class=\"variable\">socket</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">safeCloseWebSocket</span>(<span class=\"params\">socket</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (socket.<span class=\"property\">readyState</span> === <span class=\"variable constant_\">WS_READY_STATE_OPEN</span> || socket.<span class=\"property\">readyState</span> === <span class=\"variable constant_\">WS_READY_STATE_CLOSING</span>) &#123;</span><br><span class=\"line\">\t\t\tsocket.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;safeCloseWebSocket error&#x27;</span>, error);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> byteToHex = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; ++i) &#123;</span><br><span class=\"line\">\tbyteToHex.<span class=\"title function_\">push</span>((i + <span class=\"number\">256</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>).<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">unsafeStringify</span>(<span class=\"params\">arr, offset = <span class=\"number\">0</span></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (byteToHex[arr[offset + <span class=\"number\">0</span>]] + byteToHex[arr[offset + <span class=\"number\">1</span>]] + byteToHex[arr[offset + <span class=\"number\">2</span>]] + byteToHex[arr[offset + <span class=\"number\">3</span>]] + <span class=\"string\">&quot;-&quot;</span> + byteToHex[arr[offset + <span class=\"number\">4</span>]] + byteToHex[arr[offset + <span class=\"number\">5</span>]] + <span class=\"string\">&quot;-&quot;</span> + byteToHex[arr[offset + <span class=\"number\">6</span>]] + byteToHex[arr[offset + <span class=\"number\">7</span>]] + <span class=\"string\">&quot;-&quot;</span> + byteToHex[arr[offset + <span class=\"number\">8</span>]] + byteToHex[arr[offset + <span class=\"number\">9</span>]] + <span class=\"string\">&quot;-&quot;</span> + byteToHex[arr[offset + <span class=\"number\">10</span>]] + byteToHex[arr[offset + <span class=\"number\">11</span>]] + byteToHex[arr[offset + <span class=\"number\">12</span>]] + byteToHex[arr[offset + <span class=\"number\">13</span>]] + byteToHex[arr[offset + <span class=\"number\">14</span>]] + byteToHex[arr[offset + <span class=\"number\">15</span>]]).<span class=\"title function_\">toLowerCase</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">stringify</span>(<span class=\"params\">arr, offset = <span class=\"number\">0</span></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> uuid = <span class=\"title function_\">unsafeStringify</span>(arr, offset);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"title function_\">isValidUUID</span>(uuid)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&quot;Stringified UUID is invalid&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> uuid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">import(&quot;@cloudflare/workers-types&quot;).WebSocket</span>&#125; webSocket </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ArrayBuffer</span>&#125; vlessResponseHeader </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">(string)=&gt; void</span>&#125; log </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handleUDPOutBound</span>(<span class=\"params\">webSocket, vlessResponseHeader, log</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> isVlessHeaderSent = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> transformStream = <span class=\"keyword\">new</span> <span class=\"title class_\">TransformStream</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">start</span>(<span class=\"params\">controller</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"title function_\">transform</span>(<span class=\"params\">chunk, controller</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// udp message 2 byte is the the length of udp data</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> this should have bug, beacsue maybe udp chunk can be in two websocket message</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; chunk.<span class=\"property\">byteLength</span>;) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> lengthBuffer = chunk.<span class=\"title function_\">slice</span>(index, index + <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> udpPakcetLength = <span class=\"keyword\">new</span> <span class=\"title class_\">DataView</span>(lengthBuffer).<span class=\"title function_\">getUint16</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> udpData = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(</span><br><span class=\"line\">\t\t\t\t\tchunk.<span class=\"title function_\">slice</span>(index + <span class=\"number\">2</span>, index + <span class=\"number\">2</span> + udpPakcetLength)</span><br><span class=\"line\">\t\t\t\t);</span><br><span class=\"line\">\t\t\t\tindex = index + <span class=\"number\">2</span> + udpPakcetLength;</span><br><span class=\"line\">\t\t\t\tcontroller.<span class=\"title function_\">enqueue</span>(udpData);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"title function_\">flush</span>(<span class=\"params\">controller</span>) &#123;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// only handle dns udp for now</span></span><br><span class=\"line\">\ttransformStream.<span class=\"property\">readable</span>.<span class=\"title function_\">pipeTo</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">WritableStream</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">async</span> <span class=\"title function_\">write</span>(<span class=\"params\">chunk</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> resp = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;https://1.1.1.1/dns-query&#x27;</span>,</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">&#x27;content-type&#x27;</span>: <span class=\"string\">&#x27;application/dns-message&#x27;</span>,</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">body</span>: chunk,</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> dnsQueryResult = <span class=\"keyword\">await</span> resp.<span class=\"title function_\">arrayBuffer</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> udpSize = dnsQueryResult.<span class=\"property\">byteLength</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// console.log([...new Uint8Array(dnsQueryResult)].map((x) =&gt; x.toString(16)));</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> udpSizeBuffer = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>([(udpSize &gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>, udpSize &amp; <span class=\"number\">0xff</span>]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (webSocket.<span class=\"property\">readyState</span> === <span class=\"variable constant_\">WS_READY_STATE_OPEN</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">log</span>(<span class=\"string\">`doh success and dns message length is <span class=\"subst\">$&#123;udpSize&#125;</span>`</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (isVlessHeaderSent) &#123;</span><br><span class=\"line\">\t\t\t\t\twebSocket.<span class=\"title function_\">send</span>(<span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([udpSizeBuffer, dnsQueryResult]).<span class=\"title function_\">arrayBuffer</span>());</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\twebSocket.<span class=\"title function_\">send</span>(<span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([vlessResponseHeader, udpSizeBuffer, dnsQueryResult]).<span class=\"title function_\">arrayBuffer</span>());</span><br><span class=\"line\">\t\t\t\t\tisVlessHeaderSent = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;dns udp has error&#x27;</span> + error)</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> writer = transformStream.<span class=\"property\">writable</span>.<span class=\"title function_\">getWriter</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Uint8Array</span>&#125; chunk </span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"title function_\">write</span>(<span class=\"params\">chunk</span>) &#123;</span><br><span class=\"line\">\t\t\twriter.<span class=\"title function_\">write</span>(chunk);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; userID </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string | null</span>&#125; <span class=\"variable\">hostName</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getVLESSConfig</span>(<span class=\"params\">userID, hostName</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> vlessMain = <span class=\"string\">`vless://<span class=\"subst\">$&#123;userID&#125;</span>@<span class=\"subst\">$&#123;hostName&#125;</span>:443?encryption=none&amp;security=tls&amp;sni=<span class=\"subst\">$&#123;hostName&#125;</span>&amp;fp=randomized&amp;type=ws&amp;host=<span class=\"subst\">$&#123;hostName&#125;</span>&amp;path=%2F%3Fed%3D2048#<span class=\"subst\">$&#123;hostName&#125;</span>`</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">################################################################</span></span><br><span class=\"line\"><span class=\"string\">v2ray</span></span><br><span class=\"line\"><span class=\"string\">---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">$&#123;vlessMain&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"string\">################################################################</span></span><br><span class=\"line\"><span class=\"string\">clash-meta</span></span><br><span class=\"line\"><span class=\"string\">---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"string\">- type: vless</span></span><br><span class=\"line\"><span class=\"string\">  name: <span class=\"subst\">$&#123;hostName&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">  server: <span class=\"subst\">$&#123;hostName&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">  port: 443</span></span><br><span class=\"line\"><span class=\"string\">  uuid: <span class=\"subst\">$&#123;userID&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">  network: ws</span></span><br><span class=\"line\"><span class=\"string\">  tls: true</span></span><br><span class=\"line\"><span class=\"string\">  udp: false</span></span><br><span class=\"line\"><span class=\"string\">  sni: <span class=\"subst\">$&#123;hostName&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">  client-fingerprint: chrome</span></span><br><span class=\"line\"><span class=\"string\">  ws-opts:</span></span><br><span class=\"line\"><span class=\"string\">    path: &quot;/?ed=2048&quot;</span></span><br><span class=\"line\"><span class=\"string\">    headers:</span></span><br><span class=\"line\"><span class=\"string\">      host: <span class=\"subst\">$&#123;hostName&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">---------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"string\">################################################################</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n<details>\n<summary><strong>代码2 详情</strong></summary>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br><span class=\"line\">835</span><br><span class=\"line\">836</span><br><span class=\"line\">837</span><br><span class=\"line\">838</span><br><span class=\"line\">839</span><br><span class=\"line\">840</span><br><span class=\"line\">841</span><br><span class=\"line\">842</span><br><span class=\"line\">843</span><br><span class=\"line\">844</span><br><span class=\"line\">845</span><br><span class=\"line\">846</span><br><span class=\"line\">847</span><br><span class=\"line\">848</span><br><span class=\"line\">849</span><br><span class=\"line\">850</span><br><span class=\"line\">851</span><br><span class=\"line\">852</span><br><span class=\"line\">853</span><br><span class=\"line\">854</span><br><span class=\"line\">855</span><br><span class=\"line\">856</span><br><span class=\"line\">857</span><br><span class=\"line\">858</span><br><span class=\"line\">859</span><br><span class=\"line\">860</span><br><span class=\"line\">861</span><br><span class=\"line\">862</span><br><span class=\"line\">863</span><br><span class=\"line\">864</span><br><span class=\"line\">865</span><br><span class=\"line\">866</span><br><span class=\"line\">867</span><br><span class=\"line\">868</span><br><span class=\"line\">869</span><br><span class=\"line\">870</span><br><span class=\"line\">871</span><br><span class=\"line\">872</span><br><span class=\"line\">873</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &lt;!--GAMFC--&gt;version base on commit 43fad05dcdae3b723c53c226f8181fc5bd47223e, time is 2023-06-22 15:20:02 UTC&lt;!--GAMFC-END--&gt;.</span></span><br><span class=\"line\"><span class=\"comment\">// @ts-ignore</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; connect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;cloudflare:sockets&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// How to generate your own UUID:</span></span><br><span class=\"line\"><span class=\"comment\">// [Windows] Press &quot;Win + R&quot;, input cmd and run:  Powershell -NoExit -Command &quot;[guid]::NewGuid()&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> userID = <span class=\"string\">&#x27;d342d11e-d424-4583-b36e-524ab1f0afa4&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxyIPs = [<span class=\"string\">&#x27;23.162.136.169&#x27;</span>, <span class=\"string\">&#x27;cdn.xn--b6gac.eu.org&#x27;</span>, <span class=\"string\">&#x27;cdn-all.xn--b6gac.eu.org&#x27;</span>, <span class=\"string\">&#x27;edgetunnel.anycast.eu.org&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> proxyIP = proxyIPs[<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * proxyIPs.<span class=\"property\">length</span>)];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> dohURL = <span class=\"string\">&#x27;https://sky.rethinkdns.com/1:-Pf_____9_8A_AMAIgE8kMABVDDmKOHTAKg=&#x27;</span>; <span class=\"comment\">// https://cloudflare-dns.com/dns-query or https://dns.google/dns-query</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// v2board api environment variables (optional) deprecated, please use planetscale.com instead</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"title function_\">isValidUUID</span>(userID)) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;uuid is invalid&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">import(&quot;@cloudflare/workers-types&quot;).Request</span>&#125; <span class=\"variable\">request</span></span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">&#123;UUID: string, PROXYIP: string, DNS_RESOLVER_URL: string, NODE_ID: int, API_HOST: string, API_TOKEN: string</span>&#125;&#125; env</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">import(&quot;@cloudflare/workers-types&quot;).ExecutionContext</span>&#125; <span class=\"variable\">ctx</span></span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Promise&lt;Response&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"title function_\">fetch</span>(<span class=\"params\">request, env, ctx</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// uuid_validator(request);</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tuserID = env.<span class=\"property\">UUID</span> || userID;</span><br><span class=\"line\">\t\t\tproxyIP = env.<span class=\"property\">PROXYIP</span> || proxyIP;</span><br><span class=\"line\">\t\t\tdohURL = env.<span class=\"property\">DNS_RESOLVER_URL</span> || dohURL;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> userID_Path = userID;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (userID.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;,&#x27;</span>)) &#123;</span><br><span class=\"line\">\t\t\t\tuserID_Path = userID.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> upgradeHeader = request.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;Upgrade&#x27;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!upgradeHeader || upgradeHeader !== <span class=\"string\">&#x27;websocket&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> url = <span class=\"keyword\">new</span> <span class=\"title function_\">URL</span>(request.<span class=\"property\">url</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">switch</span> (url.<span class=\"property\">pathname</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;/cf&#x27;</span>:</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(request.<span class=\"property\">cf</span>, <span class=\"literal\">null</span>, <span class=\"number\">4</span>), &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"attr\">status</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;application/json;charset=utf-8&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">`/<span class=\"subst\">$&#123;userID_Path&#125;</span>`</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">const</span> vlessConfig = <span class=\"title function_\">getVLESSConfig</span>(userID, request.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;Host&#x27;</span>));</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(<span class=\"string\">`<span class=\"subst\">$&#123;vlessConfig&#125;</span>`</span>, &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"attr\">status</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;text/html; charset=utf-8&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">`/sub/<span class=\"subst\">$&#123;userID_Path&#125;</span>`</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">const</span> url = <span class=\"keyword\">new</span> <span class=\"title function_\">URL</span>(request.<span class=\"property\">url</span>);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">const</span> searchParams = url.<span class=\"property\">searchParams</span>;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">let</span> vlessConfig = <span class=\"title function_\">createVLESSSub</span>(userID, request.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;Host&#x27;</span>));</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// If &#x27;format&#x27; query param equals to &#x27;clash&#x27;, convert config to base64</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (searchParams.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;format&#x27;</span>) === <span class=\"string\">&#x27;text&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tvlessConfig = vlessConfig;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// Construct and return response object</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(<span class=\"title function_\">btoa</span>(vlessConfig), &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"attr\">status</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;text/plain;charset=utf-8&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">`/bestip/<span class=\"subst\">$&#123;userID_Path&#125;</span>`</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">const</span> bestiplink = <span class=\"string\">`https://sub.xijingping.gay/auto?host=<span class=\"subst\">$&#123;request.headers.get(<span class=\"string\">&#x27;Host&#x27;</span>)&#125;</span>&amp;uuid=<span class=\"subst\">$&#123;userID_Path&#125;</span>`</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">const</span> reqHeaders = <span class=\"keyword\">new</span> <span class=\"title class_\">Headers</span>(request.<span class=\"property\">headers</span>);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">const</span> bestipresponse = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(bestiplink, &#123; <span class=\"attr\">redirect</span>: <span class=\"string\">&#x27;manual&#x27;</span>, <span class=\"attr\">headers</span>: reqHeaders, &#125;);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// Construct and return response object</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> bestipresponse</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">default</span>:</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// return new Response(&#x27;Not found&#x27;, &#123; status: 404 &#125;);</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// For any other path, reverse proxy to &#x27;www.fmprc.gov.cn&#x27; and return the original response, caching it in the process</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">const</span> hostnames = [<span class=\"string\">&#x27;www.fmprc.gov.cn&#x27;</span>, <span class=\"string\">&#x27;www.xuexi.cn&#x27;</span>, <span class=\"string\">&#x27;www.gov.cn&#x27;</span>, <span class=\"string\">&#x27;mail.gov.cn&#x27;</span>, <span class=\"string\">&#x27;www.mofcom.gov.cn&#x27;</span>, <span class=\"string\">&#x27;www.gfbzb.gov.cn&#x27;</span>, <span class=\"string\">&#x27;www.miit.gov.cn&#x27;</span>, <span class=\"string\">&#x27;www.12377.cn&#x27;</span>];</span><br><span class=\"line\">\t\t\t\t\t\turl.<span class=\"property\">hostname</span> = hostnames[<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * hostnames.<span class=\"property\">length</span>)];</span><br><span class=\"line\">\t\t\t\t\t\turl.<span class=\"property\">protocol</span> = <span class=\"string\">&#x27;https:&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">const</span> newHeaders = <span class=\"keyword\">new</span> <span class=\"title class_\">Headers</span>(request.<span class=\"property\">headers</span>);</span><br><span class=\"line\">\t\t\t\t\t\tnewHeaders.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;cf-connecting-ip&#x27;</span>, newHeaders.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;x-forwarded-for&#x27;</span>) || newHeaders.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;cf-connecting-ip&#x27;</span>));</span><br><span class=\"line\">\t\t\t\t\t\tnewHeaders.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;x-forwarded-for&#x27;</span>, newHeaders.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;cf-connecting-ip&#x27;</span>));</span><br><span class=\"line\">\t\t\t\t\t\tnewHeaders.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;x-real-ip&#x27;</span>, newHeaders.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;cf-connecting-ip&#x27;</span>));</span><br><span class=\"line\">\t\t\t\t\t\tnewHeaders.<span class=\"title function_\">set</span>(<span class=\"string\">&#x27;referer&#x27;</span>, <span class=\"string\">&#x27;https://www.google.com/q=edtunnel&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\trequest = <span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>(url, &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"attr\">method</span>: request.<span class=\"property\">method</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"attr\">headers</span>: newHeaders,</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"attr\">body</span>: request.<span class=\"property\">body</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"attr\">redirect</span>: request.<span class=\"property\">redirect</span>,</span><br><span class=\"line\">\t\t\t\t\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">const</span> cache = caches.<span class=\"property\">default</span>;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">let</span> response = <span class=\"keyword\">await</span> cache.<span class=\"title function_\">match</span>(request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (!response) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\tresponse = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(request, &#123; <span class=\"attr\">redirect</span>: <span class=\"string\">&#x27;manual&#x27;</span> &#125;);</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\turl.<span class=\"property\">protocol</span> = <span class=\"string\">&#x27;http:&#x27;</span>;</span><br><span class=\"line\">\t\t\t\t\t\t\t\turl.<span class=\"property\">hostname</span> = hostnames[<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * hostnames.<span class=\"property\">length</span>)];</span><br><span class=\"line\">\t\t\t\t\t\t\t\trequest = <span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>(url, &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"attr\">method</span>: request.<span class=\"property\">method</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"attr\">headers</span>: newHeaders,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"attr\">body</span>: request.<span class=\"property\">body</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"attr\">redirect</span>: request.<span class=\"property\">redirect</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t\t\t\t\t\tresponse = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(request, &#123; <span class=\"attr\">redirect</span>: <span class=\"string\">&#x27;manual&#x27;</span> &#125;);</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">const</span> cloneResponse = response.<span class=\"title function_\">clone</span>();</span><br><span class=\"line\">\t\t\t\t\t\t\tctx.<span class=\"title function_\">waitUntil</span>(cache.<span class=\"title function_\">put</span>(request, cloneResponse));</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> response;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"title function_\">vlessOverWSHandler</span>(request);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">Error</span>&#125; */</span> <span class=\"keyword\">let</span> e = err;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(e.<span class=\"title function_\">toString</span>());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">uuid_validator</span>(<span class=\"params\">request</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> hostname = request.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;Host&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> currentDate = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> subdomain = hostname.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> year = currentDate.<span class=\"title function_\">getFullYear</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> month = <span class=\"title class_\">String</span>(currentDate.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>).<span class=\"title function_\">padStart</span>(<span class=\"number\">2</span>, <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> day = <span class=\"title class_\">String</span>(currentDate.<span class=\"title function_\">getDate</span>()).<span class=\"title function_\">padStart</span>(<span class=\"number\">2</span>, <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> formattedDate = <span class=\"string\">`<span class=\"subst\">$&#123;year&#125;</span>-<span class=\"subst\">$&#123;month&#125;</span>-<span class=\"subst\">$&#123;day&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// const daliy_sub = formattedDate + subdomain</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> hashHex = <span class=\"keyword\">await</span> <span class=\"title function_\">hashHex_f</span>(subdomain);</span><br><span class=\"line\">\t<span class=\"comment\">// subdomain string contains timestamps utc and uuid string TODO.</span></span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(hashHex, subdomain, formattedDate);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">hashHex_f</span>(<span class=\"params\">string</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> encoder = <span class=\"keyword\">new</span> <span class=\"title class_\">TextEncoder</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> data = encoder.<span class=\"title function_\">encode</span>(string);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> hashBuffer = <span class=\"keyword\">await</span> crypto.<span class=\"property\">subtle</span>.<span class=\"title function_\">digest</span>(<span class=\"string\">&#x27;SHA-256&#x27;</span>, data);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> hashArray = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(hashBuffer));</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> hashHex = hashArray.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">byte</span> =&gt;</span> byte.<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>).<span class=\"title function_\">padStart</span>(<span class=\"number\">2</span>, <span class=\"string\">&#x27;0&#x27;</span>)).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> hashHex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Handles VLESS over WebSocket requests by creating a WebSocket pair, accepting the WebSocket connection, and processing the VLESS header.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">import(&quot;@cloudflare/workers-types&quot;).Request</span>&#125; request The incoming request object.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Promise&lt;Response&gt;</span>&#125; A Promise that resolves to a WebSocket response object.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">vlessOverWSHandler</span>(<span class=\"params\">request</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> webSocketPair = <span class=\"keyword\">new</span> <span class=\"title class_\">WebSocketPair</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> [client, webSocket] = <span class=\"title class_\">Object</span>.<span class=\"title function_\">values</span>(webSocketPair);</span><br><span class=\"line\">\twebSocket.<span class=\"title function_\">accept</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> address = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> portWithRandomLog = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> currentDate = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"title function_\">log</span> = (<span class=\"params\"><span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">string</span>&#125; */</span> info, <span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">string | undefined</span>&#125; */</span> event</span>) =&gt; &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`[<span class=\"subst\">$&#123;currentDate&#125;</span> <span class=\"subst\">$&#123;address&#125;</span>:<span class=\"subst\">$&#123;portWithRandomLog&#125;</span>] <span class=\"subst\">$&#123;info&#125;</span>`</span>, event || <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> earlyDataHeader = request.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;sec-websocket-protocol&#x27;</span>) || <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> readableWebSocketStream = <span class=\"title function_\">makeReadableWebSocketStream</span>(webSocket, earlyDataHeader, log);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">&#123; value: import(&quot;@cloudflare/workers-types&quot;).Socket | null</span>&#125;&#125;*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> remoteSocketWapper = &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">value</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> udpStreamWrite = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> isDns = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// ws --&gt; remote</span></span><br><span class=\"line\">\treadableWebSocketStream.<span class=\"title function_\">pipeTo</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">WritableStream</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">async</span> <span class=\"title function_\">write</span>(<span class=\"params\">chunk, controller</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isDns &amp;&amp; udpStreamWrite) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"title function_\">udpStreamWrite</span>(chunk);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (remoteSocketWapper.<span class=\"property\">value</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> writer = remoteSocketWapper.<span class=\"property\">value</span>.<span class=\"property\">writable</span>.<span class=\"title function_\">getWriter</span>()</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">await</span> writer.<span class=\"title function_\">write</span>(chunk);</span><br><span class=\"line\">\t\t\t\twriter.<span class=\"title function_\">releaseLock</span>();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">\t\t\t\thasError,</span><br><span class=\"line\">\t\t\t\tmessage,</span><br><span class=\"line\">\t\t\t\tportRemote = <span class=\"number\">443</span>,</span><br><span class=\"line\">\t\t\t\taddressRemote = <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">\t\t\t\trawDataIndex,</span><br><span class=\"line\">\t\t\t\tvlessVersion = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>([<span class=\"number\">0</span>, <span class=\"number\">0</span>]),</span><br><span class=\"line\">\t\t\t\tisUDP,</span><br><span class=\"line\">\t\t\t&#125; = <span class=\"title function_\">processVlessHeader</span>(chunk, userID);</span><br><span class=\"line\">\t\t\taddress = addressRemote;</span><br><span class=\"line\">\t\t\tportWithRandomLog = <span class=\"string\">`<span class=\"subst\">$&#123;portRemote&#125;</span> <span class=\"subst\">$&#123;isUDP ? <span class=\"string\">&#x27;udp&#x27;</span> : <span class=\"string\">&#x27;tcp&#x27;</span>&#125;</span> `</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (hasError) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// controller.error(message);</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(message); <span class=\"comment\">// cf seems has bug, controller.error will not end stream</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// webSocket.close(1000, message);</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// If UDP and not DNS port, close it</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isUDP &amp;&amp; portRemote !== <span class=\"number\">53</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;UDP proxy only enabled for DNS which is port 53&#x27;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// cf seems has bug, controller.error will not end stream</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isUDP &amp;&amp; portRemote === <span class=\"number\">53</span>) &#123;</span><br><span class=\"line\">\t\t\t\tisDns = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// [&quot;version&quot;, &quot;附加信息长度 N&quot;]</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> vlessResponseHeader = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>([vlessVersion[<span class=\"number\">0</span>], <span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> rawClientData = chunk.<span class=\"title function_\">slice</span>(rawDataIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> support udp here when cf runtime has udp support</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isDns) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> &#123; write &#125; = <span class=\"keyword\">await</span> <span class=\"title function_\">handleUDPOutBound</span>(webSocket, vlessResponseHeader, log);</span><br><span class=\"line\">\t\t\t\tudpStreamWrite = write;</span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">udpStreamWrite</span>(rawClientData);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">handleTCPOutBound</span>(remoteSocketWapper, addressRemote, portRemote, rawClientData, webSocket, vlessResponseHeader, log);</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"title function_\">close</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">log</span>(<span class=\"string\">`readableWebSocketStream is close`</span>);</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"title function_\">abort</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">log</span>(<span class=\"string\">`readableWebSocketStream is abort`</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(reason));</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;)).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;readableWebSocketStream pipeTo error&#x27;</span>, err);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(<span class=\"literal\">null</span>, &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">status</span>: <span class=\"number\">101</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">webSocket</span>: client,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Handles outbound TCP connections.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">any</span>&#125; remoteSocket </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; addressRemote The remote address to connect to.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; portRemote The remote port to connect to.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Uint8Array</span>&#125; rawClientData The raw client data to write.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">import(&quot;@cloudflare/workers-types&quot;).WebSocket</span>&#125; webSocket The WebSocket to pass the remote socket to.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Uint8Array</span>&#125; vlessResponseHeader The VLESS response header.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">function</span>&#125; log The logging function.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Promise&lt;void&gt;</span>&#125; The remote socket.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handleTCPOutBound</span>(<span class=\"params\">remoteSocket, addressRemote, portRemote, rawClientData, webSocket, vlessResponseHeader, log,</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Connects to a given address and port and writes data to the socket.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; address The address to connect to.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; port The port to connect to.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Promise&lt;import(&quot;@cloudflare/workers-types&quot;).Socket&gt;</span>&#125; A Promise that resolves to the connected socket.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">connectAndWrite</span>(<span class=\"params\">address, port</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">import(&quot;@cloudflare/workers-types&quot;).Socket</span>&#125; */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> tcpSocket = <span class=\"title function_\">connect</span>(&#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">hostname</span>: address,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">port</span>: port,</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tremoteSocket.<span class=\"property\">value</span> = tcpSocket;</span><br><span class=\"line\">\t\t<span class=\"title function_\">log</span>(<span class=\"string\">`connected to <span class=\"subst\">$&#123;address&#125;</span>:<span class=\"subst\">$&#123;port&#125;</span>`</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> writer = tcpSocket.<span class=\"property\">writable</span>.<span class=\"title function_\">getWriter</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">await</span> writer.<span class=\"title function_\">write</span>(rawClientData); <span class=\"comment\">// first write, nomal is tls client hello</span></span><br><span class=\"line\">\t\twriter.<span class=\"title function_\">releaseLock</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> tcpSocket;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Retries connecting to the remote address and port if the Cloudflare socket has no incoming data.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Promise&lt;void&gt;</span>&#125; A Promise that resolves when the retry is complete.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">retry</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> tcpSocket = <span class=\"keyword\">await</span> <span class=\"title function_\">connectAndWrite</span>(proxyIP || addressRemote, portRemote)</span><br><span class=\"line\">\t\ttcpSocket.<span class=\"property\">closed</span>.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;retry tcpSocket closed error&#x27;</span>, error);</span><br><span class=\"line\">\t\t&#125;).<span class=\"title function_\">finally</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">safeCloseWebSocket</span>(webSocket);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t<span class=\"title function_\">remoteSocketToWS</span>(tcpSocket, webSocket, vlessResponseHeader, <span class=\"literal\">null</span>, log);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> tcpSocket = <span class=\"keyword\">await</span> <span class=\"title function_\">connectAndWrite</span>(addressRemote, portRemote);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// when remoteSocket is ready, pass to websocket</span></span><br><span class=\"line\">\t<span class=\"comment\">// remote--&gt; ws</span></span><br><span class=\"line\">\t<span class=\"title function_\">remoteSocketToWS</span>(tcpSocket, webSocket, vlessResponseHeader, retry, log);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Creates a readable stream from a WebSocket server, allowing for data to be read from the WebSocket.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">import(&quot;@cloudflare/workers-types&quot;).WebSocket</span>&#125; webSocketServer The WebSocket server to create the readable stream from.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; earlyDataHeader The header containing early data for WebSocket 0-RTT.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">(info: string)=&gt; void</span>&#125; log The logging function.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">ReadableStream</span>&#125; A readable stream that can be used to read data from the WebSocket.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">makeReadableWebSocketStream</span>(<span class=\"params\">webSocketServer, earlyDataHeader, log</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> readableStreamCancel = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> stream = <span class=\"keyword\">new</span> <span class=\"title class_\">ReadableStream</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">start</span>(<span class=\"params\">controller</span>) &#123;</span><br><span class=\"line\">\t\t\twebSocketServer.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;message&#x27;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> message = event.<span class=\"property\">data</span>;</span><br><span class=\"line\">\t\t\t\tcontroller.<span class=\"title function_\">enqueue</span>(message);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\twebSocketServer.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;close&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">safeCloseWebSocket</span>(webSocketServer);</span><br><span class=\"line\">\t\t\t\tcontroller.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\twebSocketServer.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;webSocketServer has error&#x27;</span>);</span><br><span class=\"line\">\t\t\t\tcontroller.<span class=\"title function_\">error</span>(err);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> &#123; earlyData, error &#125; = <span class=\"title function_\">base64ToArrayBuffer</span>(earlyDataHeader);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">\t\t\t\tcontroller.<span class=\"title function_\">error</span>(error);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (earlyData) &#123;</span><br><span class=\"line\">\t\t\t\tcontroller.<span class=\"title function_\">enqueue</span>(earlyData);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"title function_\">pull</span>(<span class=\"params\">controller</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// if ws can stop read if stream is full, we can implement backpressure</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// https://streams.spec.whatwg.org/#example-rs-push-backpressure</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"title function_\">cancel</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">log</span>(<span class=\"string\">`ReadableStream was canceled, due to <span class=\"subst\">$&#123;reason&#125;</span>`</span>)</span><br><span class=\"line\">\t\t\treadableStreamCancel = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">safeCloseWebSocket</span>(webSocketServer);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> stream;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://xtls.github.io/development/protocols/vless.html</span></span><br><span class=\"line\"><span class=\"comment\">// https://github.com/zizifn/excalidraw-backup/blob/main/v2ray-protocol.excalidraw</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Processes the VLESS header buffer and returns an object with the relevant information.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ArrayBuffer</span>&#125; vlessBuffer The VLESS header buffer to process.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; userID The user ID to validate against the UUID in the VLESS header.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">&#123;</span></span></span><br><span class=\"line\"><span class=\"type\"><span class=\"comment\"> *  hasError: boolean,</span></span></span><br><span class=\"line\"><span class=\"type\"><span class=\"comment\"> *  message?: string,</span></span></span><br><span class=\"line\"><span class=\"type\"><span class=\"comment\"> *  addressRemote?: string,</span></span></span><br><span class=\"line\"><span class=\"type\"><span class=\"comment\"> *  addressType?: number,</span></span></span><br><span class=\"line\"><span class=\"type\"><span class=\"comment\"> *  portRemote?: number,</span></span></span><br><span class=\"line\"><span class=\"type\"><span class=\"comment\"> *  rawDataIndex?: number,</span></span></span><br><span class=\"line\"><span class=\"type\"><span class=\"comment\"> *  vlessVersion?: Uint8Array,</span></span></span><br><span class=\"line\"><span class=\"type\"><span class=\"comment\"> *  isUDP?: boolean</span></span></span><br><span class=\"line\"><span class=\"type\"><span class=\"comment\"> * </span>&#125;&#125; An object with the relevant information extracted from the VLESS header buffer.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">processVlessHeader</span>(<span class=\"params\">vlessBuffer, userID</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (vlessBuffer.<span class=\"property\">byteLength</span> &lt; <span class=\"number\">24</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">hasError</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&#x27;invalid data&#x27;</span>,</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> version = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(vlessBuffer.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> isValidUser = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> isUDP = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> slicedBuffer = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(vlessBuffer.<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>, <span class=\"number\">17</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> slicedBufferString = <span class=\"title function_\">stringify</span>(slicedBuffer);</span><br><span class=\"line\">\t<span class=\"comment\">// check if userID is valid uuid or uuids split by , and contains userID in it otherwise return error message to console</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> uuids = userID.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;,&#x27;</span>) ? userID.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;,&quot;</span>) : [userID];</span><br><span class=\"line\">\t<span class=\"comment\">// uuid_validator(hostName, slicedBufferString);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// isValidUser = uuids.some(userUuid =&gt; slicedBufferString === userUuid.trim());</span></span><br><span class=\"line\">\tisValidUser = uuids.<span class=\"title function_\">some</span>(<span class=\"function\"><span class=\"params\">userUuid</span> =&gt;</span> slicedBufferString === userUuid.<span class=\"title function_\">trim</span>()) || uuids.<span class=\"property\">length</span> === <span class=\"number\">1</span> &amp;&amp; slicedBufferString === uuids[<span class=\"number\">0</span>].<span class=\"title function_\">trim</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`userID: <span class=\"subst\">$&#123;slicedBufferString&#125;</span>`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!isValidUser) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">hasError</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">&#x27;invalid user&#x27;</span>,</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> optLength = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(vlessBuffer.<span class=\"title function_\">slice</span>(<span class=\"number\">17</span>, <span class=\"number\">18</span>))[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"comment\">//skip opt for now</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> command = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(</span><br><span class=\"line\">\t\tvlessBuffer.<span class=\"title function_\">slice</span>(<span class=\"number\">18</span> + optLength, <span class=\"number\">18</span> + optLength + <span class=\"number\">1</span>)</span><br><span class=\"line\">\t)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 0x01 TCP</span></span><br><span class=\"line\">\t<span class=\"comment\">// 0x02 UDP</span></span><br><span class=\"line\">\t<span class=\"comment\">// 0x03 MUX</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (command === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tisUDP = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (command === <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\tisUDP = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">hasError</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">`command <span class=\"subst\">$&#123;command&#125;</span> is not support, command 01-tcp,02-udp,03-mux`</span>,</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> portIndex = <span class=\"number\">18</span> + optLength + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> portBuffer = vlessBuffer.<span class=\"title function_\">slice</span>(portIndex, portIndex + <span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// port is big-Endian in raw data etc 80 == 0x005d</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> portRemote = <span class=\"keyword\">new</span> <span class=\"title class_\">DataView</span>(portBuffer).<span class=\"title function_\">getUint16</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> addressIndex = portIndex + <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> addressBuffer = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(</span><br><span class=\"line\">\t\tvlessBuffer.<span class=\"title function_\">slice</span>(addressIndex, addressIndex + <span class=\"number\">1</span>)</span><br><span class=\"line\">\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 1--&gt; ipv4  addressLength =4</span></span><br><span class=\"line\">\t<span class=\"comment\">// 2--&gt; domain name addressLength=addressBuffer[1]</span></span><br><span class=\"line\">\t<span class=\"comment\">// 3--&gt; ipv6  addressLength =16</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> addressType = addressBuffer[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> addressLength = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> addressValueIndex = addressIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> addressValue = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (addressType) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\taddressLength = <span class=\"number\">4</span>;</span><br><span class=\"line\">\t\t\taddressValue = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(</span><br><span class=\"line\">\t\t\t\tvlessBuffer.<span class=\"title function_\">slice</span>(addressValueIndex, addressValueIndex + addressLength)</span><br><span class=\"line\">\t\t\t).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\taddressLength = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(</span><br><span class=\"line\">\t\t\t\tvlessBuffer.<span class=\"title function_\">slice</span>(addressValueIndex, addressValueIndex + <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t)[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\taddressValueIndex += <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\taddressValue = <span class=\"keyword\">new</span> <span class=\"title class_\">TextDecoder</span>().<span class=\"title function_\">decode</span>(</span><br><span class=\"line\">\t\t\t\tvlessBuffer.<span class=\"title function_\">slice</span>(addressValueIndex, addressValueIndex + addressLength)</span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\taddressLength = <span class=\"number\">16</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> dataView = <span class=\"keyword\">new</span> <span class=\"title class_\">DataView</span>(</span><br><span class=\"line\">\t\t\t\tvlessBuffer.<span class=\"title function_\">slice</span>(addressValueIndex, addressValueIndex + addressLength)</span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2001:0db8:85a3:0000:0000:8a2e:0370:7334</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> ipv6 = [];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">\t\t\t\tipv6.<span class=\"title function_\">push</span>(dataView.<span class=\"title function_\">getUint16</span>(i * <span class=\"number\">2</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\taddressValue = ipv6.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;:&#x27;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// seems no need add [] for ipv6</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"attr\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">hasError</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">`invild  addressType is <span class=\"subst\">$&#123;addressType&#125;</span>`</span>,</span><br><span class=\"line\">\t\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!addressValue) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"attr\">hasError</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">message</span>: <span class=\"string\">`addressValue is empty, addressType is <span class=\"subst\">$&#123;addressType&#125;</span>`</span>,</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">hasError</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">addressRemote</span>: addressValue,</span><br><span class=\"line\">\t\taddressType,</span><br><span class=\"line\">\t\tportRemote,</span><br><span class=\"line\">\t\t<span class=\"attr\">rawDataIndex</span>: addressValueIndex + addressLength,</span><br><span class=\"line\">\t\t<span class=\"attr\">vlessVersion</span>: version,</span><br><span class=\"line\">\t\tisUDP,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Converts a remote socket to a WebSocket connection.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">import(&quot;@cloudflare/workers-types&quot;).Socket</span>&#125; remoteSocket The remote socket to convert.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">import(&quot;@cloudflare/workers-types&quot;).WebSocket</span>&#125; webSocket The WebSocket to connect to.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ArrayBuffer | null</span>&#125; vlessResponseHeader The VLESS response header.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">(() =&gt; Promise&lt;void&gt;) | null</span>&#125; retry The function to retry the connection if it fails.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">(info: string) =&gt; void</span>&#125; log The logging function.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">Promise&lt;void&gt;</span>&#125; A Promise that resolves when the conversion is complete.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">remoteSocketToWS</span>(<span class=\"params\">remoteSocket, webSocket, vlessResponseHeader, retry, log</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// remote--&gt; ws</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> remoteChunkCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> chunks = [];</span><br><span class=\"line\">\t<span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">ArrayBuffer | null</span>&#125; */</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> vlessHeader = vlessResponseHeader;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> hasIncomingData = <span class=\"literal\">false</span>; <span class=\"comment\">// check if remoteSocket has incoming data</span></span><br><span class=\"line\">\t<span class=\"keyword\">await</span> remoteSocket.<span class=\"property\">readable</span></span><br><span class=\"line\">\t\t.<span class=\"title function_\">pipeTo</span>(</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">WritableStream</span>(&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">start</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Uint8Array</span>&#125; chunk </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">*</span>&#125; controller </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t */</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">async</span> <span class=\"title function_\">write</span>(<span class=\"params\">chunk, controller</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\thasIncomingData = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t\tremoteChunkCount++;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (webSocket.<span class=\"property\">readyState</span> !== <span class=\"variable constant_\">WS_READY_STATE_OPEN</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tcontroller.<span class=\"title function_\">error</span>(</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"string\">&#x27;webSocket.readyState is not open, maybe close&#x27;</span></span><br><span class=\"line\">\t\t\t\t\t\t);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (vlessHeader) &#123;</span><br><span class=\"line\">\t\t\t\t\t\twebSocket.<span class=\"title function_\">send</span>(<span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([vlessHeader, chunk]).<span class=\"title function_\">arrayBuffer</span>());</span><br><span class=\"line\">\t\t\t\t\t\tvlessHeader = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// console.log(`remoteSocketToWS send chunk $&#123;chunk.byteLength&#125;`);</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// seems no need rate limit this, CF seems fix this??..</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// if (remoteChunkCount &gt; 20000) &#123;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// \t// cf one package is 4096 byte(4kb),  4096 * 20000 = 80M</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// \tawait delay(1);</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// &#125;</span></span><br><span class=\"line\">\t\t\t\t\t\twebSocket.<span class=\"title function_\">send</span>(chunk);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">close</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"title function_\">log</span>(<span class=\"string\">`remoteConnection!.readable is close with hasIncomingData is <span class=\"subst\">$&#123;hasIncomingData&#125;</span>`</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// safeCloseWebSocket(webSocket); // no need server close websocket frist for some case will casue HTTP ERR_CONTENT_LENGTH_MISMATCH issue, client will send close event anyway.</span></span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">abort</span>(<span class=\"params\">reason</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">`remoteConnection!.readable abort`</span>, reason);</span><br><span class=\"line\">\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t\t.<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">`remoteSocketToWS has exception `</span>,</span><br><span class=\"line\">\t\t\t\terror.<span class=\"property\">stack</span> || error</span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">safeCloseWebSocket</span>(webSocket);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// seems is cf connect socket have error,</span></span><br><span class=\"line\">\t<span class=\"comment\">// 1. Socket.closed will have error</span></span><br><span class=\"line\">\t<span class=\"comment\">// 2. Socket.readable will be close without any data coming</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hasIncomingData === <span class=\"literal\">false</span> &amp;&amp; retry) &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">log</span>(<span class=\"string\">`retry`</span>)</span><br><span class=\"line\">\t\t<span class=\"title function_\">retry</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Decodes a base64 string into an ArrayBuffer.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; base64Str The base64 string to decode.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">&#123;earlyData: ArrayBuffer|null, error: Error|null</span>&#125;&#125; An object containing the decoded ArrayBuffer or null if there was an error, and any error that occurred during decoding or null if there was no error.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">base64ToArrayBuffer</span>(<span class=\"params\">base64Str</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!base64Str) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123; <span class=\"attr\">earlyData</span>: <span class=\"literal\">null</span>, <span class=\"attr\">error</span>: <span class=\"literal\">null</span> &#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// go use modified Base64 for URL rfc4648 which js atob not support</span></span><br><span class=\"line\">\t\tbase64Str = base64Str.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/-/g</span>, <span class=\"string\">&#x27;+&#x27;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/_/g</span>, <span class=\"string\">&#x27;/&#x27;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> decode = <span class=\"title function_\">atob</span>(base64Str);</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> arryBuffer = <span class=\"title class_\">Uint8Array</span>.<span class=\"title function_\">from</span>(decode, <span class=\"function\">(<span class=\"params\">c</span>) =&gt;</span> c.<span class=\"title function_\">charCodeAt</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123; <span class=\"attr\">earlyData</span>: arryBuffer.<span class=\"property\">buffer</span>, <span class=\"attr\">error</span>: <span class=\"literal\">null</span> &#125;;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123; <span class=\"attr\">earlyData</span>: <span class=\"literal\">null</span>, error &#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Checks if a given string is a valid UUID.</span></span><br><span class=\"line\"><span class=\"comment\"> * Note: This is not a real UUID validation.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; uuid The string to validate as a UUID.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">boolean</span>&#125; True if the string is a valid UUID, false otherwise.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isValidUUID</span>(<span class=\"params\">uuid</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> uuidRegex = <span class=\"regexp\">/^[0-9a-f]&#123;8&#125;-[0-9a-f]&#123;4&#125;-[4][0-9a-f]&#123;3&#125;-[89ab][0-9a-f]&#123;3&#125;-[0-9a-f]&#123;12&#125;$/i</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> uuidRegex.<span class=\"title function_\">test</span>(uuid);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">WS_READY_STATE_OPEN</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">WS_READY_STATE_CLOSING</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Closes a WebSocket connection safely without throwing exceptions.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">import(&quot;@cloudflare/workers-types&quot;).WebSocket</span>&#125; socket The WebSocket connection to close.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">safeCloseWebSocket</span>(<span class=\"params\">socket</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (socket.<span class=\"property\">readyState</span> === <span class=\"variable constant_\">WS_READY_STATE_OPEN</span> || socket.<span class=\"property\">readyState</span> === <span class=\"variable constant_\">WS_READY_STATE_CLOSING</span>) &#123;</span><br><span class=\"line\">\t\t\tsocket.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;safeCloseWebSocket error&#x27;</span>, error);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> byteToHex = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; ++i) &#123;</span><br><span class=\"line\">\tbyteToHex.<span class=\"title function_\">push</span>((i + <span class=\"number\">256</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>).<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">unsafeStringify</span>(<span class=\"params\">arr, offset = <span class=\"number\">0</span></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (byteToHex[arr[offset + <span class=\"number\">0</span>]] + byteToHex[arr[offset + <span class=\"number\">1</span>]] + byteToHex[arr[offset + <span class=\"number\">2</span>]] + byteToHex[arr[offset + <span class=\"number\">3</span>]] + <span class=\"string\">&quot;-&quot;</span> + byteToHex[arr[offset + <span class=\"number\">4</span>]] + byteToHex[arr[offset + <span class=\"number\">5</span>]] + <span class=\"string\">&quot;-&quot;</span> + byteToHex[arr[offset + <span class=\"number\">6</span>]] + byteToHex[arr[offset + <span class=\"number\">7</span>]] + <span class=\"string\">&quot;-&quot;</span> + byteToHex[arr[offset + <span class=\"number\">8</span>]] + byteToHex[arr[offset + <span class=\"number\">9</span>]] + <span class=\"string\">&quot;-&quot;</span> + byteToHex[arr[offset + <span class=\"number\">10</span>]] + byteToHex[arr[offset + <span class=\"number\">11</span>]] + byteToHex[arr[offset + <span class=\"number\">12</span>]] + byteToHex[arr[offset + <span class=\"number\">13</span>]] + byteToHex[arr[offset + <span class=\"number\">14</span>]] + byteToHex[arr[offset + <span class=\"number\">15</span>]]).<span class=\"title function_\">toLowerCase</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">stringify</span>(<span class=\"params\">arr, offset = <span class=\"number\">0</span></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> uuid = <span class=\"title function_\">unsafeStringify</span>(arr, offset);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"title function_\">isValidUUID</span>(uuid)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&quot;Stringified UUID is invalid&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> uuid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Handles outbound UDP traffic by transforming the data into DNS queries and sending them over a WebSocket connection.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">import(&quot;@cloudflare/workers-types&quot;).WebSocket</span>&#125; webSocket The WebSocket connection to send the DNS queries over.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">ArrayBuffer</span>&#125; vlessResponseHeader The VLESS response header.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">(string) =&gt; void</span>&#125; log The logging function.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">&#123;write: (chunk: Uint8Array) =&gt; void</span>&#125;&#125; An object with a write method that accepts a Uint8Array chunk to write to the transform stream.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handleUDPOutBound</span>(<span class=\"params\">webSocket, vlessResponseHeader, log</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> isVlessHeaderSent = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> transformStream = <span class=\"keyword\">new</span> <span class=\"title class_\">TransformStream</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">start</span>(<span class=\"params\">controller</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"title function_\">transform</span>(<span class=\"params\">chunk, controller</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// udp message 2 byte is the the length of udp data</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> this should have bug, beacsue maybe udp chunk can be in two websocket message</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; chunk.<span class=\"property\">byteLength</span>;) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> lengthBuffer = chunk.<span class=\"title function_\">slice</span>(index, index + <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> udpPakcetLength = <span class=\"keyword\">new</span> <span class=\"title class_\">DataView</span>(lengthBuffer).<span class=\"title function_\">getUint16</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> udpData = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(</span><br><span class=\"line\">\t\t\t\t\tchunk.<span class=\"title function_\">slice</span>(index + <span class=\"number\">2</span>, index + <span class=\"number\">2</span> + udpPakcetLength)</span><br><span class=\"line\">\t\t\t\t);</span><br><span class=\"line\">\t\t\t\tindex = index + <span class=\"number\">2</span> + udpPakcetLength;</span><br><span class=\"line\">\t\t\t\tcontroller.<span class=\"title function_\">enqueue</span>(udpData);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"title function_\">flush</span>(<span class=\"params\">controller</span>) &#123;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// only handle dns udp for now</span></span><br><span class=\"line\">\ttransformStream.<span class=\"property\">readable</span>.<span class=\"title function_\">pipeTo</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">WritableStream</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">async</span> <span class=\"title function_\">write</span>(<span class=\"params\">chunk</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> resp = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(dohURL, <span class=\"comment\">// dns server url</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">method</span>: <span class=\"string\">&#x27;POST&#x27;</span>,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">&#x27;content-type&#x27;</span>: <span class=\"string\">&#x27;application/dns-message&#x27;</span>,</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"attr\">body</span>: chunk,</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> dnsQueryResult = <span class=\"keyword\">await</span> resp.<span class=\"title function_\">arrayBuffer</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> udpSize = dnsQueryResult.<span class=\"property\">byteLength</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// console.log([...new Uint8Array(dnsQueryResult)].map((x) =&gt; x.toString(16)));</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> udpSizeBuffer = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>([(udpSize &gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">0xff</span>, udpSize &amp; <span class=\"number\">0xff</span>]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (webSocket.<span class=\"property\">readyState</span> === <span class=\"variable constant_\">WS_READY_STATE_OPEN</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"title function_\">log</span>(<span class=\"string\">`doh success and dns message length is <span class=\"subst\">$&#123;udpSize&#125;</span>`</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (isVlessHeaderSent) &#123;</span><br><span class=\"line\">\t\t\t\t\twebSocket.<span class=\"title function_\">send</span>(<span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([udpSizeBuffer, dnsQueryResult]).<span class=\"title function_\">arrayBuffer</span>());</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\twebSocket.<span class=\"title function_\">send</span>(<span class=\"keyword\">await</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Blob</span>([vlessResponseHeader, udpSizeBuffer, dnsQueryResult]).<span class=\"title function_\">arrayBuffer</span>());</span><br><span class=\"line\">\t\t\t\t\tisVlessHeaderSent = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;)).<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;dns udp has error&#x27;</span> + error)</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> writer = transformStream.<span class=\"property\">writable</span>.<span class=\"title function_\">getWriter</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">Uint8Array</span>&#125; chunk </span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"title function_\">write</span>(<span class=\"params\">chunk</span>) &#123;</span><br><span class=\"line\">\t\t\twriter.<span class=\"title function_\">write</span>(chunk);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string</span>&#125; <span class=\"variable\">userID</span> - single or comma separated userIDs</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">string | null</span>&#125; <span class=\"variable\">hostName</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span> &#123;<span class=\"type\">string</span>&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getVLESSConfig</span>(<span class=\"params\">userIDs, hostName</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> commonUrlPart = <span class=\"string\">`:443?encryption=none&amp;security=tls&amp;sni=<span class=\"subst\">$&#123;hostName&#125;</span>&amp;fp=randomized&amp;type=ws&amp;host=<span class=\"subst\">$&#123;hostName&#125;</span>&amp;path=%2F%3Fed%3D2048#<span class=\"subst\">$&#123;hostName&#125;</span>`</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> separator = <span class=\"string\">&quot;---------------------------------------------------------------&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> hashSeparator = <span class=\"string\">&quot;################################################################&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Split the userIDs into an array</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> userIDArray = userIDs.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Prepare output array</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> output = [];</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> header = [];</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> sublink = <span class=\"string\">`https://<span class=\"subst\">$&#123;hostName&#125;</span>/sub/<span class=\"subst\">$&#123;userIDArray[<span class=\"number\">0</span>]&#125;</span>`</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> clash_link = <span class=\"string\">`https://subconverter.do.xn--b6gac.eu.org/sub?target=clash&amp;url=<span class=\"subst\">$&#123;<span class=\"built_in\">encodeURIComponent</span>(sublink)&#125;</span>&amp;insert=false&amp;emoji=true&amp;list=false&amp;tfo=false&amp;scv=true&amp;fdn=false&amp;sort=false&amp;new_name=true`</span>;</span><br><span class=\"line\">\theader.<span class=\"title function_\">push</span>(<span class=\"string\">`\\n&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://cloudflare-ipfs.com/ipfs/bafybeigd6i5aavwpr6wvnwuyayklq3omonggta4x2q7kpmgafj357nkcky&quot; alt=&quot;图片描述&quot; style=&quot;margin-bottom: -50px;&quot;&gt;`</span>);</span><br><span class=\"line\">\theader.<span class=\"title function_\">push</span>(<span class=\"string\">`\\n&lt;b style=&quot; font-size: 15px;&quot; &gt;Welcome! This function generates configuration for VLESS protocol. If you found this useful, please check our GitHub project for more:&lt;/b&gt;\\n`</span>);</span><br><span class=\"line\">\theader.<span class=\"title function_\">push</span>(<span class=\"string\">`&lt;b style=&quot; font-size: 15px;&quot; &gt;欢迎！这是生成 VLESS 协议的配置。如果您发现这个项目很好用，请查看我们的 GitHub 项目给我一个star：&lt;/b&gt;\\n`</span>);</span><br><span class=\"line\">\theader.<span class=\"title function_\">push</span>(<span class=\"string\">`\\n&lt;a href=&quot;https://github.com/3Kmfi6HP/EDtunnel&quot; target=&quot;_blank&quot;&gt;EDtunnel - https://github.com/3Kmfi6HP/EDtunnel&lt;/a&gt;\\n`</span>);</span><br><span class=\"line\">\theader.<span class=\"title function_\">push</span>(<span class=\"string\">`\\n&lt;iframe src=&quot;https://ghbtns.com/github-btn.html?user=USERNAME&amp;repo=REPOSITORY&amp;type=star&amp;count=true&amp;size=large&quot; frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;170&quot; height=&quot;30&quot; title=&quot;GitHub&quot;&gt;&lt;/iframe&gt;\\n\\n`</span>.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/USERNAME/g</span>, <span class=\"string\">&quot;3Kmfi6HP&quot;</span>).<span class=\"title function_\">replace</span>(<span class=\"regexp\">/REPOSITORY/g</span>, <span class=\"string\">&quot;EDtunnel&quot;</span>));</span><br><span class=\"line\">\theader.<span class=\"title function_\">push</span>(<span class=\"string\">`&lt;a href=&quot;//<span class=\"subst\">$&#123;hostName&#125;</span>/sub/<span class=\"subst\">$&#123;userIDArray[<span class=\"number\">0</span>]&#125;</span>&quot; target=&quot;_blank&quot;&gt;VLESS 节点订阅连接&lt;/a&gt;\\n&lt;a href=&quot;clash://install-config?url=<span class=\"subst\">$&#123;<span class=\"built_in\">encodeURIComponent</span>(clash_link)&#125;</span>&quot; target=&quot;_blank&quot;&gt;Clash for Windows 节点订阅连接&lt;/a&gt;\\n&lt;a href=&quot;<span class=\"subst\">$&#123;clash_link&#125;</span>&quot; target=&quot;_blank&quot;&gt;Clash 节点订阅连接2&lt;/a&gt;&lt;/p&gt;\\n`</span>);</span><br><span class=\"line\">\theader.<span class=\"title function_\">push</span>(<span class=\"string\">``</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Generate output string for each userID</span></span><br><span class=\"line\">\tuserIDArray.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">userID</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> vlessMain = <span class=\"string\">`vless://<span class=\"subst\">$&#123;userID&#125;</span>@<span class=\"subst\">$&#123;hostName&#125;</span><span class=\"subst\">$&#123;commonUrlPart&#125;</span>`</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> vlessSec = <span class=\"string\">`vless://<span class=\"subst\">$&#123;userID&#125;</span>@<span class=\"subst\">$&#123;proxyIP&#125;</span><span class=\"subst\">$&#123;commonUrlPart&#125;</span>`</span>;</span><br><span class=\"line\">\t\toutput.<span class=\"title function_\">push</span>(<span class=\"string\">`UUID: <span class=\"subst\">$&#123;userID&#125;</span>`</span>);</span><br><span class=\"line\">\t\toutput.<span class=\"title function_\">push</span>(<span class=\"string\">`<span class=\"subst\">$&#123;hashSeparator&#125;</span>\\nv2ray default ip\\n<span class=\"subst\">$&#123;separator&#125;</span>\\n<span class=\"subst\">$&#123;vlessMain&#125;</span>\\n<span class=\"subst\">$&#123;separator&#125;</span>`</span>);</span><br><span class=\"line\">\t\toutput.<span class=\"title function_\">push</span>(<span class=\"string\">`<span class=\"subst\">$&#123;hashSeparator&#125;</span>\\nv2ray with best ip\\n<span class=\"subst\">$&#123;separator&#125;</span>\\n<span class=\"subst\">$&#123;vlessSec&#125;</span>\\n<span class=\"subst\">$&#123;separator&#125;</span>`</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\toutput.<span class=\"title function_\">push</span>(<span class=\"string\">`<span class=\"subst\">$&#123;hashSeparator&#125;</span>\\n# Clash Proxy Provider 配置格式(configuration format)\\nproxy-groups:\\n  - name: UseProvider\\n\ttype: select\\n\tuse:\\n\t  - provider1\\n\tproxies:\\n\t  - Proxy\\n\t  - DIRECT\\nproxy-providers:\\n  provider1:\\n\ttype: http\\n\turl: https://<span class=\"subst\">$&#123;hostName&#125;</span>/sub/<span class=\"subst\">$&#123;userIDArray[<span class=\"number\">0</span>]&#125;</span>?format=clash\\n\tinterval: 3600\\n\tpath: ./provider1.yaml\\n\thealth-check:\\n\t  enable: true\\n\t  interval: 600\\n\t  # lazy: true\\n\t  url: http://www.gstatic.com/generate_204\\n\\n<span class=\"subst\">$&#123;hashSeparator&#125;</span>`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// HTML Head with CSS</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> htmlHead = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;title&gt;EDtunnel: VLESS configuration&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;meta name=&quot;description&quot; content=&quot;This is a tool for generating VLESS protocol configurations. Give us a star on GitHub https://github.com/3Kmfi6HP/EDtunnel if you found it useful!&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t\t&lt;meta name=&quot;keywords&quot; content=&quot;EDtunnel, cloudflare pages, cloudflare worker, severless&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">\t\t&lt;meta property=&quot;og:site_name&quot; content=&quot;EDtunnel: VLESS configuration&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;meta property=&quot;og:type&quot; content=&quot;website&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;meta property=&quot;og:title&quot; content=&quot;EDtunnel - VLESS configuration and subscribe output&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;meta property=&quot;og:description&quot; content=&quot;Use cloudflare pages and worker severless to implement vless protocol&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;meta property=&quot;og:url&quot; content=&quot;https://<span class=\"subst\">$&#123;hostName&#125;</span>/&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;meta property=&quot;og:image&quot; content=&quot;https://api.qrserver.com/v1/create-qr-code/?size=500x500&amp;data=<span class=\"subst\">$&#123;<span class=\"built_in\">encodeURIComponent</span>(<span class=\"string\">`vless://<span class=\"subst\">$&#123;userIDs.split(<span class=\"string\">&#x27;,&#x27;</span>)[<span class=\"number\">0</span>]&#125;</span>@<span class=\"subst\">$&#123;hostName&#125;</span><span class=\"subst\">$&#123;commonUrlPart&#125;</span>`</span>)&#125;</span>&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;meta name=&quot;twitter:title&quot; content=&quot;EDtunnel - VLESS configuration and subscribe output&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;meta name=&quot;twitter:description&quot; content=&quot;Use cloudflare pages and worker severless to implement vless protocol&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;meta name=&quot;twitter:url&quot; content=&quot;https://<span class=\"subst\">$&#123;hostName&#125;</span>/&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;meta name=&quot;twitter:image&quot; content=&quot;https://cloudflare-ipfs.com/ipfs/bafybeigd6i5aavwpr6wvnwuyayklq3omonggta4x2q7kpmgafj357nkcky&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;meta property=&quot;og:image:width&quot; content=&quot;1500&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;meta property=&quot;og:image:height&quot; content=&quot;1500&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        &lt;style&gt;</span></span><br><span class=\"line\"><span class=\"string\">        body &#123;</span></span><br><span class=\"line\"><span class=\"string\">            font-family: Arial, sans-serif;</span></span><br><span class=\"line\"><span class=\"string\">            background-color: #f0f0f0;</span></span><br><span class=\"line\"><span class=\"string\">            color: #333;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 10px;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        a &#123;</span></span><br><span class=\"line\"><span class=\"string\">            color: #1a0dab;</span></span><br><span class=\"line\"><span class=\"string\">            text-decoration: none;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\timg &#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tmax-width: 100%;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\theight: auto;</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\t</span></span><br><span class=\"line\"><span class=\"string\">        pre &#123;</span></span><br><span class=\"line\"><span class=\"string\">            white-space: pre-wrap;</span></span><br><span class=\"line\"><span class=\"string\">            word-wrap: break-word;</span></span><br><span class=\"line\"><span class=\"string\">            background-color: #fff;</span></span><br><span class=\"line\"><span class=\"string\">            border: 1px solid #ddd;</span></span><br><span class=\"line\"><span class=\"string\">            padding: 15px;</span></span><br><span class=\"line\"><span class=\"string\">            margin: 10px 0;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\t/* Dark mode */</span></span><br><span class=\"line\"><span class=\"string\">        @media (prefers-color-scheme: dark) &#123;</span></span><br><span class=\"line\"><span class=\"string\">            body &#123;</span></span><br><span class=\"line\"><span class=\"string\">                background-color: #333;</span></span><br><span class=\"line\"><span class=\"string\">                color: #f0f0f0;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            a &#123;</span></span><br><span class=\"line\"><span class=\"string\">                color: #9db4ff;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">            pre &#123;</span></span><br><span class=\"line\"><span class=\"string\">                background-color: #282a36;</span></span><br><span class=\"line\"><span class=\"string\">                border-color: #6272a4;</span></span><br><span class=\"line\"><span class=\"string\">            &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;/style&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">    `</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Join output with newlines, wrap inside &lt;html&gt; and &lt;body&gt;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    <span class=\"subst\">$&#123;htmlHead&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">    &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;pre style=&quot;</span></span><br><span class=\"line\"><span class=\"string\">    background-color: transparent;</span></span><br><span class=\"line\"><span class=\"string\">    border: none;</span></span><br><span class=\"line\"><span class=\"string\">&quot;&gt;<span class=\"subst\">$&#123;header.join(<span class=\"string\">&#x27;&#x27;</span>)&#125;</span>&lt;/pre&gt;&lt;pre&gt;<span class=\"subst\">$&#123;output.join(<span class=\"string\">&#x27;\\n&#x27;</span>)&#125;</span>&lt;/pre&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/html&gt;`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createVLESSSub</span>(<span class=\"params\">userID_Path, hostName</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> portArray_http = [<span class=\"number\">80</span>, <span class=\"number\">8080</span>, <span class=\"number\">8880</span>, <span class=\"number\">2052</span>, <span class=\"number\">2086</span>, <span class=\"number\">2095</span>, <span class=\"number\">2082</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> portArray_https = [<span class=\"number\">443</span>, <span class=\"number\">8443</span>, <span class=\"number\">2053</span>, <span class=\"number\">2096</span>, <span class=\"number\">2087</span>, <span class=\"number\">2083</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Split the userIDs into an array</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> userIDArray = userID_Path.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;,&#x27;</span>) ? userID_Path.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>) : [userID_Path];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Prepare output array</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> output = [];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Generate output string for each userID</span></span><br><span class=\"line\">\tuserIDArray.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">userID</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Check if the hostName is a Cloudflare Pages domain, if not, generate HTTP configurations</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// reasons: pages.dev not support http only https</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!hostName.<span class=\"title function_\">includes</span>(<span class=\"string\">&#x27;pages.dev&#x27;</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Iterate over all ports for http</span></span><br><span class=\"line\">\t\t\tportArray_http.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">port</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> commonUrlPart_http = <span class=\"string\">`:<span class=\"subst\">$&#123;port&#125;</span>?encryption=none&amp;security=none&amp;fp=random&amp;type=ws&amp;host=<span class=\"subst\">$&#123;hostName&#125;</span>&amp;path=%2F%3Fed%3D2048#<span class=\"subst\">$&#123;hostName&#125;</span>-HTTP-<span class=\"subst\">$&#123;port&#125;</span>`</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> vlessMainHttp = <span class=\"string\">`vless://<span class=\"subst\">$&#123;userID&#125;</span>@<span class=\"subst\">$&#123;hostName&#125;</span><span class=\"subst\">$&#123;commonUrlPart_http&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// For each proxy IP, generate a VLESS configuration and add to output</span></span><br><span class=\"line\">\t\t\t\tproxyIPs.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">proxyIP</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">const</span> vlessSecHttp = <span class=\"string\">`vless://<span class=\"subst\">$&#123;userID&#125;</span>@<span class=\"subst\">$&#123;proxyIP&#125;</span><span class=\"subst\">$&#123;commonUrlPart_http&#125;</span>-<span class=\"subst\">$&#123;proxyIP&#125;</span>-EDtunnel`</span>;</span><br><span class=\"line\">\t\t\t\t\toutput.<span class=\"title function_\">push</span>(<span class=\"string\">`<span class=\"subst\">$&#123;vlessMainHttp&#125;</span>`</span>);</span><br><span class=\"line\">\t\t\t\t\toutput.<span class=\"title function_\">push</span>(<span class=\"string\">`<span class=\"subst\">$&#123;vlessSecHttp&#125;</span>`</span>);</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Iterate over all ports for https</span></span><br><span class=\"line\">\t\tportArray_https.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">port</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> commonUrlPart_https = <span class=\"string\">`:<span class=\"subst\">$&#123;port&#125;</span>?encryption=none&amp;security=tls&amp;sni=<span class=\"subst\">$&#123;hostName&#125;</span>&amp;fp=random&amp;type=ws&amp;host=<span class=\"subst\">$&#123;hostName&#125;</span>&amp;path=%2F%3Fed%3D2048#<span class=\"subst\">$&#123;hostName&#125;</span>-HTTPS-<span class=\"subst\">$&#123;port&#125;</span>`</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> vlessMainHttps = <span class=\"string\">`vless://<span class=\"subst\">$&#123;userID&#125;</span>@<span class=\"subst\">$&#123;hostName&#125;</span><span class=\"subst\">$&#123;commonUrlPart_https&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// For each proxy IP, generate a VLESS configuration and add to output</span></span><br><span class=\"line\">\t\t\tproxyIPs.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">proxyIP</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> vlessSecHttps = <span class=\"string\">`vless://<span class=\"subst\">$&#123;userID&#125;</span>@<span class=\"subst\">$&#123;proxyIP&#125;</span><span class=\"subst\">$&#123;commonUrlPart_https&#125;</span>-<span class=\"subst\">$&#123;proxyIP&#125;</span>-EDtunnel`</span>;</span><br><span class=\"line\">\t\t\t\toutput.<span class=\"title function_\">push</span>(<span class=\"string\">`<span class=\"subst\">$&#123;vlessMainHttps&#125;</span>`</span>);</span><br><span class=\"line\">\t\t\t\toutput.<span class=\"title function_\">push</span>(<span class=\"string\">`<span class=\"subst\">$&#123;vlessSecHttps&#125;</span>`</span>);</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Join output with newlines</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> output.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</details>\n","prev":{"title":"使用 better-cloudflare-ip 在Windows上优选 Cloudflare IP","link":"win-cf-ip"},"next":{"title":"生成UUID","link":"vpn-uuid"},"plink":"http://l-zm.com/cf-wp/","toc":[{"id":"cloudflare-官网","title":"Cloudflare 官网","index":"1"},{"id":"编辑代码","title":"编辑代码","index":"2"},{"id":"配置v2rayn","title":"配置v2rayN","index":"3"},{"id":"如何生成uuid","title":"如何生成UUID","index":"4"},{"id":"如何优选ip","title":"如何优选IP","index":"5"}],"reading_time":"7712 字约 51 分钟"}